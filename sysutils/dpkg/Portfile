# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 105815 2013-05-06 14:52:20Z landonf@macports.org $

PortSystem          1.0

name                dpkg
version             1.16.12
revision            3
platforms           darwin freebsd
categories          sysutils archivers
license             GPL-2+
maintainers         gwmail.gwu.edu:egall openmaintainer
description         Debian package maintenance system
long_description    ${name} is the basis of the ${description}. \
                    Installing this port allows the usage of the \
                    \`port dpkg\` command.

homepage            http://wiki.debian.org/Teams/Dpkg

master_sites        debian:d/${name}/
checksums           md5     b7e9cac52ff7882b088a3058b52081b5 \
                    sha1    5969bb7f30ade840a56f512571ca5ab56d434af1 \
                    rmd160  1912afd35b835901e661d2c0df563198de4e8420 \
                    sha256  af96447758ecbfda51fc57d4b3bc3d208ad6393e71b91c9b52c6687697a208da

# got to do some underscore-to-hyphen twiddling...
distname            ${name}_${version}
worksrcdir          ${name}-${version}

use_xz              yes
extract.asroot      yes

depends_build-append \
                    port:pkgconfig \
                    port:autoconf-archive \
                    port:xorg-util-macros \
                    port:gnutar \
                    port:perl5 \
                    bin:lzma:xz

# Use MacPorts versions explicitly:
depends_lib-append  port:bzip2 \
                    port:gettext \
                    port:libiconv \
                    port:ncurses \
                    path:lib/pkgconfig/liblzma.pc:xz \
                    port:zlib \
                    port:perl5 \
                    port:coreutils \
                    port:gnutar

# Some of the things needed at build time are also needed at runtime, but
# do not count as library dependencies because they are not actually
# linked against:
depends_run-append  port:gnutar \
                    bin:lzma:xz \
                    bin:gzip:gzip \
                    bin:perl:perl5 \
                    port:debianutils

# These platform variants had previously had patches associated
# with them...
platform darwin {
    depends_build-append    bin:gnumake:gmake
}

platform freebsd {
    depends_build-append    bin:gmake:gmake
}

patchfiles-append   patch-configure.ac.diff \
                    patch-lib_dpkg_dpkg.h.diff \
                    patch-lib_dpkg_tarfn.c.diff \
                    patch-src_remove.c.diff \
                    patch-src_archives.c.diff \
                    patch-utils_start-stop-daemon.c.diff
# patchfiles:
# - configure.ac: new patch, runs autoupdate and makes some other configury
#   changes that I normally like to make
# - lib/dpkg/dpkg.h: used to be "patch-lib_dpkg.h", forces the use of
#   gnutar instead of just "tar"
# - lib/dpkg/tarfn.c: used to be "patch-lib_tarfn.c", adds support for
#   dpkgs built with the ustar format, which fixes long filename handling
#   when not using gnutar. It also fixes a bug in dpkg's stripping of '/'
#   characters when there were not any.
# - src/archives.c: used to be "patch-main_achives.c", also adds support
#   for handling format differences between bsdtar and gnutar related to
#   pathname prefixes
# - src/remove.c: used to be "patch-main_remove.c", fixes the issue of
#   removing the last package on the system causing issues due to the
#   inclusion of '/.'
# - utils/start-stop-daemon.c: formerly "patch-utils_start-stop-daemon.c",
#   it adds Mac OS X support to the various process handling functions
#   debian uses to start/stop/monitor daemons. Still had to be disabled
#   with a configure flag for a while though (see above)

patch.args-append   --backup

post-patch {
    set scripts ${worksrcpath}/scripts
    reinplace "s|/etc/${name}/|${prefix}/etc/${name}/|" \
            ${scripts}/${name}-shlibdeps.pl \
            ${scripts}/${name}-source.pl
    reinplace "s|AC_ERROR|AC_MSG_ERROR|" ${worksrcpath}/m4/dpkg-build.m4
    file copy ${prefix}/share/aclocal/ax_check_gnu_make.m4 ${worksrcpath}/m4
    file copy ${prefix}/share/aclocal/xorg-macros.m4 ${worksrcpath}/m4
    # some things that fink does:
    # there needs to be a tab in this string, do NOT untabify it:
    system -W ${worksrcpath} "echo \"x86_64-darwin			darwin-x86_64\" >> debian/archtable"
}

use_autoreconf      yes
autoreconf.args     -fvi --warnings=all

configure.perl      ${prefix}/bin/perl5
configure.pkg_config ${prefix}/bin/pkg-config
configure.env-append TAR=${prefix}/bin/gnutar \
                     POD2MAN=${prefix}/bin/pod2man
configure.args-append \
                    --with-libintl-prefix=${prefix} \
                    --with-libiconv-prefix=${prefix} \
                    --with-admindir=${prefix}/var/db/${name} \
                    --with-logdir=${prefix}/var/log \
                    --mandir=${prefix}/share/man \
                    --infodir=${prefix}/share/info \
                    --srcdir=${worksrcpath} \
                    --with-zlib \
                    --with-bz2 \
                    --with-liblzma \
                    --disable-linker-optimisations \
                    --disable-silent-rules
# Got the start-stop-daemon to build again, no longer have to disable it
# with a configure flag here!

# ccache is trouble
configure.ccache          no

# blacklist older versions of gcc:
compiler.blacklist-append cc gcc-3.3 gcc-4.0 apple-gcc-4.0

# Older versions of gcc choke with the -Wvla warning flag:
configure.cflags-delete   -Wvla
configure.cppflags-delete -Wvla
configure.cxxflags-delete -Wvla
configure.ldflags-delete  -Wvla

# Also -Wmissing-declarations is not valid for C++:
configure.cxxflags-delete -Wmissing-declarations

# The flags have to be actually removed from the Makefiles to be deleted
# for real:
post-configure {
    fs-traverse f_makefile ${worksrcpath} {
        if {[file tail ${f_makefile}] eq "Makefile"} {
            reinplace "s|-Wvla||" ${f_makefile}
        }
    }
    reinplace "s|-Wmissing-declarations||" ${worksrcpath}/dselect/Makefile
}

build.type          gnu

# Tests currently fail, this needs to be fixed eventually:
test.run            yes
test.target         check

#TODO: add depends_test-style dependencies once those are available
# (or just make a variant)
pre-test {
    elevateToRoot "test"
}
post-test {
    dropPrivileges
}

# I would assign all of these in a loop, but:
#  1. I do not know if that can be done outside of a phase
#  2. vardpkg refers to a directory one level deeper than the rest
set vardpkg ${prefix}/var/db/${name}
set destvardpkg ${destroot}${vardpkg}
set etcdpkg ${prefix}/etc/${name}
set destetcdpkg ${destroot}${etcdpkg}
set sharedpkg ${prefix}/share/${name}
set destsharedpkg ${destroot}${sharedpkg}
set libdpkg ${prefix}/lib/${name}
set destlibdpkg ${destroot}${libdpkg}
destroot.keepdirs-append \
                    ${destvardpkg}/parts \
                    ${destvardpkg}/updates \
                    ${destvardpkg}/info \
                    ${destvardpkg}/alternatives \
                    ${destvardpkg}/methods/multicd \
                    ${destvardpkg}/methods/mnt \
                    ${destvardpkg}/methods/ftp \
                    ${destvardpkg}/methods/floppy \
                    ${destvardpkg}/methods/disk \
                    ${destroot}${prefix}/var/log

pre-destroot {
    set docdir ${prefix}/share/doc/${name}
    set destdocdir ${destroot}${docdir}
    file mkdir ${destdocdir}
    # directory will be empty if docs are not built:
    if {![variant_isset docs]} {
        destroot.keepdirs-append ${destdocdir}
    }
}

post-destroot {
    file mkdir ${destvardpkg}
    file mkdir ${destvardpkg}/updates
    file mkdir ${destvardpkg}/info
    system "touch ${destvardpkg}/available ${destvardpkg}/status"
    xinstall -d -m 0755 ${destlibdpkg}/base-files
    destroot.keepdirs-append ${destlibdpkg}/base-files
    xinstall -m 644 ${worksrcpath}/debian/archtable ${destsharedpkg}
    xinstall -d ${destsharedpkg}/origins
    destroot.keepdirs-append ${destsharedpkg}/origins
    xinstall -d ${destetcdpkg}/origins
    eval xinstall -m 644 [glob ${filespath}/origins/*] ${destetcdpkg}/origins
    destroot.keepdirs-append ${destetcdpkg}/dselect.cfg.d ${destetcdpkg}/${name}.cfg.d
    set shlibsdefault ${destetcdpkg}/shlibs.default
    system "touch ${shlibsdefault}"
    # Need to handle other shared library extensions to be able to do this
    # on other platforms:
    platform darwin {
        ui_debug "Generating ${shlibsdefault}"
        # the shlibs used here should be the libraries that dpkg actually
        # links against and actually uses symbols from; use the
        # port-depcheck.sh script from macportsscripts to help figure out
        # which ones those are:
        foreach shlib {bzip2 gettext libiconv ncurses xz zlib} {
            # Trying to do this in Tcl was too much of a pain, so instead I
            # just wrote a separate shell script for it:
            system "sh ${filespath}/format_for_shlibs.default.sh ${prefix} ${shlib} | tee -a ${shlibsdefault}"
        }
    }
}

post-activate {
    foreach dpkgneedfile {diversions statoverride} {
        if {![file exists ${vardpkg}/${dpkgneedfile}]} {
            system "touch ${vardpkg}/${dpkgneedfile}"
            file attributes ${vardpkg}/${dpkgneedfile} -permissions 644
        }
    }
}

# I used to think that this hung while building, but it turned out that
# it only seemed that way because the Doxyfile had "QUIET" set to "YES"...
variant docs description {Build documentation (warning: building documentation takes a long time)} {
    patchfiles-append       patch-doc_Doxyfile.in.diff
    # patchfiles:
    # - patch-doc_Doxyfile.in: updates the Doxyfile, and removes some of
    #   the options that can make doxygen take forever (this also results
    #   in less documentation being generated, but I am impatient. I can
    #   add some of the things back if there is demand for it)
    depends_build-append    port:doxygen \
                            path:bin/dot:graphviz
    set docdir ${prefix}/share/doc/${name}
    configure.args-append   --docdir=${docdir} \
                            --htmldir=${docdir}/html \
                            --dvidir=${docdir}/dvi \
                            --pdfdir=${docdir}/pdf \
                            --psdir=${docdir}/ps
    # keep doxygen output from getting mixed in with regular make output:
    use_parallel_build      no
    # the "doc" target calls doxygen for us:
    build.target-append     doc
    post-build {
        set docdir ${prefix}/share/doc/${name}
        set destdocdir ${destroot}${docdir}
        xinstall -d ${destdocdir}
        if {[file isdirectory ${worksrcpath}/doc/doc]} {
            copy ${worksrcpath}/doc/doc ${destdocdir}
        }
        copy ${worksrcpath}/doc/html ${destdocdir}
        foreach docfile {AUTHORS ChangeLog ChangeLog.old COPYING NEWS README README.translators THANKS TODO} {
            xinstall -m 644 ${worksrcpath}/${docfile} ${destdocdir}
        }
        set debdocdir ${destdocdir}/debian
        xinstall -d ${debdocdir}
        foreach debdocfile {changelog copyright} {
            xinstall -m 644 ${worksrcpath}/debian/${debdocfile} ${debdocdir}
        }
        foreach docdocfile {coding-style.txt triggers.txt README.feature-removal-schedule frontend.txt README.api} {
            xinstall -m 644 ${worksrcpath}/doc/${docdocfile} ${destdocdir}
        }
    }
}

# odd-numbered releases are unstable, so ignore them
livecheck.type      none
livecheck.url       http://ftp.debian.org/debian/pool/main/d/${name}/
livecheck.regex     "${name}_(\\d+\\.\\d+(\\.\\d+)*)"
