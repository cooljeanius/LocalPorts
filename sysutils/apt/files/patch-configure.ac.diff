--- configure.ac.orig	2004-07-29 12:43:13.000000000 -0400
+++ configure.ac	2014-04-10 12:01:31.000000000 -0400
@@ -1,128 +1,212 @@
 ad
-dnl Process this file with autoconf to produce a configure script.
-dnl The ONLY thing this is used for is to configure for different
-dnl linux architectures and configurations, it is not used to make the
-dnl code more portable
-
-dnl You MUST have an environment that has all the POSIX functions and
-dnl some of the more populare bsd/sysv ones (like select). You'll also
-dnl need a C++ compiler that is semi-standard conformant, exceptions are 
-dnl not used but STL is.
-
-dnl 'make -f Makefile startup' will generate the configure file from 
-dnl configure.in correctly and can be run at any time
-
-AC_PREREQ(2.50)
-AC_INIT(configure.in)
-AC_CONFIG_AUX_DIR(buildlib)
-AC_CONFIG_HEADER(include/config.h:buildlib/config.h.in include/apti18n.h:buildlib/apti18n.h.in)
-
-dnl -- SET THIS TO THE RELEASE VERSION --
-AC_DEFINE_UNQUOTED(VERSION,"0.5.27")
-PACKAGE="apt"
-AC_DEFINE_UNQUOTED(PACKAGE,"$PACKAGE")
-AC_SUBST(PACKAGE)
+dnl#                                               -*- Autoconf -*-
+dnl# Process this file with autoconf to produce a configure script.
+dnl# The ONLY thing this was used for is to configure for different
+dnl# Linux (and BSD, and Darwin) architectures and configurations, it
+dnl# had not previously been used to make the code more portable.
+
+dnl# You MUST have an environment that has all the POSIX functions and
+dnl# some of the more popular bsd/sysv ones (like select). You will also
+dnl# need a C++ compiler that is semi-standard conformant; exceptions are 
+dnl# not used, but STL is.
+
+dnl# 'make -f Makefile startup' should generate the configure file from 
+dnl# configure.ac correctly, and can be run at any time.
+
+AC_PREREQ([2.69])
+AC_INIT([apt],[0.5.27],[jgg@debian.org])
+AC_CONFIG_SRCDIR([apt-inst/database.cc])
+AC_CONFIG_AUX_DIR([buildlib])
+AC_CONFIG_MACRO_DIR([m4])
+dnl# cannot use newlines in this:
+AC_CONFIG_HEADERS([include/config.h:buildlib/config.h.in include/apti18n.h:buildlib/apti18n.h.in])
+
+dnl# -- SET THIS TO THE RELEASE VERSION --
+AC_DEFINE_UNQUOTED([VERSION],["0.5.27"],[The version of this package])
+export PACKAGE="apt"
+AC_DEFINE_UNQUOTED([PACKAGE],["${PACKAGE}"],[The name of this package])
+AC_SUBST([PACKAGE])
 
-dnl Check the archs, we want the target type.
-AC_CANONICAL_SYSTEM
+dnl# Check the archs, we want the target type.
+AC_CANONICAL_TARGET dnl# also checks the "_SYSTEM" and friends
 
-dnl Check our C compiler
-AC_CHECK_TOOL_PREFIX
+dnl# Check our C compiler
+dnl# (AC\_CHECK\_TOOL\_PREFIX is no longer necessary)
 AC_PROG_CC
-AC_ISC_POSIX
+AC_SEARCH_LIBS([strerror],[cposix]) dnl# used to be AC\_ISC\_POSIX
 
-dnl Check for other programs
+dnl# check for large file support and enable it if possible
+dnl# do this early as other stuff might depend on it
+AC_SYS_LARGEFILE
+
+dnl# Check for other programs
+AC_PROG_AWK
 AC_PROG_CXX
 AC_PROG_CPP
+AC_PROG_LN_S
+AC_PROG_MKDIR_P
 AC_PROG_RANLIB
-AC_CHECK_TOOL(AR,ar,"ar")
+AC_PROG_YACC
+m4_ifdef([AM_PROG_AR],[
+AM_PROG_AR
+],[
+AC_CHECK_TOOL([AR],[ar],["ar"])
+])
 
-dnl Checks for sockets
-SAVE_LIBS="$LIBS"
+dnl# Checks for sockets
+SAVE_LIBS="${LIBS}"
 LIBS=""
-AC_SEARCH_LIBS(gethostbyname,nsl)
-AC_SEARCH_LIBS(connect,socket)
-SOCKETLIBS="$LIBS"
-AC_SUBST(SOCKETLIBS)
-LIBS="$SAVE_LIBS"
- 
-dnl Checks for pthread -- disabled due to glibc bugs jgg
-dnl AC_CHECK_LIB(pthread, pthread_create,[AC_DEFINE(HAVE_PTHREAD) PTHREADLIB="-lpthread"])
-AC_SUBST(PTHREADLIB)
-dnl if test "$PTHREADLIB" != "-lpthread"; then
-dnl   AC_MSG_ERROR(failed: I need posix threads, pthread)
-dnl fi
-
-dnl Check for BDB
-saveLIBS="$LIBS"
-LIBS="$LIBS -ldb"
-
-AC_CHECK_HEADER(db.h,
-     [AC_MSG_CHECKING(if we can link against BerkeleyDB)
-      AC_LINK_IFELSE(
-      [AC_LANG_PROGRAM(
-       [#include <db.h>],
-       [int r, s, t; db_version(&r, &s, &t);]
-      )],
-      [AC_DEFINE(HAVE_BDB)
+AC_SEARCH_LIBS([gethostbyname],[nsl])
+AC_SEARCH_LIBS([connect],[socket])
+SOCKETLIBS="${LIBS}"
+AC_SUBST([SOCKETLIBS])
+LIBS="${SAVE_LIBS}"
+ 
+dnl# Checks for pthread -- disabled due to glibc bugs. -jgg
+dnl# However, Darwin (and BSD, presumably) do not use glibc, so we do not
+dnl# have to disable them here:
+case ${host} in
+  *-*-*darwin* | *-*-*bsd* )
+    AC_CHECK_LIB([pthread],[pthread_create],
+                 [AC_DEFINE([HAVE_PTHREAD],[1],
+                            [Define to 1 if you have a lib for pthreads])
+                  PTHREADLIB="-lpthread"])
+    AC_SUBST([PTHREADLIB])
+    if test "x${PTHREADLIB}" != "x-lpthread"; then
+      AC_MSG_ERROR([failed: I need posix threads, pthread])
+    fi
+    ;;
+  *-*-*linux* | *-*-*glibc* | *-*-*hurd* )
+    AC_MSG_WARN([not checking pthreads on your system])
+    ;;
+  *)
+    AC_CHECK_LIB([pthread],[pthread_create])
+    ;;
+esac
+
+dnl# Check for BDB:
+saveLIBS="${LIBS}"
+LIBS="${LIBS} -ldb"
+
+AC_CHECK_HEADER([db.h],
+     [AC_MSG_CHECKING([if we can link against BerkeleyDB])
+      AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+         #include <db.h>
+         ]],[[
+         int r, s, t; db_version(&r, &s, &t);
+         ]])],
+      [AC_DEFINE([HAVE_BDB],[1],
+                 [Define to 1 if we can link against BerkeleyDB])
        BDBLIB="-ldb"
-       AC_MSG_RESULT(yes)],
+       AC_MSG_RESULT([yes])],
       [BDBLIB=""
-       AC_MSG_RESULT(no)]
-    )]
-)
-
-LIBS="$saveLIBS"
-
-AC_SUBST(BDBLIB)
-
-dnl Converts the ARCH to be something singular for this general CPU family
-dnl This is often the dpkg architecture string.
-AC_MSG_CHECKING(system architecture)
-archset="`awk \" ! /^#|^\\\$/ { if(match(\\\"$target_cpu\\\",\\\"^\\\"\\\$1\\\"\\\$\\\")) {print \\\$2; exit}}\" $srcdir/buildlib/archtable`"
-if test "x$archset" = "x"; then
-  AC_MSG_ERROR(failed: use --host= or check buildlib/archtable)
-fi
-AC_MSG_RESULT($archset)
-AC_DEFINE_UNQUOTED(COMMON_CPU,"$archset")
-
-dnl Get a common name for the host OS - this is primarily only for HURD and is
-dnl non fatal if it fails
-AC_MSG_CHECKING(system OS)
-osset="`awk \" ! /^#|^\\\$/ {if (match(\\\"$target_vendor-$target_os\\\",\\\$1)) {print \\\$2; exit}}\" $srcdir/buildlib/ostable`"
-AC_MSG_RESULT($osset)
-AC_DEFINE_UNQUOTED(COMMON_OS,"$osset")
-
-dnl We use C99 types if at all possible
-AC_CACHE_CHECK([for C99 integer types],c9x_ints,[
-    AC_TRY_COMPILE([#include <inttypes.h>],
-                   [uint8_t Foo1;uint16_t Foo2;uint32_t Foo3;],
-		   c9x_ints=yes,c9x_ints=no)])
-
-dnl Single Unix Spec statvfs
-AC_CHECK_FUNC(statvfs,[HAVE_STATVFS=yes])
-AC_SUBST(HAVE_STATVFS)
-
-dnl Arg, linux and bsd put their statfs function in different places
-if test x"$HAVE_STATVFS" != x"yes"; then
-   AC_EGREP_HEADER(statfs,sys/vfs.h,[AC_DEFINE(HAVE_VFS_H)],[
-   AC_EGREP_HEADER(statfs,sys/mount.h,[AC_DEFINE(HAVE_MOUNT_H)],[AC_MSG_ERROR(failed: Need statvfs)])
+       AC_MSG_RESULT([no])
+   ])
+])
+
+LIBS="${saveLIBS}"
+
+AC_SUBST([BDBLIB])
+
+AC_CHECK_LIB([curl],[curl_easy_init],
+     [AC_CHECK_HEADER([curl/curl.h],
+        [curl_ok=yes],
+        [curl_ok=no])],
+     [AC_MSG_WARN([newer versions of apt will need CURL for https support])],
+[])
+
+HAVE_ZLIB=no
+AC_CHECK_LIB([z],[gzopen],
+	[AC_CHECK_HEADER([zlib.h],[HAVE_ZLIB=yes],
+                         [AC_MSG_WARN([newer versions of apt will need zlib.h])])],
+	[AC_MSG_WARN([newer versions of apt will need libz])])
+AC_SUBST([HAVE_ZLIB])
+if test "x${HAVE_ZLIB}" = "xyes"; then
+	AC_DEFINE([HAVE_ZLIB],[1],[Define to 1 if we have zlib])
+fi
+
+HAVE_BZ2=no
+AC_CHECK_LIB([bz2],[BZ2_bzopen],
+             [AC_CHECK_HEADER([bzlib.h],[HAVE_BZ2=yes],[])],[])
+AC_SUBST([HAVE_BZ2])
+if test "x${HAVE_BZ2}" = "xyes"; then
+	AC_DEFINE([HAVE_BZ2],[1],[Define to 1 if we have bz2])
+fi
+
+HAVE_LZMA=no
+AC_CHECK_LIB([lzma],[lzma_easy_encoder],
+             [AC_CHECK_HEADER([lzma.h],[HAVE_LZMA=yes],[])],[])
+AC_SUBST([HAVE_LZMA])
+if test "x${HAVE_LZMA}" = "xyes"; then
+	AC_DEFINE([HAVE_LZMA],[1],[Define to 1 if we have lzma])
+fi
+
+dnl# Converts the ARCH to be something singular for this general CPU family
+dnl# This is often the dpkg architecture string.
+AC_MSG_CHECKING([system architecture])
+archset="`awk \" ! /^#|^\\\$/ { if(match(\\\"${target_cpu}\\\",\\\"^\\\"\\\$1\\\"\\\$\\\")) {print \\\$2; exit}}\" ${srcdir}/buildlib/archtable`"
+if test "x${archset}" = "x"; then
+  AC_MSG_ERROR([failed: use --host= or check buildlib/archtable])
+fi
+AC_MSG_RESULT([$archset])
+AC_DEFINE_UNQUOTED([COMMON_CPU],["${archset}"],
+                   [a singular name for the general CPU family])
+
+dnl# Get a common name for the host OS - this is primarily only for HURD
+dnl# and is non-fatal if it fails:
+AC_MSG_CHECKING([system OS])
+osset="`awk \" ! /^#|^\\\$/ {if (match(\\\"${target_vendor}-${target_os}\\\",\\\$1)) {print \\\$2; exit}}\" ${srcdir}/buildlib/ostable`"
+AC_MSG_RESULT([${osset}])
+AC_DEFINE_UNQUOTED([COMMON_OS],["${osset}"],
+                   [common name for the host OS])
+
+dnl# We use C99 types if at all possible:
+AC_CACHE_CHECK([for C99 integer types],[c9x_cv_ints],[
+    AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+#include <inttypes.h>
+    ]],[[
+uint8_t Foo1;
+uint16_t Foo2;
+uint32_t Foo3;
+    ]])],[c9x_cv_ints=yes],[c9x_cv_ints=no])
+])
+AC_TYPE_UINT8_T
+AC_TYPE_UINT16_T
+AC_TYPE_UINT32_T
+
+dnl# Single Unix Spec statvfs:
+AC_CHECK_FUNC([statvfs],[export HAVE_STATVFS=yes])
+AC_SUBST([HAVE_STATVFS])
+
+dnl# Arg, linux and bsd put their statfs function in different places:
+if test x"${HAVE_STATVFS}" != x"yes"; then
+   AC_EGREP_HEADER([statfs],[sys/vfs.h],
+                   [AC_DEFINE([HAVE_VFS_H],[1],
+                              [Define to 1 if statfs is in sys/vfs.h])],
+     [AC_EGREP_HEADER([statfs],[sys/mount.h],
+                      [AC_DEFINE([HAVE_MOUNT_H],[1],
+                                 [Define to 1 if statfs is in sys/mount.h])
+       ],[AC_MSG_ERROR([failed: Need statvfs])
+       ])
    ])
 fi
 
-dnl We should use the real timegm function if we have it.
-AC_CHECK_FUNC(timegm,AC_DEFINE(HAVE_TIMEGM))
-AC_SUBST(HAVE_TIMEGM)
-
-dnl Check the sizes etc. of the architecture
-dnl This is stupid, it should just use the AC macros like it does below
-dnl Cross compilers can either get a real C library or preload the cache
-dnl with their size values.
+dnl# We should use the real timegm function if we have it.
+AC_CHECK_FUNC([timegm],
+              [AC_DEFINE([HAVE_TIMEGM],[1],
+                         [Define to 1 if we have the real timegm function])
+])
+AC_SUBST([HAVE_TIMEGM])
+
+dnl# Check the sizes etc. of the architecture
+dnl# This is stupid, it should just use the AC macros like it does below
+dnl# Cross compilers can either get a real C library or preload the cache
+dnl# with their size values.
 changequote(,)
-archline="`awk \" ! /^#|^\\\$/ {if (match(\\\"$archset\\\",\\\$1)) {print; exit}}\" $srcdir/buildlib/sizetable | cut -f 2- -d ' '`"
-if test "x$archline" != "x"; then
+archline="`awk \" ! /^#|^\\\$/ {if (match(\\\"${archset}\\\",\\\$1)) {print; exit}}\" $srcdir/buildlib/sizetable | cut -f 2- -d ' '`"
+if test "x${archline}" != "x"; then
    changequote([,])
-   set $archline
+   set ${archline}
    if test "$1" = "little"; then
       ac_cv_c_bigendian=no
    else
@@ -134,70 +218,179 @@
    size_long=$5
 fi
 
-dnl I wonder what AC_C_BIGENDIAN does if you cross compile...
-dnl This is probably bogus, as above we only care if we have to build our own
-dnl C9x types.
-if test "$cross_compiling" = "yes" -a "x$archline" = "x"; then
-  AC_MSG_ERROR(When cross compiling, architecture must be present in sizetable)
+dnl# I wonder what AC_C_BIGENDIAN does if you cross compile...
+dnl# This is probably bogus, as above we only care if we have to build our
+dnl# own C9x types.
+if test "x${cross_compiling}" = "xyes" -a "x${archline}" = "x"; then
+  AC_MSG_ERROR([When cross compiling, architecture must be present in sizetable])
 fi
 AC_C_BIGENDIAN
    
-dnl We do not need this if we have inttypes!
-HAVE_C9X=yes
-if test x"$c9x_ints" = x"no"; then
-   AC_CHECK_SIZEOF(char,$size_char)
-   AC_CHECK_SIZEOF(int,$size_int)
-   AC_CHECK_SIZEOF(short,$size_short)
-   AC_CHECK_SIZEOF(long,$size_long)
-  
-   HAVE_C9X=
-   AC_SUBST(HAVE_C9X)
-fi
-
-dnl HP-UX sux..
-AC_MSG_CHECKING(for missing socklen_t)
-AC_EGREP_HEADER(socklen_t, sys/socket.h,[AC_MSG_RESULT(no)],[
-	AC_DEFINE(NEED_SOCKLEN_T_DEFINE)
-	NEED_SOCKLEN_T_DEFINE=yes
-        AC_MSG_RESULT(missing.)])
-AC_SUBST(NEED_SOCKLEN_T_DEFINE)
-
-dnl HP-UX needs -d_XOPEN_SOURCE_EXTENDED for h_errno
-AC_MSG_CHECKING(for h_errno)
-AC_EGREP_HEADER(h_errno, netdb.h, [AC_MSG_RESULT(normal)],
-   [CPPFLAGS="$CPPFLAGS -D_XOPEN_SOURCE_EXTENDED"
-    AC_EGREP_HEADER(h_errno, netdb.h, 
-       [AC_MSG_RESULT(needs _XOPEN_SOURCE_EXTENDED)],
-       [AC_MSG_ERROR("not found.")])
-   ])
-
-dnl Check for debiandoc
-AC_PATH_PROG(DEBIANDOC_HTML,debiandoc2html)
-AC_PATH_PROG(DEBIANDOC_TEXT,debiandoc2text)
+dnl# We do not need this if we have inttypes!
+export HAVE_C9X=yes
+if test x"${c9x_cv_ints}" = x"no"; then
+   AC_CHECK_SIZEOF([char],[${size_char}])
+   AC_CHECK_ALIGNOF([char])
+   AC_CHECK_SIZEOF([int],[${size_int}])
+   AC_CHECK_ALIGNOF([int])
+   AC_CHECK_SIZEOF([short],[${size_short}])
+   AC_CHECK_ALIGNOF([short])
+   AC_CHECK_SIZEOF([long],[${size_long}])
+   AC_CHECK_ALIGNOF([long])
 
-dnl Check for the SGML tools needed to build man pages
-AC_PATH_PROG(DOCBOOK2MAN,docbook2man)
+   export HAVE_C9X=""
+   AC_SUBST([HAVE_C9X])
+fi
 
-dnl Check for the XML tools needed to build man pages
-AC_PATH_PROG(XMLTO,xmlto)
+dnl# HP-UX sux...
+AC_MSG_CHECKING([for missing socklen_t])
+AC_EGREP_HEADER([socklen_t],[sys/socket.h],[AC_MSG_RESULT([no])],[
+	AC_DEFINE([NEED_SOCKLEN_T_DEFINE],[1],
+                  [Define to 1 if socklen_t is missing from sys/socket.h])
+	export NEED_SOCKLEN_T_DEFINE=yes
+        AC_MSG_RESULT([missing.])
+])
+AC_SUBST([NEED_SOCKLEN_T_DEFINE])
+
+dnl# HP-UX needs -d_XOPEN_SOURCE_EXTENDED for h_errno:
+AC_MSG_CHECKING([if netdb.h declares h_errno])
+AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+	#include <netdb.h>
+	]],[[
+		return h_errno;
+	]])],[
+		aptget_cv_netdb_declares_h_errno=yes
+	],[
+		aptget_cv_netdb_declares_h_errno=no
+	])
+
+if test "x${aptget_cv_netdb_declares_h_errno}" = "xno"; then
+	CPPFLAGS="${CPPFLAGS} -D_XOPEN_SOURCE_EXTENDED"
+fi
+
+AC_LINK_IFELSE([AC_LANG_PROGRAM([[
+	#include <netdb.h>
+	]],[[
+		return h_errno;
+	]])],[
+		aptget_cv_netdb_declares_h_errno=yes
+	],[
+		aptget_cv_netdb_declares_h_errno=no
+	])
+
+AC_MSG_RESULT([${aptget_cv_netdb_declares_h_errno}])
+
+if test "x${aptget_cv_netdb_declares_h_errno}" = "xno"; then
+	AC_MSG_ERROR([h_errno is required])
+fi
 
-dnl Check for YODL
-dnl AC_CHECK_PROG(YODL_MAN,yodl2man,"yes","")
+dnl# Check for debiandoc:
+AC_PATH_PROG([DEBIANDOC_HTML],[debiandoc2html])
+AC_PATH_PROG([DEBIANDOC_TEXT],[debiandoc2text])
 
+dnl# Check for the SGML tools needed to build man pages:
+AC_PATH_PROG([DOCBOOK2MAN],[docbook2man])
+
+dnl# Check for the XML tools needed to build man pages:
+AC_PATH_PROG([XMLTO],[xmlto])
+
+dnl# Check for YODL:
+AC_CHECK_PROG([YODL_MAN],[yodl2man],["yes"],[""])
+
+dnl# Check for doxygen:
+AC_PATH_PROG([DOXYGEN],[doxygen])
+
+dnl# Check for the XSLTProc tool needed to build man pages with po4a:
+AC_PATH_PROG([XSLTPROC],[xsltproc])
+
+dnl# Check for the po4a tool needed to build man pages:
+AC_PATH_PROG([PO4A],[po4a])
+
+dnl# Check for graphviz:
+AC_CHECK_PROG([HAVE_DOT],[dot],[YES],[NO])
+AC_PATH_PROG([DOT],[dot],[])
+DOTDIR=$(dirname ${DOT})
+AC_SUBST([DOTDIR])
+
+dnl# misc. compiling things:
 ah_NUM_PROCS
 rc_GLIBC_VER
 rc_LIBSTDCPP_VER
 ah_GCC3DEP
 
-dnl It used to be that the user could select translations and that could get
-dnl passed to the makefiles, but now that can only work if you use special
-dnl gettext approved makefiles, so this feature is unsupported by this.
+dnl# It used to be that the user could select translations and that could
+dnl# get passed to the makefiles, but now that can only work if you use
+dnl# special gettext approved makefiles, so this feature is unsupported
+dnl# by this.
 ALL_LINGUAS="da de en_GB es fr hu it nl no_NO pl pt_BR ru sv zh_TW"
-AM_GNU_GETTEXT(external)
-if test x"$USE_NLS" = "xyes"; then
-   AC_DEFINE(USE_NLS)
+AM_GNU_GETTEXT([external])
+AM_GNU_GETTEXT_VERSION([0.18.3])
+if test x"${USE_NLS}" = "xyes"; then
+   AC_DEFINE([USE_NLS],[1],[Define to 1 to use NLS])
 fi
-AC_SUBST(USE_NLS)
-AC_PATH_PROG(BASH, bash)
+AC_SUBST([USE_NLS])
+AC_PATH_PROG([BASH],[bash])
+
+# Checks for libraries.
+AC_CHECK_LIB([rpm],[_rpmdpkg_debug])
+AC_SEARCH_LIBS([libintl_textdomain],
+               [intl c gnu asprintf gettextlib gettextpo gettextsrc])
+AC_SEARCH_LIBS([libintl_bindtextdomain],
+               [intl c gnu asprintf gettextlib gettextpo gettextsrc])
+
+# Checks for header files.
+AC_SYS_POSIX_TERMIOS
+AC_HEADER_STDBOOL dnl# also "_CHECK"s it
+AC_HEADER_TIME
+AC_CHECK_HEADERS([argz.h arpa/inet.h fcntl.h float.h langinfo.h libintl.h \
+                  limits.h locale.h malloc.h malloc/malloc.h netdb.h \
+                  netinet/in.h stddef.h stdio.h stdio_ext.h sys/ioctl.h \
+                  sys/mount.h sys/param.h sys/socket.h sys/statvfs.h \
+                  sys/time.h sys/vfs.h termio.h termios.h utime.h wchar.h])
+
+# Checks for typedefs, structures, and compiler characteristics.
+AC_C_INLINE
+AC_C_PROTOTYPES
+AC_TYPE_INT8_T
+AC_TYPE_INT16_T
+AC_TYPE_INT32_T
+AC_TYPE_MODE_T
+AC_TYPE_OFF_T
+AC_TYPE_PID_T
+AC_CHECK_TYPES([ptrdiff_t])
+AC_TYPE_SIZE_T
+
+# Checks for library functions.
+AC_FUNC_ALLOCA
+AC_FUNC_FORK
+AC_FUNC_LSTAT dnl# also checks whether it "_FOLLOWS_SLASHED_SYMLINK"
+AC_FUNC_MALLOC
+AC_FUNC_MBRTOWC
+AC_FUNC_MKTIME
+AC_FUNC_MMAP
+AC_FUNC_REALLOC
+AC_CHECK_FUNCS([__argz_count __argz_next __argz_stringify bindtextdomain \
+                dup2 ftruncate getcwd gethostbyaddr gethostbyname \
+                gettimeofday inet_ntoa localeconv mblen mbrlen memchr \
+                memmove mempcpy memset mkdir munmap nl_langinfo pathconf \
+                putenv read realpath regcomp rmdir select setlocale \
+                socket stpcpy strcasecmp strchr strcspn strdup strerror \
+                strncasecmp strrchr strstr strtol strtoul textdomain \
+                uname utime])
+AC_CHECK_DECLS([bindtextdomain, textdomain])
+
+AH_BOTTOM([
+#if !defined(HAVE_TEXTDOMAIN)
+# undef textdomain
+# define textdomain(Domainname) ((const char *) (Domainname))
+#endif /* !HAVE_TEXTDOMAIN */
+#if !defined(HAVE_BINDTEXTDOMAIN)
+# undef bindtextdomain
+# define bindtextdomain(Domainname, Dirname) \
+    ((void) (Domainname), (const char *) (Dirname))
+#endif /* !HAVE_BINDTEXTDOMAIN */
+])
 
-AC_OUTPUT(environment.mak:buildlib/environment.mak.in makefile:buildlib/makefile.in,make -s dirs)
+AC_CONFIG_FILES([environment.mak:buildlib/environment.mak.in GNUMakefile:buildlib/makefile.in])
+AC_CONFIG_COMMANDS([default],[make -f GNUMakefile dirs],[])
+AC_OUTPUT
