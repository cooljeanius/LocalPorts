# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 57375 2009-09-10 08:16:41Z ryandesign@macports.org $

PortSystem              1.0

name                    objc
version                 3.2.11
categories              lang devel
platforms               darwin
license                 LGPL-2+
maintainers             mww gwmail.gwu.edu:egall openmaintainer
description             The Portable Object Compiler is an \
                        Objective-C compiler, written in Objective-C
long_description        \
        This is an independent implementation of Objective C - \
        independent of Stepstone\'s, NeXT\'s, Apple\'s, \
        GNU\'s (Free Software Foundation), or SunSoft\'s \
        Objective C implementation. Like the GNU compiler used to be, \
        the "objc" grammar is written in YACC. The lexical ananlyzer is \
        written in LEX, and the compiler itself in the Bourne shell and \
        in Objective C. \
        (the optional Objective C link editor is written in AWK).

homepage                http://users.pandora.be/stes/compiler.html
master_sites            http://users.pandora.be/stes/
distfiles               objc-${version}.tar.gz
checksums               sha1    648b0656f774d20d2cf26e3067e4559d960954c8 \
                        rmd160  37df07e8d93f80c3b8befd0fe5a5f8444d894b09
patchfiles-append       patch-src-cakit-intmodp.m.diff \
                        patch-configure.in.diff
patch.args-append       --backup
pre-patch {
    file rename ${worksrcpath}/configure.in ${worksrcpath}/configure.ac
}

depends_extract-append  port:openssl
depends_build-append    port:objc-bootstrap \
                        port:gawk \
                        bin:unifdef:developer_cmds
depends_lib-append      port:byacc \
                        port:flex

pre-configure {
    # The bootstrap compiler chokes on Apple's blocks syntax, even if it is
    # ifdef-ed out, so fix header(s) that use it:
    xinstall -d ${worksrcpath}/include_fixed
    ui_debug "Fixing headers..."
    system "unifdef -U__BLOCKS__ /usr/include/stdlib.h > ${worksrcpath}/include_fixed/stdlib.h 2>&1 || \[ $? -ne 2 \]"
    reinplace "s|__OSX_AVAILABLE_BUT_DEPRECATED|//|g" ${worksrcpath}/include_fixed/stdlib.h
    # For some reason autoreconf-ing fails to install these:
    # (be sure to update the version number if automake is ever updated)
    xinstall -m 755 -W ${prefix}/share/automake-1.15 \
        ar-lib \
        compile \
        missing \
        ${worksrcpath}/util
    xinstall -m 755 ${prefix}/share/libtool/build-aux/ltmain.sh ${worksrcpath}/util
}

configure.env           PATH=${prefix}/libexec/${name}-bootstrap/bin:$env(PATH)
use_autoreconf          yes
autoreconf.args         -fvi -Wall
platform darwin i386 {
    configure.args      --build=i386-apple-freebsd
}
platform darwin 12 {
    configure.args      --build=i686-apple-darwin${os.version}
}
configure.args-append   --with-cplus \
                        --with-postlink \
                        --with-prefixed-names
configure.universal_args ""
configure.objc          ${prefix}/libexec/${name}-bootstrap/bin/objc
configure.cppflags-delete -Wobjc-root-class
# Add the fixed includes directory that we created earlier:
configure.cppflags-append -I${worksrcpath}/include_fixed
# The bootstrap compiler has a hard time with <secure/_stdio.h>, so
# prevent <stdio.h> from dragging it in:
configure.cppflags-append -D_FORTIFY_SOURCE=0
configure.ccache        no
configure.objcflags     -g

use_parallel_build      no

build.env               PATH=${prefix}/libexec/${name}-bootstrap/bin:$env(PATH) \
                        CFLAGS=${configure.cflags} \
                        CPPFLAGS="${configure.cppflags}" \
                        IFLAGS="${configure.cppflags}" \
                        OBJC=${configure.objc} \
                        OBJCFLAGS='${configure.objcflags}' \
                        OBJCOPT='${configure.objcflags}' \
                        MFLAGS='${configure.objcflags}' \
                        LDFLAGS="${configure.ldflags}" \
                        AR="ar -qv"
build.target            default
build.args-append       CFLAGS=${configure.cflags} \
                        CPPFLAGS="${configure.cppflags}" \
                        IFLAGS="${configure.cppflags}" \
                        OBJC=${configure.objc} \
                        OBJCFLAGS='${configure.objcflags}' \
                        OBJCOPT='${configure.objcflags}' \
                        MFLAGS='${configure.objcflags}' \
                        LDFLAGS="${configure.ldflags}" \
                        AR="ar -qv"

destroot.destdir        INSTALLDIR=${destroot}${prefix}
post-destroot {
    file delete -force ${destroot}${prefix}/share/man
    file rename ${destroot}${prefix}/man ${destroot}${prefix}/share/man
}

variant garbage_collected description {Add support for garbage collection} {
    depends_lib-append  path:lib/pkgconfig/bdw-gc.pc:boehm-gc
}

livecheck.type          regex
livecheck.url           ${homepage}
livecheck.regex         objc-(\[0-9.\]+)\\.tar\\.gz

