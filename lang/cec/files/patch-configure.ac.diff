--- configure.ac.bak	2014-02-01 15:04:03.000000000 -0500
+++ configure.ac	2014-02-01 15:28:28.000000000 -0500
@@ -1,35 +1,44 @@
+# -*- Autoconf -*-
 # Run aclocal to generate aclocal.m4
 # then run automake
 # then run autoconf
 
 AC_PREREQ([2.69])
-AC_INIT([cec], [0.4], [cec-users@lists.cs.columbia.edu])
+AC_INIT([cec],[0.4],[cec-users@lists.cs.columbia.edu])
 AC_CONFIG_SRCDIR([src/cec-strlxml.cpp])
 AC_CONFIG_HEADERS([config.h])
 AC_CONFIG_MACRO_DIR([m4])
-AM_INIT_AUTOMAKE
+AC_CANONICAL_TARGET
+AM_INIT_AUTOMAKE([subdir-objects])
 AM_MAINTAINER_MODE
-AM_SANITY_CHECK
-AC_ISC_POSIX
-AM_SET_LEADING_DOT
-AC_EXEEXT
-AC_CANONICAL_HOST
-
-AC_PROG_AWK
-AC_PROG_INSTALL
-AC_PROG_LN_S
-AC_PROG_MAKE_SET
+AC_SEARCH_LIBS([strerror],[cposix]) dnl# used to be AC\_ISC\_POSIX
+
+AC_DEFUN([AC_POSSIBLE_DUPLICATE_CHECKS],[
+  AC_REQUIRE([AM_SANITY_CHECK])
+  AC_REQUIRE([AM_SET_LEADING_DOT])
+  AC_REQUIRE([AC_EXEEXT])
+  AC_REQUIRE([AC_PROG_AWK])
+  AC_REQUIRE([AC_PROG_INSTALL])
+  AC_REQUIRE([AC_PROG_LN_S])
+  AC_REQUIRE([AC_PROG_MAKE_SET])
+  AC_REQUIRE([AC_PROG_CC])
+  AC_REQUIRE([AM_PROG_CC_C_O])
+  AC_REQUIRE([AC_HEADER_STDC])
+  AC_REQUIRE([AC_CHECK_HEADER_STDBOOL])
+  AC_REQUIRE([AC_PROG_RANLIB])
+  AC_REQUIRE([AC_PROG_SED])
+])
+AC_POSSIBLE_DUPLICATE_CHECKS
 
-AC_PROG_CC
-AM_PROG_CC_C_O
 AC_LANG([C])
 
 AC_PROG_CPP
 AC_PROG_CXX
 AC_LANG([C++])
-AC_PROG_RANLIB
+AM_PROG_AR
 AC_PROG_GCC_TRADITIONAL
-LT_INIT
+LT_INIT([win32-dll])
+LT_LANG([C++])
 
 AC_MSG_CHECKING([for C++ standard library headers])
 AC_COMPILE_IFELSE([AC_LANG_SOURCE([
@@ -49,7 +58,7 @@
 vector<int> anothervect;
 map<char*, int> anothermap;
 ])
-],[AC_MSG_RESULT(yes)],[AC_MSG_RESULT(no: Warning compilation likely to fail)])
+],[AC_MSG_RESULT([yes])],[AC_MSG_RESULT([no: Warning compilation likely to fail])])
 # AX_* macros are from the autoconf-archive package
 AX_CXX_GCC_ABI_DEMANGLE
 AX_CXX_GNUCXX_HASHMAP
@@ -62,24 +71,24 @@
 # FIXME: Add an option for the user to specify expat library/header paths
 
 AC_CHECK_HEADER([expat.h],[],[
-echo The required expat header file expat.h was not found.
-echo Please re-run configure with CPPFLAGS=-Idirectory
+echo "The required expat header file expat.h was not found."
+echo "Please re-run configure with CPPFLAGS=-Ipathtoexpatheaders"
 exit 1
 ])
-AC_CHECK_LIB([expat], [XML_ParserCreate],[],[
-echo The required expat XML parser library was not found.
-echo Please re-run configure with LIBS=-Ldirectory
+AC_CHECK_LIB([expat],[XML_ParserCreate],[],[
+echo "The required expat XML parser library was not found."
+echo "Please re-run configure with LIBS=-Ldirectory"
 exit 1
 ])
 
 # Checks for header files.
-AC_HEADER_STDC
-AC_CHECK_HEADERS([stdlib.h string.h])
+AC_HEADER_STDBOOL dnl# also "_CHECK"s it
+AC_CHECK_HEADERS([stdio.h])
 
-# These are useful for development, but aren't necessary for building
+# These are useful for development, but are NOT necessary for building
 
-AC_PATH_PROG([NOTANGLE], [notangle])
-AC_PATH_PROG([NOWEAVE], [noweave])
+AC_PATH_PROG([NOTANGLE],[notangle])
+AC_PATH_PROG([NOWEAVE],[noweave])
 
 # Check for the ability to run ANTLR -- necessary for development, but not
 # for a build
@@ -99,19 +108,21 @@
 s/ .*$//' antlr-version`
 rm -f TestParser.cpp TestParser.hpp TestParserTokenTypes.hpp TestParserTokenTypes.txt test.g antlr-version
 ])
-if test $ac_cv_found_antlr = yes ; then
-  AC_MSG_RESULT([$antlr_version])
+if test ${ac_cv_found_antlr} = yes ; then
+  AC_MSG_RESULT([${antlr_version}])
   ANTLR="java antlr.Tool"
 else
   ANTLR=""
   AC_MSG_RESULT([no])
 fi
-AC_PATH_PROG([ANTLR_BIN], [antlr])
+AC_PATH_PROG([ANTLR_BIN],[antlr])
 
 # Checks for typedefs, structures, and compiler characteristics.
-AC_CHECK_HEADER_STDBOOL
+AC_C_BIGENDIAN
 AC_C_INLINE
+AC_C_PROTOTYPES
 AC_TYPE_SIZE_T
+AC_CHECK_TYPES([ptrdiff_t])
 
 # Checks for library functions.
 AC_FUNC_ERROR_AT_LINE
