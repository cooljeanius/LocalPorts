--- configure.ac.orig	2009-12-20 10:32:28.000000000 -0500
+++ configure.ac	2014-06-22 20:09:02.000000000 -0400
@@ -1,43 +1,70 @@
-AC_PREREQ(2.59)
-AC_INIT(enblend-enfuse,
-        [m4_esyscmd([tr -d '\n' < VERSION])],
-        [http://sourceforge.net/projects/enblend/])
+dnl#                                               -*- Autoconf -*-
+dnl# Process this file with autoconf to produce a configure script.
+
+AC_PREREQ([2.61])
+AC_INIT([enblend-enfuse],[4.0],[http://sourceforge.net/projects/enblend/])
 AC_CONFIG_SRCDIR([src/enblend.cc])
 AC_CONFIG_AUX_DIR([.])
-AC_CONFIG_MACRO_DIR(m4)
+AC_CONFIG_MACRO_DIR([m4])
+AC_CANONICAL_TARGET
+AC_OBJEXT
+AC_EXEEXT
 AM_INIT_AUTOMAKE([-Wall])
+AM_MAINTAINER_MODE
 AC_CONFIG_HEADER([config.h])
 
 # Checks for programs/compilers.
 # avoid default CXXFLAGS, they trigger a compiler error with g++ 4.2
-CXXFLAGS_ORIG=$CXXFLAGS
+AM_PROG_AR
+CXXFLAGS_ORIG="${CXXFLAGS}"
 AC_PROG_CXX
-CXXFLAGS=$CXXFLAGS_ORIG
-AC_PROG_CC
-AC_PROG_RANLIB
-AC_LANG(C++)
+CXXFLAGS="${CXXFLAGS_ORIG}"
+if test "x${CC}" = "x"; then
+  test -z "${CC}"
+  AC_PROG_CC
+else
+  test ! -z "${CC}"
+  AC_PROG_GCC_TRADITIONAL
+fi
+AC_PROG_CPP
+AC_PROG_INSTALL
+AC_PROG_MKDIR_P
+LT_INIT([static win32-dll])
+LT_LANG([C])
+LT_LANG([C++])
+AC_LANG([C++])
+PKG_PROG_PKG_CONFIG
 
 AC_C_BIGENDIAN
 
 # Checks for libraries.
-AC_CHECK_LIB(z, gzopen,
+LT_LIB_M
+AC_CHECK_LIB([z],[gzopen],
              [],
-             AC_MSG_NOTICE([Compiling without libz.]), [])
-AC_CHECK_LIB(jpeg, jpeg_finish_compress,
-             [LIBS="-ljpeg ${LIBS}"; AC_DEFINE(HasJPEG, 1, [Define if you have the jpeg library])],
-             AC_MSG_NOTICE([Compiling without support for jpeg files.]), [])
-AC_CHECK_LIB(png, png_init_io,
-             [LIBS="-lpng ${LIBS}"; AC_DEFINE(HasPNG, 1, [Define if you have the png library])],
-             AC_MSG_NOTICE([Compiling without support for png files.]), [])
-AC_CHECK_LIB(tiff, TIFFOpen,
-             [LIBS="-ltiff ${LIBS}"; AC_DEFINE(HasTIFF, 1, [Define if you have the tiff library])],
-             AC_MSG_ERROR([libtiff is required to compile Enblend.]), [])
-AC_CHECK_LIB(lcms, cmsCreateTransform,
+             [AC_MSG_NOTICE([Compiling without libz.])],[])
+AC_CHECK_LIB([jpeg],[jpeg_finish_compress],
+             [LIBS="-ljpeg ${LIBS}"
+              AC_DEFINE([HasJPEG],[1],
+                        [Define if you have the jpeg library])],
+             [AC_MSG_NOTICE([Compiling without support for jpeg files.])],
+             [])
+AC_CHECK_LIB([png],[png_init_io],
+             [LIBS="-lpng ${LIBS}"
+              AC_DEFINE([HasPNG],[1],
+                        [Define if you have the png library])],
+             [AC_MSG_NOTICE([Compiling without support for png files.])],
+             [])
+AC_CHECK_LIB([tiff],[TIFFOpen],
+             [LIBS="-ltiff ${LIBS}"
+              AC_DEFINE([HasTIFF],[1],
+                        [Define if you have the tiff library])],
+             [AC_MSG_ERROR([libtiff is required to compile Enblend.])],[])
+AC_CHECK_LIB([lcms],[cmsCreateTransform],
              [],
-             AC_MSG_ERROR([liblcms is required to compile Enblend.]), [])
-AC_CHECK_LIB(xmi, miNewPaintedSet,
+             [AC_MSG_ERROR([liblcms is required to compile Enblend.])],[])
+AC_CHECK_LIB([xmi],[miNewPaintedSet],
              [],
-             AC_MSG_ERROR([libxmi is required to compile Enblend.]), [])
+             [AC_MSG_ERROR([libxmi is required to compile Enblend.])],[])
 
 AC_MSG_CHECKING([if OpenEXR is wanted])
 AC_ARG_WITH([openexr],
@@ -45,65 +72,69 @@
                             [use OpenEXR @<:@default=check@:>@])],
             [],
             [with_openexr=check])
-AS_IF([test "x$with_openexr" = xNO \
-         -o "x$with_openexr" = xNo \
-         -o "x$with_openexr" = xno],
+AS_IF([test "x${with_openexr}" = "xNO" \
+         -o "x${with_openexr}" = "xNo" \
+         -o "x${with_openexr}" = "xno"],
       [AC_MSG_NOTICE([disabling OpenEXR])
-       have_exr=no],
-      [if test "x$with_openexr" = xyes \
-            -o "x$with_openexr" = "xYES" \
-            -o "x$with_openexr" = "xYes" \
-            -o "x$with_openexr" = "xcheck" \
-            -o "x$with_openexr" = "xCHECK" \
-            -o "x$with_openexr" = "xCheck"; then
-          AC_MSG_RESULT(yes)
-          PKG_CHECK_MODULES(OPENEXR, OpenEXR >= 1.0,
-                            [AC_DEFINE(HasEXR, 1, [Define if you have EXR library])
-                             have_exr=yes],
-                            [AC_MSG_WARN("OpenEXR support disabled: " $OPENEXR_PKG_ERRORS)
-                             have_exr=no])
-          LIBS="${OPENEXR_LIBS} $LIBS"
-          CFLAGS="${OPENEXR_CFLAGS} $CFLAGS"
-          CXXFLAGS="${OPENEXR_CFLAGS} $CXXFLAGS"
+       have_exr="no"],
+      [if test "x${with_openexr}" = "xyes" \
+            -o "x${with_openexr}" = "xYES" \
+            -o "x${with_openexr}" = "xYes" \
+            -o "x${with_openexr}" = "xcheck" \
+            -o "x${with_openexr}" = "xCHECK" \
+            -o "x${with_openexr}" = "xCheck"; then
+          AC_MSG_RESULT([yes])
+          PKG_CHECK_MODULES([OPENEXR],[OpenEXR >= 1.0],
+                            [AC_DEFINE([HasEXR],[1],
+                                       [Define if you have EXR library])
+                             have_exr="yes"],
+                            [AC_MSG_WARN(["OpenEXR support disabled: " ${OPENEXR_PKG_ERRORS}])
+                             have_exr="no"])
+          LIBS="${OPENEXR_LIBS} ${LIBS}"
+          CFLAGS="${OPENEXR_CFLAGS} ${CFLAGS}"
+          CXXFLAGS="${OPENEXR_CFLAGS} ${CXXFLAGS}"
        else
-          AC_MSG_RESULT(no)
-          have_exr=no
+          AC_MSG_RESULT([no])
+          have_exr="no"
        fi])
 
-if test "x$GXX" = xyes; then
+if test "x${GXX}" = "xyes"; then
     # Fixes SourceForge bug id 2121647 on some systems with newer GCCs.
-    CXXFLAGS="$CXXFLAGS --param inline-unit-growth=60"
+    CXXFLAGS="${CXXFLAGS} --param inline-unit-growth=60"
 fi
 
-AC_ARG_VAR(OPENGL_CFLAGS, [C compiler flags for OpenGL])
-AC_ARG_VAR(OPENGL_LIBS, [Linker flags and libraries for OpenGL])
+AC_ARG_VAR([OPENGL_CFLAGS],[C compiler flags for OpenGL])dnl
+AC_ARG_VAR([OPENGL_LIBS],[Linker flags and libraries for OpenGL])
 gpu_support_default="yes"
 AC_ARG_ENABLE([gpu-support],
-              AC_HELP_STRING([--enable-gpu-support],
-                             [GPU support for Enblend @<:@default=check@:>@]),
-              [gpu_support=$enableval],
-              [gpu_support=$gpu_support_default])
+              [AS_HELP_STRING([--enable-gpu-support],
+                              [GPU support for Enblend
+                               @<:@default=check@:>@])],
+              [gpu_support=${enableval}],
+              [gpu_support=${gpu_support_default}])dnl
 AC_ARG_WITH([apple-opengl-framework],
-            [AC_HELP_STRING([--with-apple-opengl-framework],
-                            [force usage of Apple OpenGL framework (Mac OS X only)])])
-can_use_gpu=no
-no_gpu_reason=
-if test "x$gpu_support" = "xyes" \
-     -o "x$gpu_support" = "xYES" \
-     -o "x$gpu_support" = "xYes"; then
-    missing_for_gpu=
-    if test "X$with_apple_opengl_framework" = "Xyes"; then
-      AC_DEFINE([HAVE_APPLE_OPENGL_FRAMEWORK], [1],
+            [AS_HELP_STRING([--with-apple-opengl-framework],
+                            [force usage of Apple OpenGL framework
+                             (Mac OS X only)])])
+can_use_gpu="no"
+no_gpu_reason=""
+if test "x${gpu_support}" = "xyes" \
+     -o "x${gpu_support}" = "xYES" \
+     -o "x${gpu_support}" = "xYes"; then
+    missing_for_gpu=""
+    if test "X${with_apple_opengl_framework}" = "Xyes"; then
+      AC_DEFINE([HAVE_APPLE_OPENGL_FRAMEWORK],[1],
                 [Use the Apple OpenGL framework.])
       GL_LIBS="-framework OpenGL -framework AGL"
-      GLUT_CFLAGS="$GLU_CFLAGS"
-      GLUT_LIBS="-framework GLUT -lobjc $GL_LIBS"
-      AC_SUBST([GL_CFLAGS])
-      AC_SUBST([GL_LIBS])
-      AC_SUBST([GLU_CFLAGS])
-      AC_SUBST([GLU_LIBS])
-      AC_SUBST([GLUT_CFLAGS])
-      AC_SUBST([GLUT_LIBS])
+      GLUT_CFLAGS="${GLU_CFLAGS}"
+      GLUT_LIBS="-framework GLUT -lobjc ${GL_LIBS}"
+      AC_SUBST([GL_CFLAGS])dnl
+      AC_SUBST([GL_LIBS])dnl
+      AC_SUBST([GLU_CFLAGS])dnl
+      AC_SUBST([GLU_LIBS])dnl
+      AC_SUBST([GLUT_CFLAGS])dnl
+      AC_SUBST([GLUT_LIBS])dnl
+      dnl# unset the inverse:
       no_gl=""
       no_glu=""
       no_glut=""
@@ -112,403 +143,435 @@
       AX_CHECK_GLU
       AX_CHECK_GLUT
     fi
-    if test "X$no_gl" = Xyes; then
-        missing_for_gpu="$missing_for_gpu GL"
+    if test "X${no_gl}" = "Xyes"; then
+        missing_for_gpu="${missing_for_gpu} GL"
         AC_MSG_WARN([[GL not found, disabling GPU mode]])
-    elif test "X$no_glu" = Xyes; then
-        missing_for_gpu="$missing_for_gpu GLU"
+    elif test "X${no_glu}" = "Xyes"; then
+        missing_for_gpu="${missing_for_gpu} GLU"
         AC_MSG_WARN([[GLU not found, disabling GPU mode]])
-    elif test "X$no_glut" = Xyes; then
-        missing_for_gpu="$missing_for_gpu GLUT"
+    elif test "X${no_glut}" = "Xyes"; then
+        missing_for_gpu="${missing_for_gpu} GLUT"
         AC_MSG_WARN([[GLUT not found, disabling GPU mode]])
     else
-        # GLUT_LIBS and GLU_LIBS include GL_LIBS implicitly
+        # GLUT_LIBS and GLU_LIBS include GL_LIBS implicitly:
         OPENGL_LIBS="${GLU_LIBS} ${GLUT_LIBS}"
         OPENGL_CFLAGS="${GL_CFLAGS}"
-        AC_CHECK_LIB(GLEW, glewInit,
-                     [can_use_gpu=yes
+        AC_CHECK_LIB([GLEW],[glewInit],
+                     [can_use_gpu="yes"
                       OPENGL_LIBS="-lGLEW ${OPENGL_LIBS}"
-                      AC_DEFINE(HAVE_LIBGLEW, 1, [Define if you have the GLEW library])],
-                     [missing_for_gpu="$missing_for_gpu GLEW"
+                      AC_DEFINE([HAVE_LIBGLEW],[1],
+                                [Define if you have the GLEW library])],
+                     [missing_for_gpu="${missing_for_gpu} GLEW"
                       AC_MSG_WARN([[GLEW not found, disabling GPU mode]])],
                      [])
     fi
-    if test $can_use_gpu = no; then
-        no_gpu_reason=", because of missing$missing_for_gpu"
+    if test "x${can_use_gpu}" = "xno"; then
+        no_gpu_reason=", because of missing${missing_for_gpu}"
     fi
 else
     no_gpu_reason=", because it was disabled"
 fi
 
+AX_PTHREAD
+
 # Memory allocation debug support
+dnl# use a custom check instead of AM_WITH_DMALLOC because we want to check
+dnl# more things:
 AC_MSG_CHECKING([if malloc debugging is wanted])
-AC_ARG_WITH(dmalloc,
-            [  --with-dmalloc          use dmalloc, as in
-                          http://www.dmalloc.com/dmalloc.tar.gz],
-            [if test "x$withval" = xyes; then
-                AC_MSG_RESULT(yes)
-                AC_DEFINE(WITH_DMALLOC, 1,
+AC_ARG_WITH([dmalloc],
+            [AS_HELP_STRING([--with-dmalloc],
+                            [use dmalloc, as in
+                             http://www.dmalloc.com/dmalloc.tar.gz])],
+            [if test "x${withval}" = "xyes"; then
+                AC_MSG_RESULT([yes])
+                AC_DEFINE([WITH_DMALLOC],[1],
                     [Define if using the dmalloc debugging malloc package])
-                if test x$acx_pthread_ok = xyes; then
-                    LIBS="$LIBS -ldmallocthcxx"
+                if test "x${ax_pthread_ok}" = "xyes"; then
+                    LIBS="${LIBS} -ldmallocthcxx"
                     enable_dmalloc="yes (thread aware)"
                 else
-                    LIBS="$LIBS -ldmalloccxx"
-                    enable_dmalloc=yes
+                    LIBS="${LIBS} -ldmalloccxx"
+                    enable_dmalloc="yes"
                 fi
-                LDFLAGS="$LDFLAGS -g"
-                AC_DEFINE(DMALLOC, 1,
+                LDFLAGS="${LDFLAGS} -g"
+                AC_DEFINE([DMALLOC],[1],
                           [Define to enable malloc debugger library])
-                AC_DEFINE(DMALLOC_FUNC_CHECK, 1,
-                          [Define to enable malloc debugger function checking])
+                AC_DEFINE([DMALLOC_FUNC_CHECK],[1],
+                          [Define to enable malloc debugger func checking])
             else
-                AC_MSG_RESULT(no)
-                enable_dmalloc=no
+                AC_MSG_RESULT([no])
+                enable_dmalloc="no"
             fi],
-            [AC_MSG_RESULT(no)
-             enable_dmalloc=no])
+            [AC_MSG_RESULT([no])
+             enable_dmalloc="no"])dnl
 
 # Checks for header files.
 AC_HEADER_DIRENT
-AC_HEADER_STDC
+AC_DEFUN([AC_REQUIRE_HEADER_STDC],[
+  AC_REQUIRE([AC_HEADER_STDC])dnl
+])dnl
+AC_REQUIRE_HEADER_STDC
 
 # The check for ext/slist fails on OSX, just remove it and declare that
-# it is available anyhow (Its part of the GNU stl implementation)
-#AC_CHECK_HEADER(ext/slist,
-#                AC_DEFINE(HAVE_EXT_SLIST, 1, Define if you have the <ext/slist> header file),
-#                AC_MSG_WARN([ext/slist is required to compile Enblend]))
-AC_DEFINE(HAVE_EXT_SLIST, 1, [Define if you have the <ext/slist> header file])
-
-AC_CHECK_HEADERS([fenv.h limits.h stdlib.h string.h unistd.h])
-
-AC_CHECK_HEADER(tiffio.h, [],
-                AC_MSG_ERROR([libtiff-devel header files are required to compile Enblend.]))
-AC_CHECK_HEADER(jpeglib.h, [],
-                AC_MSG_ERROR([libjpeg-devel header files are required to compile Enblend.]))
-AC_CHECK_HEADER(png.h, [],
-                AC_MSG_ERROR([libpng-devel header files are required to compile Enblend.]))
-
-AC_LANG_SAVE
-AC_LANG_CPLUSPLUS
-AC_CHECK_HEADER(boost/pool/pool.hpp, [],
-                AC_MSG_ERROR([Boost "pool" header file is required to compile Enblend.]))
-AC_CHECK_HEADER(boost/random/mersenne_twister.hpp, [],
-                AC_MSG_ERROR([Boost "mersenne_twister" header file is required to compile Enblend.]))
-AC_CHECK_HEADER(boost/scoped_ptr.hpp, [],
-                AC_MSG_ERROR([Boost "scoped_ptr" header file is required to compile Enblend.]))
-AC_CHECK_HEADER(boost/static_assert.hpp, [],
-                AC_MSG_ERROR([Boost "static_assert" header file is required to compile Enblend.]))
+# it is available anyhow (It is part of the GNU stl implementation)
+AC_DEFINE([HAVE_EXT_SLIST],[1],
+          [Define if you have the <ext/slist> header file])
+
+AC_CHECK_HEADERS([fenv.h limits.h malloc.h malloc/malloc.h stdio.h])dnl
+
+AC_CHECK_HEADER([tiffio.h],[],
+                [AC_MSG_ERROR([need libtiff headers to compile Enblend])
+])dnl
+AC_CHECK_HEADER([jpeglib.h],[],
+                [AC_MSG_ERROR([need libjpeg headers to compile Enblend])
+])dnl
+AC_CHECK_HEADER([png.h],[],
+                [AC_MSG_ERROR([need libpng headers to compile Enblend])
+])dnl
+
+AC_LANG_PUSH([C++])dnl
+AC_CHECK_HEADER([boost/pool/pool.hpp],[],
+                [AC_MSG_ERROR([need Boost "pool" header to build Enblend])
+])dnl
+AC_CHECK_HEADER([boost/random/mersenne_twister.hpp],[],
+    [AC_MSG_ERROR([need Boost "mersenne_twister" header to build Enblend])
+])dnl
+AC_CHECK_HEADER([boost/scoped_ptr.hpp],[],
+        [AC_MSG_ERROR([need Boost "scoped_ptr" header to build Enblend])
+])dnl
+AC_CHECK_HEADER([boost/static_assert.hpp],[],
+        [AC_MSG_ERROR([need Boost "static_assert" header to build Enblend])
+])dnl
 
 AC_ARG_WITH([boost-filesystem],
             [AS_HELP_STRING([--with-boost-filesystem],
-             [use Boost filesystem library @<:@default=check@:>@])],
+                            [use Boost filesystem library
+                             @<:@default=check@:>@])],
             [],
             [with_boost_filesystem=check])
-AS_IF([test "x$with_boost_filesystem" = xNO \
-         -o "x$with_boost_filesystem" = xNo \
-         -o "x$with_boost_filesystem" = xno],
+AS_IF([test "x${with_boost_filesystem}" = "xNO" \
+         -o "x${with_boost_filesystem}" = "xNo" \
+         -o "x${with_boost_filesystem}" = "xno"],
       [AC_MSG_NOTICE([disabling use of Boost "filesystem" library])],
-      [AS_IF([test "x$with_boost_filesystem" = xYES \
-                -o "x$with_boost_filesystem" = xYes \
-                -o "x$with_boost_filesystem" = xyes],
+      [AS_IF([test "x${with_boost_filesystem}" = "xYES" \
+                -o "x${with_boost_filesystem}" = "xYes" \
+                -o "x${with_boost_filesystem}" = "xyes"],
              [AC_MSG_NOTICE([forcing use of Boost "filesystem" library])
-              AC_DEFINE(HAVE_BOOST_FILESYSTEM, 1,
+              AC_DEFINE([HAVE_BOOST_FILESYSTEM],[1],
                         [Define if you have boost/filesystem.hpp])
-              EXTRA_LIBS="-lboost_filesystem ${EXTRA_LIBS}"],
-             [AC_CHECK_HEADER(boost/filesystem.hpp,
+              EXTRA_LIBS="-lboost_filesystem -lboost_system ${EXTRA_LIBS}"],
+             [AC_CHECK_HEADER([boost/filesystem.hpp],
                               [],
-                              AC_MSG_NOTICE([Boost "filesystem" header is missing.]))
-              if test x$ac_cv_header_boost_filesystem_hpp = xyes; then
-                  found_boost_filesystem_lib=no
+                              [AC_MSG_NOTICE([Boost "filesystem" header is missing])
+              ])
+              if test "x${ac_cv_header_boost_filesystem_hpp}" = "xyes"; then
+                  found_boost_filesystem_lib="no"
                   candidates="-lboost_filesystem"
-                  if test x$acx_pthread_ok = xyes; then
-                      candidates="-lboost_filesystem-mt $candidates"
+                  if test "x${ax_pthread_ok}" = "xyes"; then
+                      candidates="-lboost_filesystem-mt ${candidates}"
                   fi
-                  if test "x$with_boost_filesystem" != xCHECK \
-                       -a "x$with_boost_filesystem" != xCheck \
-                       -a "x$with_boost_filesystem" != xcheck; then
-                      candidates="$with_boost_filesystem $candidates"
+                  if test "x${with_boost_filesystem}" != "xCHECK" \
+                       -a "x${with_boost_filesystem}" != "xCheck" \
+                       -a "x${with_boost_filesystem}" != "xcheck"; then
+                      candidates="${with_boost_filesystem} ${candidates}"
                   fi
-                  LIBS_ORIG=$LIBS
-                  for x in $candidates; do
-                      LIBS="$LIBS_ORIG $x"
+                  LIBS_ORIG="${LIBS}"
+                  for x in ${candidates}; do
+                      y=`echo ${x} | sed s/boost_filesystem/boost_system/g`
+                      LIBS="${LIBS_ORIG} ${x} ${y}"
                       AC_LINK_IFELSE([AC_LANG_PROGRAM([[
 #include <string>
 #include "boost/filesystem.hpp"
 ]],
 [[
-boost::filesystem::basic_path<std::string, boost::filesystem::path_traits> p("foo/bar/baz.oo");
+boost::filesystem::path p("foo/bar/baz.oo");
 p.branch_path().string();
 p.leaf();
 basename(p);
 extension(p);
-]]
-)],
-                                     [EXTRA_LIBS="$x ${EXTRA_LIBS}"
-                                      found_boost_filesystem_lib=yes
+]])],
+                                     [EXTRA_LIBS="${x} ${y} ${EXTRA_LIBS}"
+                                      found_boost_filesystem_lib="yes"
                                       AC_MSG_NOTICE([compiling with Boost's generic filename parsing support.])
                                       break])
                   done
-                  LIBS=$LIBS_ORIG
+                  LIBS="${LIBS_ORIG}"
               fi
-              if test x$ac_cv_header_boost_filesystem_hpp = xyes \
-                   -a x$found_boost_filesystem_lib = xyes; then
-                  AC_DEFINE(HAVE_BOOST_FILESYSTEM, 1,
+              if test "x${ac_cv_header_boost_filesystem_hpp}" = "xyes" \
+                   -a "x${found_boost_filesystem_lib}" = "xyes"; then
+                  AC_DEFINE([HAVE_BOOST_FILESYSTEM],[1],
                             [Define if you have boost/filesystem.hpp])
               else
-                  AC_MSG_NOTICE([Boost "filesystem" header or library not found.  Using built-in support.])
+                  AC_MSG_NOTICE([Boost "filesystem" header or library not found. Using built-in support.])
               fi
-             ] ) dnl AS_IF($with_boost_filesystem = yes)
-      ] ) dnl  AS_IF($with_boost_filesystem = no)
+             ]) dnl# end AS_IF(["x${with_boost_filesystem}" = "xyes"])
+      ]) dnl# end AS_IF(["x${with_boost_filesystem}" = "xno"])
 
-AC_LANG_RESTORE
-AC_SUBST(EXTRA_LIBS)
+AC_LANG_POP
+AC_SUBST([EXTRA_LIBS])dnl
 
-AC_CHECK_HEADER(lcms.h, [],
-                AC_MSG_ERROR([lcms header files are required to compile Enblend.]))
-AC_CHECK_HEADER(xmi.h, [],
-                AC_MSG_ERROR([xmi header files are required to compile Enblend.]))
+AC_CHECK_HEADER([lcms.h],[],
+                [AC_MSG_ERROR([lcms headers are needed to compile Enblend])
+])dnl
+AC_CHECK_HEADER([xmi.h],[],
+                [AC_MSG_ERROR([xmi headers are needed to compile Enblend])
+])dnl
 
 # Checks for typedefs, structures, and compiler characteristics.
-AC_HEADER_STDBOOL
+AC_HEADER_STDBOOL dnl# also "_CHECK"s it
 AC_C_CONST
 AC_C_INLINE
+AC_C_PROTOTYPES
 
 AC_TYPE_OFF_T
-AC_TYPE_SIGNAL
+dnl# begin what used to be AC\_TYPE\_SIGNAL:
+AC_CACHE_CHECK([return type of signal handlers],[ac_cv_type_signal],[AC_COMPILE_IFELSE([AC_LANG_PROGRAM([[
+#include <sys/types.h>
+#include <signal.h>
+]],[[return *(signal (0, 0)) (0) == 1;]])],
+		   [ac_cv_type_signal=int],
+		   [ac_cv_type_signal=void])])dnl
+AC_DEFINE_UNQUOTED([RETSIGTYPE],[${ac_cv_type_signal}],
+                   [Define as the return type of signal handlers
+		    (`int' or `void').])dnl
+dnl# end what used to be AC\_TYPE\_SIGNAL
+
 AC_TYPE_SIZE_T
 
-AC_CHECK_TYPES([ptrdiff_t])
+AC_CHECK_TYPES([ptrdiff_t])dnl
 
 # Checks for library functions.
+AC_FUNC_ALLOCA
 AC_FUNC_CLOSEDIR_VOID
 AC_FUNC_FSEEKO
-# AC_FUNC_MALLOC         dnl unused and harmful when cross compiling
+if test "x" = "Y0"; then
+  dnl# the above check makes sure that this will never be executed
+  dnl# it should never be executed because it is unused and harmful
+  dnl# when cross compiling
+  dnl# however, keeping it uncommented keeps autoscan happy
+  AC_FUNC_MALLOC
+fi
+m4_ifdef([AC_FUNC_SETVBUF_REVERSED],[
 AC_FUNC_SETVBUF_REVERSED
+],[
+AC_CHECK_FUNCS([setvbuf])dnl
+])dnl
 AC_FUNC_STRERROR_R
 AC_FUNC_STRTOD
 
-AC_CHECK_FUNCS([fesetround floor \
+AC_CHECK_FUNCS([atexit \
+                fesetround floor \
                 memset mkstemp \
-                pow \
-                sqrt strchr strcspn strdup strerror strrchr strtol strtoul])
+                pow sqrt \
+                strchr strcspn strdup strerror strrchr strtol strtoul])dnl
 
-# lrint and lrintf
+# lrint and lrintf:
 AC_C99_FUNC_LRINT
 AC_C99_FUNC_LRINTF
 
-AX_WITH_PROG(PERL, perl, false, [])
-if test "x$PERL" = xfalse; then
-    AC_MSG_ERROR(cannot find perl)
-fi
-AX_PROG_PERL_MODULES(Sys::Hostname, [],
-                     AC_MSG_ERROR(missing Perl module Sys::Hostname))
-AX_PROG_PERL_MODULES(Time::Zone, [],
-                     AC_MSG_WARN(missing Perl module Time::Zone))
-
-# Documentation
-if test $cross_compiling = no; then
-    AM_MISSING_PROG(HELP2MAN, help2man)
+AX_WITH_PROG([PERL],[perl],[false],[])
+if test "x${PERL}" = "xfalse"; then
+    AC_MSG_ERROR([cannot find perl])
+fi
+AX_PROG_PERL_MODULES([Sys::Hostname],[],
+                     [AC_MSG_ERROR([missing Perl module Sys::Hostname])])
+AX_PROG_PERL_MODULES([Time::Zone],[],
+                     [AC_MSG_WARN([missing Perl module Time::Zone])])
+
+# Documentation:
+if test "x${cross_compiling}" = "xno"; then
+    AM_MISSING_PROG([HELP2MAN],[help2man])
 else
     HELP2MAN=:
 fi
 
-can_build_doc=yes
-AX_PROG_PERL_MODULES(File::Basename, [],
-                     [AC_MSG_WARN(missing Perl module File::Basename)
-                      can_build_doc=no
-                      missing_for_doc="$missing_for_doc File::Basename"])
-AX_PROG_PERL_MODULES(IO::File, [],
-                     [AC_MSG_WARN(missing Perl module IO::File)
-                      can_build_doc=no
-                      missing_for_doc="$missing_for_doc IO::File"])
-AX_PROG_PERL_MODULES(IO::Handle, [],
-                     [AC_MSG_WARN(missing Perl module IO::Handle)
-                      can_build_doc=no
-                      missing_for_doc="$missing_for_doc IO::Handle"])
-
-AX_WITH_PROG(GNUPLOT, gnuplot, false, [])
-if test "x$GNUPLOT" = xfalse; then
-    AC_MSG_WARN(cannot find gnuplot; will not be able to build documentation)
-    can_build_doc=no
-    missing_for_doc="$missing_for_doc gnuplot"
+can_build_doc="yes"
+AX_PROG_PERL_MODULES([File::Basename],[],
+                     [AC_MSG_WARN([missing Perl module File::Basename])
+                      can_build_doc="no"
+                      missing_for_doc="${missing_for_doc} File::Basename"])
+AX_PROG_PERL_MODULES([IO::File],[],
+                     [AC_MSG_WARN([missing Perl module IO::File])
+                      can_build_doc="no"
+                      missing_for_doc="${missing_for_doc} IO::File"])
+AX_PROG_PERL_MODULES([IO::Handle],[],
+                     [AC_MSG_WARN([missing Perl module IO::Handle])
+                      can_build_doc="no"
+                      missing_for_doc="${missing_for_doc} IO::Handle"])
+
+AX_WITH_PROG([GNUPLOT],[gnuplot],[false],[])
+if test "x${GNUPLOT}" = "xfalse"; then
+    AC_MSG_WARN([cannot find gnuplot; will not be able to build docs])
+    can_build_doc="no"
+    missing_for_doc="${missing_for_doc} gnuplot"
 fi
 
 AC_ARG_WITH([ttf-path],
-            AC_HELP_STRING([--with-ttf-path=<PATH>],
-                           [set path to TrueType fonts]),
-            [GDFONTPATH="$withval"],
-            [GDFONTPATH="/opt/local/share/fonts/freefont-ttf:/sw/share/fonts/freefont-ttf:/usr/X11/lib/X11/fonts/TTF:/usr/X11R6/lib/X11/fonts/TTF:/usr/share/fonts/truetype/freefont"])
-AC_ARG_VAR(GDFONTPATH, [path to TrueType fonts])
-have_freesans_font=no
-orig_ifs="$IFS"
+            [AS_HELP_STRING([--with-ttf-path=<PATH>],
+                            [set path to TrueType fonts])],
+            [GDFONTPATH="${withval}"],
+            [GDFONTPATH="/opt/local/share/fonts/freefont-ttf:/sw/share/fonts/freefont-ttf:/usr/X11/lib/X11/fonts/TTF:/usr/X11R6/lib/X11/fonts/TTF:/usr/share/fonts/truetype/freefont"])dnl
+AC_ARG_VAR([GDFONTPATH],[path to TrueType fonts])
+have_freesans_font="no"
+orig_ifs="${IFS}"
 IFS=':'
-for dir in $GDFONTPATH; do \
-    if test -f "$dir/FreeSans.ttf"; then \
-        have_freesans_font=yes; \
+for dir in ${GDFONTPATH}; do \
+    if test -f "${dir}/FreeSans.ttf"; then \
+        have_freesans_font="yes"; \
         break; \
     fi; \
 done
-IFS="$orig_ifs"
-if test $have_freesans_font != yes; then
-    AC_MSG_WARN(cannot find font "FreeSans.ttf" anywhere in GDFONTPATH; text in the documentation's figures could look strange)
-fi
-
-AC_CHECK_PROG(FIG2DEV,
-              fig2dev,
-              fig2dev,
-              false)
-if test "x$FIG2DEV" = xfalse; then
-    AC_MSG_WARN(cannot find fig2dev; will not be able to build documentation)
-    can_build_doc=no
-    missing_for_doc="$missing_for_doc fig2dev"
+IFS="${orig_ifs}"
+if test "x${have_freesans_font}" != "xyes"; then
+    AC_MSG_WARN([cannot find font "FreeSans.ttf" anywhere in GDFONTPATH; text in the documentation's figures could look strange])
+fi
+
+AC_CHECK_PROG([FIG2DEV],[fig2dev],[fig2dev],[false])
+if test "x${FIG2DEV}" = "xfalse"; then
+    AC_MSG_WARN([cannot find fig2dev; will not be able to build docs])
+    can_build_doc="no"
+    missing_for_doc="${missing_for_doc} fig2dev"
+fi
+
+AC_DEFUN([AC_REQUIRE_PROG_SED],[
+  AC_REQUIRE([AC_PROG_SED])dnl
+])dnl
+AC_REQUIRE_PROG_SED
+
+# These variables are mentioned in the AutoMake documentation as being
+# influential to the documentation build process:
+AC_CHECK_PROG([MAKEINFO],[makeinfo],[makeinfo],[false])
+if test "x${MAKEINFO}" = "xfalse"; then
+    AC_MSG_WARN([cannot find makeinfo; will not be able to build docs])
+    can_build_doc="no"
+    missing_for_doc="${missing_for_doc} makeinfo"
+fi
+
+AC_CHECK_PROG([MYTEXI2DVI],[texi2dvi],[texi2dvi],[false])
+if test "x${TEXI2DVI}" = "xfalse"; then
+  AC_MSG_NOTICE([cannot find texi2dvi; might not be able to build docs])
+  missing_for_doc="${missing_for_doc} texi2dvi"
 fi
 
-AC_PROG_SED
+AC_CHECK_PROG([MYTEXI2PDF],[texi2pdf],[texi2pdf],[false])
+if test "x${MYTEXI2PDF}" = "xfalse"; then
+  AC_MSG_NOTICE([cannot find texi2pdf; might not be able to build docs])
+  missing_for_doc="${missing_for_doc} texi2pdf"
+fi
 
-# These variables are mentioned in the AutoMake documentation as being
-# influential to the documentation build process.
-AC_CHECK_PROG(MAKEINFO,
-              makeinfo,
-              makeinfo,
-              false)
-if test "x$MAKEINFO" = xfalse; then
-    AC_MSG_WARN(cannot find makeinfo; will not be able to build documentation)
-    can_build_doc=no
-    missing_for_doc="$missing_for_doc makeinfo"
-fi
-
-dnl AC_CHECK_PROG(TEXI2DVI,
-dnl               texi2dvi,
-dnl               texi2dvi,
-dnl               false)
-dnl if test "x$TEXI2DVI" = xfalse; then
-dnl   AC_MSG_WARN(cannot find texi2dvi; will not be able to build documentation)
-dnl   can_build_doc=no
-dnl   missing_for_doc="$missing_for_doc texi2dvi"
-dnl fi
-
-dnl AC_CHECK_PROG(TEXI2PDF,
-dnl               texi2pdf,
-dnl               texi2pdf,
-dnl               false)
-dnl if test "x$TEXI2PDF" = xfalse; then
-dnl   AC_MSG_WARN(cannot find texi2pdf; will not be able to build documentation)
-dnl   can_build_doc=no
-dnl   missing_for_doc="$missing_for_doc texi2pdf"
-dnl fi
-
-dnl AC_CHECK_PROG(DVIPS,
-dnl               dvips,
-dnl               dvips,
-dnl               false)
-dnl if test "x$DVIPS" = xfalse; then
-dnl   AC_MSG_WARN(cannot find dvips; will not be able to build documentation)
-dnl   can_build_doc=no
-dnl   missing_for_doc="$missing_for_doc dvips"
-dnl fi
-
-AC_CHECK_PROG(TIDY,
-              tidy,
-              tidy,
-              false)
-if test "x$TIDY" = xfalse; then
-    AC_MSG_WARN(cannot find tidy; will not be able to build XHTML documentation)
-    can_build_doc=no
-    missing_for_doc="$missing_for_doc tidy"
-fi
-
-AM_CONDITIONAL([BUILD_DOC], [test $can_build_doc = yes])
-if test $can_build_doc = no; then
-    no_doc_reason=", because of missing$missing_for_doc"
+AC_CHECK_PROG([MYDVIPS],[dvips],[dvips],[false])
+if test "x${MYDVIPS}" = "xfalse"; then
+  AC_MSG_NOTICE([cannot find dvips; might not be able to build docs])
+  missing_for_doc="${missing_for_doc} dvips"
+fi
+
+AC_CHECK_PROG([TIDY],[tidy],[tidy],[false])
+if test "x${TIDY}" = "xfalse"; then
+    AC_MSG_WARN([cannot find tidy; will not be able to build XHTML docs])
+    can_build_doc="no"
+    missing_for_doc="${missing_for_doc} tidy"
+fi
+
+AM_CONDITIONAL([BUILD_DOC],[test "x${can_build_doc}" = "xyes"])
+if test "x${can_build_doc}" = "xno"; then
+    no_doc_reason=", because of missing${missing_for_doc}"
 fi
 
 AC_MSG_CHECKING([checking whether split documentation files])
 split_doc_default="yes"
 AC_ARG_ENABLE([split-doc],
-              AC_HELP_STRING([--enable-split-doc],
-                             [split documentation @<:@default=yes@:>@]),
-              [split_doc=$enableval],
-              [split_doc=$split_doc_default])
-if test "x$split_doc" = "xyes" \
-     -o "x$split_doc" = "xYES" \
-     -o "x$split_doc" = "xYes"; then
-    AM_MAKEINFOFLAGS="$AM_MAKEINFOFLAGS"
-    AC_MSG_RESULT(yes)
-    split_doc=yes
+              [AS_HELP_STRING([--enable-split-doc],
+                              [split documentation @<:@default=yes@:>@])],
+              [split_doc=${enableval}],
+              [split_doc=${split_doc_default}])
+if test "x${split_doc}" = "xyes" \
+     -o "x${split_doc}" = "xYES" \
+     -o "x${split_doc}" = "xYes"; then
+    AM_MAKEINFOFLAGS="${AM_MAKEINFOFLAGS}"
+    AC_MSG_RESULT([yes])
+    split_doc="yes"
 else
-    AM_MAKEINFOFLAGS="$AM_MAKEINFOFLAGS --no-split --no-headers"
-    AC_MSG_RESULT(no)
-    split_doc=no
+    AM_MAKEINFOFLAGS="${AM_MAKEINFOFLAGS} --no-split --no-headers"
+    AC_MSG_RESULT([no])
+    split_doc="no"
 fi
-AC_SUBST(AM_MAKEINFOFLAGS)
+AC_SUBST([AM_MAKEINFOFLAGS])dnl
 
-# use a static vigra impex library
+# use a static vigra impex library:
 CXXFLAGS="-DVIGRA_STATIC_LIB ${CXXFLAGS}"
 
-AC_MSG_CHECKING(whether to enable debugging)
+AC_MSG_CHECKING([whether to enable debugging])
 debug_default="no"
-AC_ARG_ENABLE(debug,
-              AC_HELP_STRING([--enable-debug],
-                             [turn on debugging @<:@default=no@:>@]),
-              [enable_debug=$enableval],
-              [enable_debug=$debug_default])
-if test "x$enable_debug" = "xyes" \
-     -o "x$enable_debug" = "xYES" \
-     -o "x$enable_debug" = "xYes"; then
-    CXXFLAGS="$CXXFLAGS -g -DDEBUG -Wall"
-    AC_MSG_RESULT(yes)
-    enable_debug=yes
+AC_ARG_ENABLE([debug],
+              [AS_HELP_STRING([--enable-debug],
+                              [turn on debugging @<:@default=no@:>@])],
+              [enable_debug=${enableval}],
+              [enable_debug=${debug_default}])
+if test "x${enable_debug}" = "xyes" \
+     -o "x${enable_debug}" = "xYES" \
+     -o "x${enable_debug}" = "xYes"; then
+    AC_CHECK_PROGS([GDB],[gdb ggdb gdb-apple],[])
+    if test "x${GDB}" != "x"; then
+        test -n "${GDB}"
+        CXXFLAGS="${CXXFLAGS} -ggdb -DDEBUG -Wall"
+    else
+        test -z "${GDB}"
+        CXXFLAGS="${CXXFLAGS} -g -DDEBUG -Wall"
+    fi
+    AC_MSG_RESULT([yes])
+    enable_debug="yes"
 else
-    CXXFLAGS="$CXXFLAGS -O2 -DNDEBUG -Wall"
-    AC_MSG_RESULT(no)
-    enable_debug=no
+    CXXFLAGS="${CXXFLAGS} -O2 -DNDEBUG -Wall"
+    AC_MSG_RESULT([no])
+    enable_debug="no"
 fi
 
-AC_MSG_CHECKING(whether to enable image cache)
+AC_MSG_CHECKING([whether to enable image cache])
 image_cache_default="yes"
-AC_ARG_ENABLE(image_cache,
-              AC_HELP_STRING([--enable-image-cache],
-                             [allow for processing of large images @<:@default=yes@:>@]),
-              [enable_image_cache=$enableval],
-              [enable_image_cache=$image_cache_default])
-if test "x$enable_image_cache" = "xyes" \
-     -o "x$enable_image_cache" = "xYES" \
-     -o "x$enable_image_cache" = "xYes"; then
-    AC_DEFINE(CACHE_IMAGES, 1,
-              [Define if you want to compile Enblend and Enfuse with image cache])
-    AC_MSG_RESULT(yes)
-    enable_image_cache=yes
+AC_ARG_ENABLE([image_cache],
+              [AS_HELP_STRING([--enable-image-cache],
+                              [allow for processing of large images
+                               @<:@default=yes@:>@])],
+              [enable_image_cache=${enableval}],
+              [enable_image_cache=${image_cache_default}])
+if test "x${enable_image_cache}" = "xyes" \
+     -o "x${enable_image_cache}" = "xYES" \
+     -o "x${enable_image_cache}" = "xYes"; then
+    AC_DEFINE([CACHE_IMAGES],[1],
+              [Define to compile Enblend/Enfuse with image cache])
+    AC_MSG_RESULT([yes])
+    enable_image_cache="yes"
+    AC_SYS_LARGEFILE
 else
-    AC_MSG_RESULT(no)
-    enable_image_cache=no
+    AC_MSG_RESULT([no])
+    enable_image_cache="no"
 fi
 
-AC_MSG_CHECKING(whether to compile with OpenMP)
+AC_MSG_CHECKING([whether to compile with OpenMP])
 openmp_default="no"
-AC_ARG_ENABLE(openmp,
-              AC_HELP_STRING([--enable-openmp],
-                             [compile with OpenMP @<:@default=no@:>@]),
-              [enable_openmp=$enableval],
-              [enable_openmp=$openmp_default])
-if test "x$enable_openmp" = "xyes" \
-     -o "x$enable_openmp" = "xYES" \
-     -o "x$enable_openmp" = "xYes"; then
-    AC_MSG_RESULT(yes)
+AC_ARG_ENABLE([openmp],
+              [AS_HELP_STRING([--enable-openmp],
+                              [compile with OpenMP @<:@default=no@:>@])],
+              [enable_openmp=${enableval}],
+              [enable_openmp=${openmp_default}])
+if test "x${enable_openmp}" = "xyes" \
+     -o "x${enable_openmp}" = "xYES" \
+     -o "x${enable_openmp}" = "xYes"; then
+    AC_MSG_RESULT([yes])
     AX_OPENMP([enable_openmp=yes])
-    CFLAGS="$CFLAGS $OPENMP_CFLAGS"
-    CXXFLAGS="$CXXFLAGS $OPENMP_CXXFLAGS"
+    CFLAGS="${CFLAGS} ${OPENMP_CFLAGS}"
+    CXXFLAGS="${CXXFLAGS} ${OPENMP_CXXFLAGS}"
 fi
-if test -z "$OPENMP_CXXFLAGS"; then
-    AC_MSG_RESULT(no)
-    enable_openmp=no
+if test -z "${OPENMP_CXXFLAGS}"; then
+    AC_MSG_RESULT([no])
+    enable_openmp="no"
 else
-    if test $enable_image_cache = yes; then
+    if test "x${enable_image_cache}" = "xyes"; then
         AC_MSG_WARN([[image cache and OpenMP support are mutually exclusive]])
         AC_MSG_WARN([[only configure like this if you want to develop a reentrant image cache]])
-        warnings=`echo -e "$warnings\n WARNING: Image cache and OpenMP are both enabled!  You are a developer, aren't you?"`
+        warnings=`echo -e "${warnings}\n WARNING: Image cache and OpenMP are both enabled! You are a developer, are you not?"`
     fi
-    enable_openmp=yes
+    enable_openmp="yes"
 fi
 
 AC_CONFIG_FILES([doc/entropy.gp
@@ -516,7 +579,7 @@
                  doc/gaussian.gp
                  doc/laplacian-of-gaussian.gp
                  doc/sharp-edge.gp
-                 doc/smooth-edge.gp])
+                 doc/smooth-edge.gp])dnl
 
 AC_CONFIG_FILES([Makefile
                  include/Makefile
@@ -525,7 +588,7 @@
                  src/Makefile
                  src/vigra_impex/Makefile
                  src/win32helpers/Makefile
-                 doc/Makefile])
+                 doc/Makefile])dnl
 AC_OUTPUT
 
 # AC_OUTPUT has created "config.h"
@@ -556,4 +619,5 @@
    use image cache:                ${enable_image_cache}
    build GPU acceleration:         ${can_use_gpu}${no_gpu_reason}
    use OpenMP:                     ${enable_openmp}
-${warnings}])
+${warnings}
+])dnl
