--- operations/external/ff-load.c.orig	2013-10-15 16:40:50.000000000 -0700
+++ operations/external/ff-load.c	2013-10-15 16:41:16.000000000 -0700
@@ -271,7 +271,7 @@
       gint err;
 
       ff_cleanup (o);
-      err = av_open_input_file (&p->ic, o->path, NULL, 0, NULL);
+      err = avformat_open_input (&p->ic, o->path, NULL, NULL);
       if (err < 0)
         {
           print_error (o->path, err);
@@ -312,7 +312,7 @@
       if (p->codec->capabilities & CODEC_CAP_TRUNCATED)
         p->enc->flags |= CODEC_FLAG_TRUNCATED;
 
-      if (avcodec_open (p->enc, p->codec) < 0)
+      if (avcodec_open2 (p->enc, p->codec, NULL) < 0)
         {
           g_warning ("error opening codec %s", p->enc->codec->name);
           return;
--- operations/workshop/external/ff-save.c.orig	2013-10-15 16:41:03.000000000 -0700
+++ operations/workshop/external/ff-save.c	2013-10-15 16:41:16.000000000 -0700
@@ -568,7 +568,7 @@
     }
 
   /* open the codec */
-  if (avcodec_open (c, codec) < 0)
+  if (avcodec_open2 (c, codec, NULL) < 0)
     {
       fprintf (stderr, "could not open codec\n");
       exit (1);
@@ -769,26 +769,24 @@
      /*XXX: FOO p->audio_st = add_audio_stream (op, p->oc, p->fmt->audio_codec);*/
     }
 
-  if (av_set_parameters (p->oc, NULL) < 0)
-    {
-      fprintf (stderr, "Invalid output format propeters\n%s", "");
-      return -1;
-    }
-
-  dump_format (p->oc, 0, self->path, 1);
+  av_dump_format (p->oc, 0, self->path, 1);
 
   if (p->video_st)
     open_video (p, p->oc, p->video_st);
   if (p->audio_st)
     open_audio (p, p->oc, p->audio_st);
 
-  if (url_fopen (&p->oc->pb, self->path, URL_WRONLY) < 0)
+  if (avio_open (&p->oc->pb, self->path, AVIO_FLAG_WRITE) < 0)
     {
       fprintf (stderr, "couldn't open '%s'\n", self->path);
       return -1;
     }
 
-  av_write_header (p->oc);
+  if (avformat_write_header (p->oc, NULL) < 0)
+     {
+        fprintf(stderr, "Error occurred when opening output file\n");
+        return 1;
+     }
 
   return 0;
 }
@@ -858,7 +856,7 @@
             av_freep (&p->oc->streams[i]);
           }
 
-        url_fclose (&p->oc->pb);
+        avio_close (p->oc->pb);
         free (p->oc);
       }
       g_free (o->chant_data);
