# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 111495 2013-09-24 00:32:48Z devans@macports.org $

PortSystem      1.0
PortGroup       muniversal 1.0
PortGroup       compiler_blacklist_versions 1.0

name            gegl
version         0.2.0
revision        14
license         {GPL-3+ LGPL-3+}
set branch      [join [lrange [split ${version} .] 0 1] .]
categories      graphics
maintainers     devans openmaintainer
platforms       darwin
homepage        http://${name}.org/
master_sites    gimp:${name}/${branch}/

use_bzip2       yes

description     GEGL is a graph-based image processing framework.

long_description \
    GEGL is a graph-based image processing framework offering image \
    processing and compositing on large images. GEGL is suitable for \
    projects ranging from small one-off projects to interactive \
    applications.

checksums       sha1    764cc66cb3c7b261b8fc18a6268a0e264a91d573 \
                rmd160  cc10365cff27dd42b002bf305f82de54d8c158fa \
                sha256  df2e6a0d9499afcbc4f9029c18d9d1e0dd5e8710a75e17c9b1d9a6480dd8d426

depends_build-append \
                port:pkgconfig \
                port:intltool \
                port:w3m \
                bin:perl:perl5 \
                bin:ruby:ruby_select

depends_lib-append \
                port:babl \
                port:gtk2 \
                port:gobject-introspection \
                port:jpeg \
                port:lua \
                port:openexr \
                port:exiv2 \
                port:libopenraw \
                port:librsvg \
                path:lib/pkgconfig/sdl.pc:libsdl \
                path:lib/libavcodec.dylib:ffmpeg \
                port:libspiro \
                port:lensfun \
                port:fontconfig \
                port:freetype \
                port:gdk-pixbuf2 \
                port:gettext \
                port:ilmbase \
                port:jasper \
                port:libiconv \
                port:libpng \
                port:zlib \
                port:harfbuzz \
                port:libtool \
                port:xorg-libX11 \
                port:xorg-libXau \
                port:xorg-libXdmcp \
                port:xorg-libXext \
                port:xorg-libXrandr \
                port:xorg-libxcb \
                port:xrender \
                path:lib/pkgconfig/glib-2.0.pc:glib2 \
                path:lib/pkgconfig/cairo.pc:cairo \
                path:lib/pkgconfig/pango.pc:pango \
                path:lib/pkgconfig/pixman-1.pc:libpixman

pre-fetch {
    ui_debug "'branch' evaluates to '${branch}'"
}

#FIXME: make some of these patches easier to re-generate.
# Right now, the order in which the patches are applied matters!
# patch-fix-introspection has to be applied first, as it creates a bunch
# of the files originally. Thus, if you want to patch something that it
# also patches, give the backup file a different suffix, and apply the
# patch after patch-fix-introspection has been applied.
patchfiles-append \
                patch-fix-introspection.diff \
                patch-configure.diff \
                patch-configure.ac.diff \
                patch-rename-for-altivec.diff \
                patch-ffmpeg.diff \
                patch-examples-Makefile.am.diff \
                patch-Makefile.am.diff

# appending '--backup' to 'patch.args' makes muniversal fail, apparently,
# so only do it when building non-universal (below)...
post-patch {
    # http://trac.macports.org/ticket/35148
    if {${os.major} < 10} {
        reinplace "s|OpenGL/CGLDevice.h|OpenGL/CGLTypes.h|" ${worksrcpath}/gegl/opencl/cl_gl.h
    }
    reinplace "s|--quiet|--verbose|g" ${worksrcpath}/operations/Makefile-operations.am
    # need to run aclocal separately from autoreconfing, so that autoupdate
    # will work properly:
    ui_debug "running '${prefix}/bin/aclocal -I m4 --install' in ${worksrcpath}"
    system -W ${worksrcpath} "${prefix}/bin/aclocal -I m4 --install"
    # these files that we autoupdate exist anyways:
    ui_debug "${prefix}/bin/autoupdate ${worksrcpath}/m4/gegl-variadic-macros.m4"
    system -W ${worksrcpath} "${prefix}/bin/autoupdate m4/gegl-variadic-macros.m4"
    ui_debug "${prefix}/bin/autoupdate ${worksrcpath}/m4/as-compiler-flag.m4"
    system -W ${worksrcpath} "${prefix}/bin/autoupdate m4/as-compiler-flag.m4"
    ui_debug "${prefix}/bin/autoupdate ${worksrcpath}/aclocal.m4"
    system -W ${worksrcpath} "${prefix}/bin/autoupdate aclocal.m4"
    # these files that we autoupdate get installed by the '--install' flag
    # to 'aclocal' used above:
    ui_debug "${prefix}/bin/autoupdate ${worksrcpath}/m4/glib-2.0.m4"
    system -W ${worksrcpath} "${prefix}/bin/autoupdate m4/glib-2.0.m4"
    ui_debug "${prefix}/bin/autoupdate ${worksrcpath}/m4/glib-gettext.m4"
    system -W ${worksrcpath} "${prefix}/bin/autoupdate m4/glib-gettext.m4"
}

use_autoreconf  yes
autoreconf.args -fvi

configure.args-append \
                --disable-docs \
                --disable-silent-rules \
                --disable-maintainer-mode \
                --enable-introspection=yes \
                --without-graphviz \
                --without-vala \
                --without-umfpack \
                --disable-workshop \
                --disable-glibtest \
                --disable-gtk-doc \
                --enable-static \
                --enable-shared \
                --enable-largefile

configure.env-append \
                EXIV2_CXXFLAGS='-I${prefix}/include' \
                INTLLIBS='-lintl -liconv ' \
                JASPER_CFLAGS='-I${prefix}/include' \
                LIBM='-lm'

if {![variant_isset debug]} {
    configure.cflags-append \
                -Wno-deprecated-declarations \
                -Wno-implicit-function-declaration
    # different names for the same thing:
    if {[string match *clang* ${configure.compiler}]} {
        configure.cflags-append \
                -Wno-ignored-attributes
    } elseif {[string match *gcc* ${configure.compiler}]} {
        configure.cflags-append \
                -Wno-attributes
    }
}

# gobject-introspection uses g-ir-scanner, which uses $CC from env
# btw I hate gobject-introspection

if {[variant_isset universal]} {
    depends_lib-delete      port:gobject-introspection
    configure.args-replace  --enable-introspection=yes --disable-introspection
} else {
    build.args-append       CC="${configure.cc} ${configure.cc_archflags}"
    build.env-append        CC="${configure.cc} ${configure.cc_archflags}"
}

# disable parallel build, see #31498
use_parallel_build no

compiler.blacklist-append macports-clang-2.9 macports-clang-3.0 gcc-3.3 *gcc-4.0

platform darwin {
    if {${os.major} == 10} {
        compiler.blacklist-append *gcc-4.2 {clang < 421}
        configure.ccache no
        autoreconf.env-append CC="${configure.cc}"
        build.env-append CC="${configure.cc}"
    }

    if {[variant_isset universal]} {
        # In order to build universal on Leopard, you need at least
        # MacPorts 2.1:
        set merger_configure_args(x86_64) --build=${build_arch}-apple-${os.platform}${os.version}
        set merger_configure_cflags(ppc) -fno-altivec
        set merger_configure_cxxflags(ppc) -fno-altivec
    } elseif {${build_arch} == "ppc"} {
        configure.cflags-append -fno-altivec
        configure.cxxflags-append -fno-altivec
    } elseif {${build_arch} == "x86_64"} {
        configure.args-append --build=${build_arch}-apple-${os.platform}${os.version}
    }
}

post-activate {
    ui_debug "libtool --finish ${prefix}/lib/${name}-${branch}"
    system -W ${prefix} "${prefix}/bin/glibtool --finish ${prefix}/lib/${name}-${branch}"
}

# This variant runs into an error that needs to be fixed:
variant html_doc description {Build html docs with enscript and asciidoc} {
    depends_build-append  port:asciidoc \
                          port:gtk-doc \
                          port:enscript
    depends_skip_archcheck-append asciidoc gtk-doc enscript
    configure.args-replace --disable-docs --enable-docs
    configure.args-replace --disable-gtk-doc --enable-gtk-doc
    configure.args-append --enable-gtk-doc-html \
                          --enable-gtk-doc-pdf
    configure.env-append  ENSCRIPT="${prefix}/bin/enscript" \
                          ASCIIDOC="${prefix}/bin/asciidoc" \
                          have_enscript="yes" \
                          have_asciidoc="yes" \
                          enable_gtk_doc="yes"
    pre-build {
        ui_warn "Warning: building documentation could fail."
    }
}

if {![variant_isset html_doc]} {
    configure.env-append  ENSCRIPT="no" \
                          ASCIIDOC="no" \
                          RUBY="no" \
                          W3M="no" \
                          have_enscript="no" \
                          have_asciidoc="no"
}

variant umfpack description {Build with umfpack support via SuiteSparse} {
    depends_lib-append    port:SuiteSparse
    configure.args-replace --without-umfpack --with-umfpack
    configure.env-append  UMFPACK_CFLAGS="-I${prefix}/include" \
            UMFPACK_LIBS="-L${prefix}/lib -lumfpack -lsuitesparseconfig" \
            with_umfpack="yes" \
            have_umfpack="yes"
}

variant workshop description {Enable build of workshop operations} {
    configure.args-replace --disable-workshop --enable-workshop
    configure.env-append   enable_workshop="yes"
}

variant graphviz description {Build with graphviz support} {
    depends_lib-append    path:bin/dot:graphviz
    configure.args-replace --without-graphviz --with-graphviz
}

variant vala description {Enable Vala bindings} {
    depends_build-append  port:valabind
    depends_lib-append    port:vala
    configure.args-replace --without-vala --with-vala
}

variant python25 conflicts python26 python27 description {Build using Python 2.5} {
    configure.python          ${prefix}/bin/python2.5
    depends_build-append      port:python25
}

variant python26 conflicts python25 python27 description {Build using Python 2.6} {
    configure.python          ${prefix}/bin/python2.6
    depends_build-append      port:python26
}

variant python27 conflicts python25 python26 description {Build using Python 2.7} {
    configure.python          ${prefix}/bin/python2.7
    depends_build-append      port:python27
}

if {![variant_isset python25] && ![variant_isset python26]} {
    default_variants +python27
}

variant debug description {enable debugging} {
    autoreconf.args-append    -Wall
    configure.args-append     --enable-debug
    if {![string match *clang* ${configure.compiler}]} {
        # clang warns about '-pg' being unused during compilation, so only
        # configure with this flag for non-clang compilers:
        configure.args-append --enable-profile
    }
    configure.args-delete     --disable-glibtest
    #FIXME: this seems to not work with muniversal:
    configure.optflags        -ggdb3
    #...so have to manually hack all the configure flags instead:
    configure.cflags-replace  -Os -g3
    configure.cxxflags-replace -Os -g3
    configure.objcflags-replace -Os -g3
    configure.pipe            no
    depends_build-append      port:remake
    build.cmd                 ${prefix}/bin/remake
    #FIXME: tests fail:
    test.run                  yes
    test.target               check
    # until there is a 'depends_test' as per ticket #38208:
    depends_build-append      path:bin/gdb:gdb
    depends_run-append        bin:gdb:gdb
    # see patch part above:
    if {![variant_isset universal]} {
        patch.args-append     --backup
        # need some extra backups for files that are patched by multiple
        # patches:
        pre-patch {
            ui_debug "making some extra patch backups"
            # general schema:
            # - diff between foo.bak and foo.orig: changes made by
            #   patch-fix-introspection
            # - diff between foo.orig and foo: changes made by patch-foo
            # - diff between foo.bak and foo: changes from both
            #   patch-fix-introspection and patch-foo combined
            file copy ${worksrcpath}/configure.ac ${worksrcpath}/configure.ac.bak
            file copy ${worksrcpath}/doc/Makefile.am ${worksrcpath}/doc/Makefile.am.bak
            file copy ${worksrcpath}/gegl/Makefile.am ${worksrcpath}/gegl/Makefile.am.bak
        }
    }
}

livecheck.type  regex
livecheck.url   ftp://ftp.gimp.org/pub/${name}/${branch}/
livecheck.regex "${name}-(\\d+(?:\\.\\d+)*)${extract.suffix}"
