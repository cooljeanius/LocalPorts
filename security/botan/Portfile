# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 85280 2011-10-12 08:17:48Z mww@macports.org $

PortSystem          1.0

name                botan
version             1.10.5
revision            1
categories          security devel
platforms           darwin
maintainers         mww openmaintainer
license             BSD
description         cryptographic algorithms and formats library in C++
long_description    Botan is a C++ library implementing a variety of \
                    cryptographic algorithms and formats. At this time, it is \
                    quite stable, and is suitable for use in a wide variety of \
                    programs.

homepage            http://botan.randombit.net/
master_sites        http://files.randombit.net/botan/
distfiles           Botan-${version}.tbz
worksrcdir          Botan-${version}
checksums           md5     df8868e54d4d763a90ea9ea967272df0 \
                    sha1    998b25d78e139b9c9402919aec4daa1c6118f2fb \
                    rmd160  db3822469698fdba198bacd3da013c545495002f
use_bzip2           yes

depends_build-append bin:python:python27
depends_lib-append  port:openssl \
                    port:zlib \
                    port:bzip2

worksrcdir          Botan-${version}

configure.cmd       ./configure.py
configure.args      --docdir=share/doc \
                    --cc=gcc \
                    --with-openssl \
                    --with-zlib \
                    --with-bzip2

destroot.destdir    DESTDIR=${destroot}${prefix}

platform darwin {
    configure.args-append --os=darwin
}

if {[info exists build_arch] && ${os.platform} == "darwin"} {
    if {(${build_arch} == "i386")} {
        configure.args-append --cpu=ia32
        build.args CXX="${configure.cxx} -m32"
    } elseif {(${build_arch} == "x86_64")} {
        configure.args-append --cpu=amd64
        build.args CXX="${configure.cxx} -m64"
    } elseif {(${build_arch} == "ppc")} {
        configure.args-append --cpu=ppc
        build.args CXX="${configure.cxx} -m32"
    } elseif {(${build_arch} == "ppc64")} {
        configure.args-append --cpu=ppc64
        build.args CXX="${configure.cxx} -m64"
    }
} else {
    build.args CXX="${configure.cxx}"
}

universal_variant   no

livecheck.regex     "(?i)<title>botan (1.*.*)</title>"
