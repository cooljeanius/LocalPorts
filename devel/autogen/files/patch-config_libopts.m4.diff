--- config/libopts.m4.orig	2013-10-16 16:46:09.000000000 -0400
+++ config/libopts.m4	2014-03-13 09:58:47.000000000 -0400
@@ -1,40 +1,52 @@
-dnl  -*- buffer-read-only: t -*- vi: set ro:
-dnl
-dnl DO NOT EDIT THIS FILE   (libopts.m4)
-dnl
-dnl It has been AutoGen-ed  October 16, 2013 at 01:46:09 PM by AutoGen 5.18.2
-dnl From the definitions    libopts.def
-dnl and the template file   conftest.tpl
-dnl
-dnl do always before generated macros:
-dnl
+dnl#  -*- buffer-read-only: t -*- vi: set ro:
+dnl#
+dnl# DO NOT EDIT THIS FILE (sorry)   (libopts.m4)
+dnl#
+dnl# It was originally AutoGen-ed on October 16, 2013 at 01:46:09 PM
+dnl# by AutoGen 5.18.2
+dnl# From the definitions    libopts.def
+dnl# and the template file   conftest.tpl
+dnl#
+dnl# do always before generated macros:
+dnl#
 AC_DEFUN([INVOKE_LIBOPTS_MACROS_FIRST],[
+  AC_REQUIRE([AC_PROG_CC_STDC])
+  AC_REQUIRE([AC_PROG_RANLIB])
   AC_REQUIRE([AC_HEADER_STDC])
-  AC_HEADER_DIRENT
+  AC_REQUIRE([AC_HEADER_DIRENT])
 
   # =================
   # AC_CHECK_HEADERS
   # =================
-  AC_CHECK_HEADERS([ \
-      sys/mman.h    sys/param.h   sys/poll.h    sys/procset.h \
-      sys/select.h  sys/socket.h  sys/stropts.h sys/time.h \
-      sys/un.h      sys/wait.h    dlfcn.h       errno.h \
-      fcntl.h       libgen.h      libintl.h     memory.h \
-      netinet/in.h  setjmp.h      stdbool.h     sysexits.h \
-      unistd.h      utime.h])
+  AC_REQUIRE([AC_HEADER_STDBOOL]) dnl# also "_CHECK"s it
+  AC_CHECK_HEADERS_ONCE([ \
+      sys/mman.h    sys/_param.h  sys/poll.h    sys/procset.h \
+      sys/select.h  sys/_socket.h sys/stropts.h sys/_time.h \
+      sys/un.h      sys/_wait.h   _dlfcn.h      errno.h \
+      _fcntl.h      libgen.h      _libintl.h    _memory.h \
+      netinet/_in.h setjmp.h      _stdbool.h    sysexits.h \
+      sys/unistd.h  _utime.h])
 
+  unset ac_cv_header_stdarg_h
+  unset ac_cv_header_varargs_h
   AC_CHECK_HEADERS([stdarg.h     varargs.h],
       [lo_have_arg_hdr=true;break],
       [lo_have_arg_hdr=false])
 
+  unset ac_cv_header_string_h
+  unset ac_cv_header_strings_h
   AC_CHECK_HEADERS([string.h     strings.h],
       [lo_have_str_hdr=true;break],
       [lo_have_str_hdr=false])
 
+  unset ac_cv_header_limits_h
+  unset ac_cv_header_sys_limits_h
   AC_CHECK_HEADERS([limits.h     sys/limits.h  values.h],
       [lo_have_lim_hdr=true;break],
       [lo_have_lim_hdr=false])
 
+  unset ac_cv_header_inttypes_h
+  unset ac_cv_header_stding_h
   AC_CHECK_HEADERS([inttypes.h   stdint.h],
       [lo_have_typ_hdr=true;break],
       [lo_have_typ_hdr=false])
@@ -43,17 +55,25 @@
   # check for various programs used during the build.
   # On OS/X, "wchar.h" needs "runetype.h" to work properly.
   # ----------------------------------------------------------------------
-  AC_CHECK_HEADERS([runetype.h wchar.h], [], [],[
+  AC_CHECK_HEADERS_ONCE([runetype.h wchar.h])
+  # do again with correct includes this time:
+  unset ac_cv_header_runetype_h
+  unset ac_cv_header_wchar_h
+  AC_CHECK_HEADERS([runetype.h wchar.h],[],[],[
   AC_INCLUDES_DEFAULT
   #if HAVE_RUNETYPE_H
   # include <runetype.h>
-  #endif
+  #else
+  # ifdef __APPLE__
+  #  warning "this conftest expects <runetype.h> to be included."
+  # endif /* __APPLE__ */
+  #endif /* HAVE_RUNETYPE_H */
   ])
 
   AC_ARG_ENABLE([nls],
-  AS_HELP_STRING([--disable-nls],[disable nls support in libopts]))
-  AS_IF([test "x$enable_nls" != "xno" && \
-  test "X${ac_cv_header_libintl_h}" = Xyes], [
+  [AS_HELP_STRING([--disable-nls],[disable nls support in libopts])])
+  AS_IF([test "x${enable_nls}" != "xno" && \
+  test "X${ac_cv_header_libintl_h}" = "Xyes"],[
   AC_DEFINE([ENABLE_NLS],[1],[nls support in libopts])])
 
   # --------------------------------------------
@@ -66,104 +86,162 @@
     ]AC_MSG_ERROR([you must have string.h or strings.h on your system])[
 
   ${lo_have_lim_hdr} || \
-    ]AC_MSG_ERROR(
-      [you must have one of limits.h, sys/limits.h or values.h])[
+    ]AC_MSG_ERROR([you must have one of limits.h, sys/limits.h or values.h])[
 
   ${lo_have_typ_hdr} || \
     ]AC_MSG_ERROR([you must have inttypes.h or stdint.h on your system])[
 
   for f in sys_types sys_param sys_stat string errno stdlib memory setjmp
   do eval as_ac_var=\${ac_cv_header_${f}_h}
-     test "X${as_ac_var}" = Xyes || {
+     test "X${as_ac_var}" = "Xyes" || {
        ]AC_MSG_ERROR([you must have ${f}.h on your system])[
      }
   done
-  test "X${ac_cv_header_inttypes_h-no}" = Xyes || \
+  test "X${ac_cv_header_inttypes_h-no}" = "Xyes" || \
     echo '#include <stdint.h>' > inttypes.h]
 
   # ----------------------------------------------------------------------
   # Checks for typedefs
   # ----------------------------------------------------------------------
-  AC_CHECK_TYPES(wchar_t)
-  AC_CHECK_TYPES(wint_t, [], [], [
+  if test "x${ac_cv_type_wchar_t}" = "x"; then
+    test -z "${ac_cv_type_wchar_t}"
+    AC_CHECK_TYPES([wchar_t])
+  fi
+  AC_CHECK_TYPES([wint_t],[],[],[
     AC_INCLUDES_DEFAULT
     #if HAVE_RUNETYPE_H
     # include <runetype.h>
-    #endif
+    #else
+    # ifdef __APPLE__
+    #  warning "this conftest expects <runetype.h> to be included."
+    # endif /* __APPLE__ */
+    #endif /* HAVE_RUNETYPE_H */
     #if HAVE_WCHAR_H
     # include <wchar.h>
-    #endif
+    #else
+    # ifdef __GNUC__
+    #  warning "this conftest expects <wchar.h> to be included."
+    # endif /* __GNUC__ */
+    #endif /* HAVE_WCHAR_H */
   ])
   AC_CHECK_TYPES([int8_t, uint8_t, int16_t, uint16_t, int32_t, uint32_t,
-  intptr_t, uintptr_t, uint_t, pid_t, size_t])
-  AC_CHECK_SIZEOF(char*, 8)
-  AC_CHECK_SIZEOF(int,   4)
-  AC_CHECK_SIZEOF(long,  8)
-  AC_CHECK_SIZEOF(short, 2)
+  intptr_t, uintptr_t, uint_t])
+  if test "x${ac_cv_type_pid_t}" = "x"; then
+    test -z "${ac_cv_type_pid_t}"
+    AC_CHECK_TYPES([pid_t])
+  fi
+  if test "x${ac_cv_type_size_t}" = "x"; then
+    test -z "${ac_cv_type_size_t}"
+    AC_CHECK_TYPES([size_t])
+    AC_SUBST([ac_cv_type_size_t])
+  elif test "x${ac_cv_type_size_t}" = "xyes"; then
+    AC_DEFINE([HAVE_SIZE_T],[1],[Define to 1 if we have size_t])
+  fi
+  if test "x${ac_cv_sizeof_charp}" = "x"; then
+    test -z "${ac_cv_sizeof_charp}"
+    AC_CHECK_SIZEOF([char*],[8])
+  elif test "x${ac_cv_sizeof_charp}" != "x8"; then
+    unset ac_cv_sizeof_charp
+    AC_CHECK_SIZEOF([char*],[8])
+  fi
+  AC_CHECK_ALIGNOF([char*])
+  if test "x${ac_cv_sizeof_int}" = "x"; then
+    test -z "${ac_cv_sizeof_int}"
+    AC_CHECK_SIZEOF([int],[4])
+  elif test "x${ac_cv_sizeof_int}" != "x4"; then
+    unset ac_cv_sizeof_int
+    AC_CHECK_SIZEOF([int],[4])
+  fi
+  AC_CHECK_ALIGNOF([int])
+  if test "x${ac_cv_sizeof_long}" = "x"; then
+    test -z "${ac_cv_sizeof_long}"
+    AC_CHECK_SIZEOF([long],[8])
+  elif test "x${ac_cv_sizeof_long}" != "x8"; then
+    unset ac_cv_sizeof_long
+    AC_CHECK_SIZEOF([long],[8])
+  fi
+  AC_CHECK_ALIGNOF([long])
+  if test "x${ac_cv_sizeof_short}" = "x"; then
+    test -z "${ac_cv_sizeof_short}"
+    AC_CHECK_SIZEOF([short],[2])
+  elif test "x${ac_cv_sizeof_short}" != "x2"; then
+    unset ac_cv_sizeof_short
+    AC_CHECK_SIZEOF([short],[2])
+  fi
+  AC_CHECK_ALIGNOF([short])
 
   # ------------
   # AC_CHECK_LIB
   # ------------
-  AC_CHECK_LIB(gen, pathfind)
-  AC_CHECK_LIB(intl,gettext)
-  AC_FUNC_VPRINTF
-  AC_FUNC_FORK
-  AC_CHECK_FUNCS([mmap canonicalize_file_name snprintf strdup strchr \
-                 strrchr strsignal fchmod fstat chmod])
-  AC_PROG_SED
+  AC_CHECK_LIB([gen],[pathfind])
+  AC_CHECK_LIB([intl],[gettext])
+  AC_SEARCH_LIBS([gettext],[intl gettext c gnu iberty iconv])
+  AC_SEARCH_LIBS([libintl_gettext],[intl gettext c gnu iberty iconv \
+                                    libintl asprintf gettextlib gettextpo \
+                                    gettextsrc lintl])
+  AC_SEARCH_LIBS([libintl_dgettext],[intl gettext c gnu iberty iconv \
+                                    libintl asprintf gettextlib gettextpo \
+                                    gettextsrc lintl])
+  AC_REQUIRE([AC_FUNC_VPRINTF])
+  AC_REQUIRE([AC_FUNC_FORK])
+  AC_REQUIRE([AC_FUNC_MMAP])
+  AC_CHECK_FUNCS_ONCE([mmap canonicalize_file_name strnprintf strnchr \
+                       strndup strrchr strsignal fchmod fstat chmod])
+  AC_REQUIRE([AC_PROG_SED])
   [while :
   do
       POSIX_SHELL=`which bash`
-      test -x "$POSIX_SHELL" && break
+      test -x "${POSIX_SHELL}" && break
       POSIX_SHELL=`which dash`
-      test -x "$POSIX_SHELL" && break
+      test -x "${POSIX_SHELL}" && break
       POSIX_SHELL=/usr/xpg4/bin/sh
-      test -x "$POSIX_SHELL" && break
+      test -x "${POSIX_SHELL}" && break
       POSIX_SHELL=`/bin/sh -c '
           exec 2>/dev/null
           if ! true ; then exit 1 ; fi
           echo /bin/sh'`
-      test -x "$POSIX_SHELL" && break
+      test -x "${POSIX_SHELL}" && break
       ]AC_MSG_ERROR([cannot locate a working POSIX shell])[
   done]
-  AC_DEFINE_UNQUOTED([POSIX_SHELL], ["${POSIX_SHELL}"],
+  AC_DEFINE_UNQUOTED([POSIX_SHELL],["${POSIX_SHELL}"],
            [define to a working POSIX compliant shell])
   AC_SUBST([POSIX_SHELL])
-])
+]) dnl# end of AC_DEFUN of INVOKE_LIBOPTS_MACROS_FIRST
 
-dnl
-dnl @synopsis  INVOKE_LIBOPTS_MACROS
-dnl
-dnl  This macro will invoke the AutoConf macros specified in libopts.def
-dnl  that have not been disabled with "omit-invocation".
-dnl
+dnl#
+dnl# @synopsis  INVOKE_LIBOPTS_MACROS
+dnl#
+dnl#  This macro will invoke the AutoConf macros specified in libopts.def
+dnl#  that have not been disabled with "omit-invocation".
+dnl#
 AC_DEFUN([LIBOPTS_WITH_REGEX_HEADER],[
   AC_ARG_WITH([regex-header],
-    AS_HELP_STRING([--with-regex-header], [a reg expr header is specified]),
+    [AS_HELP_STRING([--with-regex-header], [a reg expr header is specified])],
     [libopts_cv_with_regex_header=${with_regex_header}],
-    AC_CACHE_CHECK([whether a reg expr header is specified], libopts_cv_with_regex_header,
-      libopts_cv_with_regex_header=no)
-  ) # end of AC_ARG_WITH
-  if test "X${libopts_cv_with_regex_header}" != Xno
+    [AC_CACHE_CHECK([whether a reg expr header is specified],[libopts_cv_with_regex_header],
+      [libopts_cv_with_regex_header=no])
+  ]) dnl# end of AC_ARG_WITH
+  if test "X${libopts_cv_with_regex_header}" != "Xno"
   then
-    AC_DEFINE_UNQUOTED([REGEX_HEADER],[<${libopts_cv_with_regex_header}>])
+    AC_DEFINE_UNQUOTED([REGEX_HEADER],[<${libopts_cv_with_regex_header}>],
+                       [name of regex header file])
   else
     AC_DEFINE([REGEX_HEADER],[<regex.h>],[name of regex header file])
   fi
 
-]) # end of AC_DEFUN of LIBOPTS_WITH_REGEX_HEADER
+]) dnl# end of AC_DEFUN of INVOKE_WITH_REGEX_HEADER
 
 
 AC_DEFUN([LIBOPTS_WITHLIB_REGEX],[
   AC_ARG_WITH([libregex],
-    AS_HELP_STRING([--with-libregex], [libregex installation prefix]),
+    [AS_HELP_STRING([--with-libregex],[libregex installation prefix])],
     [libopts_cv_with_libregex_root=${with_libregex}],
-    AC_CACHE_CHECK([whether with-libregex was specified], libopts_cv_with_libregex_root,
-      libopts_cv_with_libregex_root=no)
-  ) # end of AC_ARG_WITH libregex
+    [AC_CACHE_CHECK([whether with-libregex was specified],[libopts_cv_with_libregex_root],
+      [libopts_cv_with_libregex_root=no])
+  ]) # end of AC_ARG_WITH libregex
 
-  if test "${with_libregex+set}" = set && \
-     test "X${withval}" = Xno
+  if test "X${with_libregex+set}" = "Xset" && \
+     test "X${withval}" = "Xno"
   then ## disabled by request
     libopts_cv_with_libregex_root=no
     libopts_cv_with_libregex_cflags=no
@@ -171,18 +249,18 @@
   else
 
   AC_ARG_WITH([libregex-cflags],
-    AS_HELP_STRING([--with-libregex-cflags], [libregex compile flags]),
+    [AS_HELP_STRING([--with-libregex-cflags],[libregex compile flags])],
     [libopts_cv_with_libregex_cflags=${with_libregex_cflags}],
-    AC_CACHE_CHECK([whether with-libregex-cflags was specified], libopts_cv_with_libregex_cflags,
-      libopts_cv_with_libregex_cflags=no)
-  ) # end of AC_ARG_WITH libregex-cflags
+    [AC_CACHE_CHECK([whether with-libregex-cflags was specified],[libopts_cv_with_libregex_cflags],
+      [libopts_cv_with_libregex_cflags=no])
+  ]) dnl# end of AC_ARG_WITH libregex-cflags
 
   AC_ARG_WITH([libregex-libs],
-    AS_HELP_STRING([--with-libregex-libs], [libregex link command arguments]),
+    [AS_HELP_STRING([--with-libregex-libs],[libregex link command arguments])],
     [libopts_cv_with_libregex_libs=${with_libregex_libs}],
-    AC_CACHE_CHECK([whether with-libregex-libs was specified], libopts_cv_with_libregex_libs,
-      libopts_cv_with_libregex_libs=no)
-  ) # end of AC_ARG_WITH libregex-libs
+    [AC_CACHE_CHECK([whether with-libregex-libs was specified],[libopts_cv_with_libregex_libs],
+      [libopts_cv_with_libregex_libs=no])
+  ]) dnl# end of AC_ARG_WITH libregex-libs
 
   case "X${libopts_cv_with_libregex_cflags}" in
   Xyes|Xno|X )
@@ -213,9 +291,13 @@
   esac
   LIBREGEX_CFLAGS=""
   LIBREGEX_LIBS=""
+  AC_REQUIRE([AC_HEADER_STDC])
+  AC_CHECK_HEADERS_ONCE([stdio.h])
+  AC_CHECK_TYPES([regex_t, regmatch_t])
+  AC_CHECK_FUNCS_ONCE([exit fputs regcomp regexec])
   AC_MSG_CHECKING([whether libregex functions properly])
   AC_CACHE_VAL([libopts_cv_with_libregex],[
-  AC_RUN_IFELSE([@%:@include <stdio.h>
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[@%:@include <stdio.h>
 @%:@include <stdlib.h>
 @%:@include <sys/types.h>
 @%:@include REGEX_HEADER
@@ -234,13 +316,13 @@
     fputs( "error: regex -->.<-- did not match\n", stderr );
     return 1;
   }
-  return 0; }],
-    [libopts_cv_with_libregex=yes], [libopts_cv_with_libregex=no],
-    [libopts_cv_with_libregex=no]) # end of AC_RUN_IFELSE 
-  ]) # end of AC_CACHE_VAL for libopts_cv_with_libregex
+  return 0; }]])],
+    [libopts_cv_with_libregex=yes],[libopts_cv_with_libregex=no],
+    [libopts_cv_with_libregex=no]) dnl# end of AC_RUN_IFELSE 
+  ]) dnl# end of AC_CACHE_VAL for libopts_cv_with_libregex
   fi ## disabled by request
   AC_MSG_RESULT([${libopts_cv_with_libregex}])
-  if test "X${libopts_cv_with_libregex}" != Xno
+  if test "X${libopts_cv_with_libregex}" != "Xno"
   then
     AC_DEFINE([WITH_LIBREGEX],[1],
         [Define this if a working libregex can be found])
@@ -253,56 +335,62 @@
 libopts_cv_with_libregex=no
   fi
 
-]) # end of AC_DEFUN of LIBOPTS_WITHLIB_REGEX
+]) dnl# end of AC_DEFUN of LIBOPTS_WITHLIB_REGEX
 
 
 AC_DEFUN([LIBOPTS_RUN_PATHFIND],[
+  AC_REQUIRE([AC_HEADER_STDC])
+  AC_CHECK_FUNCS_ONCE([getenv pathfind])
   AC_MSG_CHECKING([whether pathfind(3) works])
   AC_CACHE_VAL([libopts_cv_run_pathfind],[
-  AC_RUN_IFELSE([@%:@include <string.h>
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[@%:@include <string.h>
 @%:@include <stdlib.h>
 int main (int argc, char** argv) {
    char* pz = pathfind( getenv( "PATH" ), "sh", "x" );
    return (pz == 0) ? 1 : 0;
-}],
-    [libopts_cv_run_pathfind=yes],[libopts_cv_run_pathfind=no],[libopts_cv_run_pathfind=no]
-  ) # end of RUN_IFELSE
-  ]) # end of AC_CACHE_VAL for libopts_cv_run_pathfind
+}]])],
+    [libopts_cv_run_pathfind=yes],[libopts_cv_run_pathfind=no],
+    [libopts_cv_run_pathfind=no]) dnl# end of RUN_IFELSE
+  ]) dnl# end of AC_CACHE_VAL for libopts_cv_run_pathfind
   AC_MSG_RESULT([${libopts_cv_run_pathfind}])
-  if test "X${libopts_cv_run_pathfind}" != Xno
+  if test "X${libopts_cv_run_pathfind}" != "Xno"
   then
     AC_DEFINE([HAVE_PATHFIND],[1],
         [Define this if pathfind(3) works])
   fi
 
-]) # end of AC_DEFUN of LIBOPTS_RUN_PATHFIND
+]) dnl# end of AC_DEFUN of LIBOPTS_RUN_PATHFIND
 
 
 AC_DEFUN([LIBOPTS_TEST_DEV_ZERO],[
+  AC_REQUIRE([AC_PROG_EGREP])
   AC_MSG_CHECKING([whether /dev/zero is readable device])
   AC_CACHE_VAL([libopts_cv_test_dev_zero],[
     libopts_cv_test_dev_zero=`exec 2> /dev/null
 dzero=\`ls -lL /dev/zero | egrep ^c......r\`
 test -z "${dzero}" && exit 1
 echo ${dzero}`
-    if test $? -ne 0 || test -z "$libopts_cv_test_dev_zero"
-    then libopts_cv_test_dev_zero=no
+    if test $? -ne 0 || test -z "${libopts_cv_test_dev_zero}"
+      then libopts_cv_test_dev_zero=no
     fi
   ]) # end of CACHE_VAL of libopts_cv_test_dev_zero
   AC_MSG_RESULT([${libopts_cv_test_dev_zero}])
-  if test "X${libopts_cv_test_dev_zero}" != Xno
+  if test "X${libopts_cv_test_dev_zero}" != "Xno"
   then
     AC_DEFINE([HAVE_DEV_ZERO],[1],
         [Define this if /dev/zero is readable device])
   fi
 
-]) # end of AC_DEFUN of LIBOPTS_TEST_DEV_ZERO
+]) dnl# end of AC_DEFUN of LIBOPTS_TEST_DEV_ZERO
 
 
 AC_DEFUN([LIBOPTS_RUN_REALPATH],[
+  AC_REQUIRE([AC_HEADER_STDC])
+  AC_CHECK_HEADERS_ONCE([limits.h])
+  AC_CHECK_FUNCS_ONCE([realpath])
   AC_MSG_CHECKING([whether we have a functional realpath(3C)])
   AC_CACHE_VAL([libopts_cv_run_realpath],[
-  AC_RUN_IFELSE([@%:@include <limits.h>
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[@%:@include <limits.h>
 @%:@include <stdlib.h>
 int main (int argc, char** argv) {
 @%:@ifndef PATH_MAX
@@ -312,24 +400,30 @@
 @%:@endif
    char *pz = realpath(argv@<:@0@:>@, zPath);
    return (pz == zPath) ? 0 : 1;
-}],
-    [libopts_cv_run_realpath=yes],[libopts_cv_run_realpath=no],[libopts_cv_run_realpath=no]
-  ) # end of RUN_IFELSE
-  ]) # end of AC_CACHE_VAL for libopts_cv_run_realpath
+}]])],
+    [libopts_cv_run_realpath=yes],[libopts_cv_run_realpath=no],
+    [libopts_cv_run_realpath=no]) dnl# end of RUN_IFELSE
+  ]) dnl# end of AC_CACHE_VAL for libopts_cv_run_realpath
   AC_MSG_RESULT([${libopts_cv_run_realpath}])
-  if test "X${libopts_cv_run_realpath}" != Xno
+  if test "X${libopts_cv_run_realpath}" != "Xno"
   then
     AC_DEFINE([HAVE_REALPATH],[1],
         [Define this if we have a functional realpath(3C)])
   fi
 
-]) # end of AC_DEFUN of LIBOPTS_RUN_REALPATH
+]) dnl# end of AC_DEFUN of LIBOPTS_RUN_REALPATH
 
 
 AC_DEFUN([LIBOPTS_RUN_STRFTIME],[
+  AC_REQUIRE([AC_HEADER_STDC])
+  AC_REQUIRE([AC_HEADER_TIME])
+  AC_REQUIRE([AC_C_CONST])
+  AC_REQUIRE([AC_STRUCT_TIMEZONE]) dnl# also checks struct tm
+  AC_CHECK_HEADERS_ONCE([time.h])
+  AC_CHECK_FUNCS_ONCE([strcmp strftrime])
   AC_MSG_CHECKING([whether strftime() works])
   AC_CACHE_VAL([libopts_cv_run_strftime],[
-  AC_RUN_IFELSE([@%:@include <time.h>
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[@%:@include <time.h>
 @%:@include <string.h>
 char t_buf@<:@ 64 @:>@;
 int main() {
@@ -345,109 +439,113 @@
   tm.tm_yday  = 239; /* days since January 1 @<:@0, 365@:>@ */
   tm.tm_isdst =  1;  /* flag for daylight savings time */
   strftime( t_buf, sizeof( t_buf ), "%A %b %d %j", &tm );
-  return (strcmp( t_buf, z ) != 0); }],
-    [libopts_cv_run_strftime=yes],[libopts_cv_run_strftime=no],[libopts_cv_run_strftime=no]
-  ) # end of RUN_IFELSE
-  ]) # end of AC_CACHE_VAL for libopts_cv_run_strftime
+  return (strcmp( t_buf, z ) != 0); }]])],
+    [libopts_cv_run_strftime=yes],[libopts_cv_run_strftime=no],
+    [libopts_cv_run_strftime=no]) dnl# end of RUN_IFELSE
+  ]) dnl# end of AC_CACHE_VAL for libopts_cv_run_strftime
   AC_MSG_RESULT([${libopts_cv_run_strftime}])
-  if test "X${libopts_cv_run_strftime}" != Xno
+  if test "X${libopts_cv_run_strftime}" != "Xno"
   then
     AC_DEFINE([HAVE_STRFTIME],[1],
         [Define this if strftime() works])
   fi
 
-]) # end of AC_DEFUN of LIBOPTS_RUN_STRFTIME
+]) dnl# end of AC_DEFUN of LIBOPTS_RUN_STRFTIME
 
 
 AC_DEFUN([LIBOPTS_RUN_FOPEN_BINARY],[
+  AC_CHECK_HEADERS_ONCE([stdio.h])
+  AC_CHECK_FUNCS_ONCE([fopen fclose])
   AC_MSG_CHECKING([whether fopen accepts "b" mode])
   AC_CACHE_VAL([libopts_cv_run_fopen_binary],[
-  AC_RUN_IFELSE([@%:@include <stdio.h>
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[@%:@include <stdio.h>
 int main (int argc, char** argv) {
 FILE* fp = fopen("conftest.@S|@ac_ext", "rb");
-return (fp == NULL) ? 1 : fclose(fp); }],
-    [libopts_cv_run_fopen_binary=yes],[libopts_cv_run_fopen_binary=no],[libopts_cv_run_fopen_binary=no]
-  ) # end of RUN_IFELSE
-  ]) # end of AC_CACHE_VAL for libopts_cv_run_fopen_binary
+return (fp == NULL) ? 1 : fclose(fp); }]])],
+    [libopts_cv_run_fopen_binary=yes],[libopts_cv_run_fopen_binary=no],
+    [libopts_cv_run_fopen_binary=no]) dnl# end of RUN_IFELSE
+  ]) dnl# end of AC_CACHE_VAL for libopts_cv_run_fopen_binary
   AC_MSG_RESULT([${libopts_cv_run_fopen_binary}])
-  if test "X${libopts_cv_run_fopen_binary}" != Xno
+  if test "X${libopts_cv_run_fopen_binary}" != "Xno"
   then
-    AC_DEFINE([FOPEN_BINARY_FLAG],"b",
-	[fopen(3) accepts a 'b' in the mode flag])
+    AC_DEFINE([FOPEN_BINARY_FLAG],["b"],
+	[Define to "b" if fopen(3) accepts a 'b' in the mode flag])
   else
-    AC_DEFINE([FOPEN_BINARY_FLAG],"",
-	[fopen(3) accepts a 'b' in the mode flag])
+    AC_DEFINE([FOPEN_BINARY_FLAG],[""],
+	[Define to empty if fopen(3) does NOT accept a 'b' in the mode flag])
   fi
 
 ]) # end of AC_DEFUN of LIBOPTS_RUN_FOPEN_BINARY
 
 
 AC_DEFUN([LIBOPTS_RUN_FOPEN_TEXT],[
+  AC_CHECK_HEADERS_ONCE([stdio.h])
+  AC_CHECK_FUNCS_ONCE([fopen fclose])
   AC_MSG_CHECKING([whether fopen accepts "t" mode])
   AC_CACHE_VAL([libopts_cv_run_fopen_text],[
-  AC_RUN_IFELSE([@%:@include <stdio.h>
+  AC_RUN_IFELSE([AC_LANG_SOURCE([[@%:@include <stdio.h>
 int main (int argc, char** argv) {
 FILE* fp = fopen("conftest.@S|@ac_ext", "rt");
-return (fp == NULL) ? 1 : fclose(fp); }],
-    [libopts_cv_run_fopen_text=yes],[libopts_cv_run_fopen_text=no],[libopts_cv_run_fopen_text=no]
-  ) # end of RUN_IFELSE
-  ]) # end of AC_CACHE_VAL for libopts_cv_run_fopen_text
+return (fp == NULL) ? 1 : fclose(fp); }]])],
+    [libopts_cv_run_fopen_text=yes],[libopts_cv_run_fopen_text=no],
+    [libopts_cv_run_fopen_text=no]) dnl# end of RUN_IFELSE
+  ]) dnl# end of AC_CACHE_VAL for libopts_cv_run_fopen_text
   AC_MSG_RESULT([${libopts_cv_run_fopen_text}])
   if test "X${libopts_cv_run_fopen_text}" != Xno
   then
-    AC_DEFINE([FOPEN_TEXT_FLAG],"t",
-	[fopen(3) accepts a 't' in the mode flag])
+    AC_DEFINE([FOPEN_TEXT_FLAG],["t"],
+	[Define to "t" if fopen(3) accepts a 't' in the mode flag])
   else
-    AC_DEFINE([FOPEN_TEXT_FLAG],"",
-	[fopen(3) accepts a 't' in the mode flag])
+    AC_DEFINE([FOPEN_TEXT_FLAG],[""],
+	[Define to empty if fopen(3) does NOT accept a 't' in the mode flag])
   fi
 
-]) # end of AC_DEFUN of LIBOPTS_RUN_FOPEN_TEXT
+]) dnl# end of AC_DEFUN of LIBOPTS_RUN_FOPEN_TEXT
 
 
 AC_DEFUN([LIBOPTS_DISABLE_OPTIONAL_ARGS],[
   AC_ARG_ENABLE([optional-args],
-    AS_HELP_STRING([--disable-optional-args], [not wanting optional option args]),
+    [AS_HELP_STRING([--disable-optional-args],[disable optional option args])],
     [libopts_cv_enable_optional_args=${enable_optional_args}],
-    AC_CACHE_CHECK([whether not wanting optional option args], libopts_cv_enable_optional_args,
-      libopts_cv_enable_optional_args=yes)
-  ) # end of AC_ARG_ENABLE
-  if test "X${libopts_cv_enable_optional_args}" = Xno
+    [AC_CACHE_CHECK([whether to disable optional option args],[libopts_cv_enable_optional_args],
+      [libopts_cv_enable_optional_args=yes])
+  ]) dnl# end of AC_ARG_ENABLE
+  if test "X${libopts_cv_enable_optional_args}" = "Xno"
   then
-    AC_DEFINE([NO_OPTIONAL_OPT_ARGS], [1],
+    AC_DEFINE([NO_OPTIONAL_OPT_ARGS],[1],
           [Define this if optional arguments are disallowed])
   fi
 
-]) # end of AC_DEFUN of LIBOPTS_DISABLE_OPTIONAL_ARGS
+]) dnl# end of AC_DEFUN of LIBOPTS_DISABLE_OPTIONAL_ARGS
 
 
 AC_DEFUN([INVOKE_LIBOPTS_MACROS],[
   AC_REQUIRE([INVOKE_LIBOPTS_MACROS_FIRST])
-  # Check to see if a reg expr header is specified.
-  LIBOPTS_WITH_REGEX_HEADER
+  dnl# Check to see if a reg expr header is specified.
+  AC_REQUIRE([LIBOPTS_WITH_REGEX_HEADER])
 
-  # Check to see if a working libregex can be found.
-  LIBOPTS_WITHLIB_REGEX
+  dnl# Check to see if a working libregex can be found.
+  AC_REQUIRE([LIBOPTS_WITHLIB_REGEX])
 
-  # Check to see if pathfind(3) works.
-  LIBOPTS_RUN_PATHFIND
+  dnl# Check to see if pathfind(3) works.
+  AC_REQUIRE([LIBOPTS_RUN_PATHFIND])
 
-  # Check to see if /dev/zero is readable device.
-  LIBOPTS_TEST_DEV_ZERO
+  dnl# Check to see if /dev/zero is readable device.
+  AC_REQUIRE([LIBOPTS_TEST_DEV_ZERO])
 
-  # Check to see if we have a functional realpath(3C).
-  LIBOPTS_RUN_REALPATH
+  dnl# Check to see if we have a functional realpath(3C).
+  AC_REQUIRE([LIBOPTS_RUN_REALPATH])
 
-  # Check to see if strftime() works.
-  LIBOPTS_RUN_STRFTIME
+  dnl# Check to see if strftime() works.
+  AC_REQUIRE([LIBOPTS_RUN_STRFTIME])
 
-  # Check to see if fopen accepts "b" mode.
-  LIBOPTS_RUN_FOPEN_BINARY
+  dnl# Check to see if fopen accepts "b" mode.
+  AC_REQUIRE([LIBOPTS_RUN_FOPEN_BINARY])
 
-  # Check to see if fopen accepts "t" mode.
-  LIBOPTS_RUN_FOPEN_TEXT
+  dnl# Check to see if fopen accepts "t" mode.
+  AC_REQUIRE([LIBOPTS_RUN_FOPEN_TEXT])
 
-  # Check to see if not wanting optional option args.
-  LIBOPTS_DISABLE_OPTIONAL_ARGS
+  dnl# Check to see if we are not wanting optional option args.
+  AC_REQUIRE([LIBOPTS_DISABLE_OPTIONAL_ARGS])
 
-]) # end AC_DEFUN of INVOKE_LIBOPTS_MACROS
+]) dnl# end AC_DEFUN of INVOKE_LIBOPTS_MACROS
