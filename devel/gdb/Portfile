# -*- coding: utf-8; mode: tcl; tab-width: 4; indent-tabs-mode: nil; c-basic-offset: 4 -*- vim:fenc=utf-8:ft=tcl:et:sw=4:ts=4:sts=4
# $Id: Portfile 106262 2013-05-20 20:55:10Z sean@macports.org $

PortSystem             1.0
PortGroup              muniversal 1.0
PortGroup              archcheck 1.0

name                   gdb
version                7.7.1
revision               1
categories             devel
license                GPL-3+
maintainers            dweber openmaintainer
description            GDB: The GNU Project Debugger

long_description \
GDB, the GNU Project debugger, allows you to see what is going on \
'inside' another program while it executes -- or what another program \
was doing at the moment it crashed.  GDB can do four main kinds of \
things (plus other things in support of these) to help you catch bugs \
in the act: \
    a) start your program, specifying anything that might affect \
       its behavior, \
    b) make your program stop on specified conditions, \
    c) examine what has happened, when your program has stopped, \
    d) change things in your program, so you can experiment with \
       correcting the effects of one bug and go on to learn about \
       another. \
The program being debugged can be written in Ada, C, C++, Objective-C, \
Pascal (and many other languages). Those programs might be executing on \
the same machine as GDB (native) or on another machine (remote). GDB \
can run on most popular UNIX and Microsoft Windows variants.

homepage               http://www.gnu.org/software/${name}/
platforms              darwin
supported_archs        x86_64 i386

master_sites           gnu

use_bzip2              yes

checksums \
    sha1   35228319f7c715074a80be42fff64c7645227a80 \
    rmd160 523b0b2ac61e62d98c1df379571331604c4f62e1 \
    sha256 0dbd5260406f1b0c70fcf027c6488527fadde0cd9bb574593491fe076eb03aa5

# some of these would be "depends_test" if we had that...
depends_build-append   port:gettext \
                       port:zlib \
                       port:gawk \
                       port:bison \
                       port:flex \
                       path:bin/makeinfo:texinfo \
                       port:expect \
                       port:tcl \
                       port:tk \
                       path:bin/nm:cctools \
                       path:bin/perl:perl5 \
                       port:intltool \
                       port:gsed \
                       bin:mig:bootstrap_cmds \
                       port:gmake \
                       port:byacc \
                       port:vislcg3 \
                       bin:gm4:m4 \
                       port:libunwind-headers \
                       path:bin/xmkmf:imake \
                       port:xz

# things that still need ports:
# - libmcheck (part of glibc, would be hard to extract from it)
# - libbabeltrace (seems slightly more reasonable to port)
depends_lib-append     port:readline \
                       port:expat \
                       port:libiconv \
                       port:ncurses \
                       port:ppl \
                       port:gettext \
                       port:zlib \
                       port:gnuregex \
                       path:lib/pkgconfig/bdw-gc.pc:boehmgc \
                       port:libmpc \
                       port:mpfr \
                       port:gmp \
                       port:cloog \
                       port:isl \
                       port:xz

depends_run-append     port:gcc_select \
                       port:exec-wrapper

depends_skip_archcheck-append bootstrap_cmds exec-wrapper

platform macosx {
    depends_run-append path:etc/openssl/cert.pem:certsync
}

set docdir ${prefix}/share/doc/${name}
set datadir ${prefix}/share/${name}

# hack to try to fix build failure:
post-patch {
    reinplace "s|ATTRIBUTE_RETURNS_NONNULL||g" ${worksrcpath}/include/libiberty.h
}

pre-configure {
    file mkdir "${workpath}/build"
    #FIXME: this is currently unused
}

configure.args-append \
    --infodir=${docdir}/info \
    --mandir=${docdir}/man \
    --with-docdir=${docdir} \
    --datadir=${datadir} \
    --localedir=${datadir}/locale \
    --program-prefix=g \
    --disable-werror \
    --enable-build-warnings \
    --enable-gdb-build-warnings \
    --enable-tui \
    --enable-multi-ice \
    --with-gnu-ld \
    --with-curses \
    --with-zlib \
    --with-libiconv-prefix=${prefix} \
    --with-iconv-bin=${prefix}/bin/iconv \
    --with-expat \
    --with-libexpat-prefix=${prefix} \
    --enable-gold=yes \
    --enable-ld=yes \
    --enable-libada \
    --enable-libssp \
    --enable-static-libjava=yes \
    --enable-lto \
    --enable-objc-gc \
    --with-mpc=${prefix} \
    --with-mpfr=${prefix} \
    --with-gmp=${prefix} \
    --with-cloog=${prefix} \
    --with-isl=${prefix} \
    --disable-isl-version-check \
    --disable-cloog-version-check \
    --without-python \
    --with-lzma \
    --with-liblzma-prefix=${prefix} \
    --with-tcl=${prefix}/lib \
    --with-tk=${prefix}/lib \
    --with-x \
    --x-includes=${prefix}/include \
    --x-libraries=${prefix}/lib \
    --enable-sim \
    --enable-plugins \
    --enable-largefile

# forcing the makeinfo from our prefix is now only done in build/destroot
configure.env-append \
    MAKEINFO="${worksrcpath}/missing makeinfo" \
    LIBS="-lgnuregex -lgc -lcloog-isl -lgmp -lisl -lmpc -lmpfr -lppl -lhistory -lreadline" \
    PICFLAG="-fno-common -DPIC" \
    PICFLAG_FOR_TARGET="-fno-common -DPIC" \
    COREFILE="trad-core.lo" \
    SIM_OBS="remote-sim.o" \
    LIBM="-lm" \
    ignore_sim="false" \
    SIM_OBS="remote-sim.o"
# (the LIBS env entry used to be appended to configure.ldflags instead)

configure.optflags -ggdb3

# I think this is backwards... the description for this flag says that it
# is for hosts with NARROWER word sizes, i.e. 32-bit, i.e. i386, which is
# counter-intuitive... leave the more intuitive one for now:
platform x86_64 {
    configure.args-append \
            --enable-64-bit-bfd
}

if {[string match *clang* ${configure.compiler}]} {
    configure.args-append --disable-rpath
}

build.type             gnu
use_parallel_build     no
configure.ccache       no

# try to get the subdirs to build some additional things:
build.env-append \
    PICFLAG="-fno-common -DPIC" \
    PICFLAG_FOR_TARGET="-fno-common -DPIC" \
    COREFILE="trad-core.lo" \
    LIBM="-lm" \
    CPPFLAGS="${configure.cppflags}" \
    XMKMF="${prefix}/bin/xmkmf" \
    LIBLZMA="-L${prefix}/lib -llzma" \
    LTLIBLZMA="-L${prefix}/lib -llzma" \
    HAVE_LIBLZMA="yes" \
    with_lzma="yes" \
    ignore_sim="false" \
    SIM_OBS="remote-sim.o" \
    TCL_BIN_DIR="${prefix}/lib" \
    TK_BIN_DIR="${prefix}/lib" \
    LIBS="-lgnuregex -lgc -lcloog-isl -lgmp -lisl -lmpc -lmpfr -lppl -lhistory -lreadline" \
    MAKEINFO="${prefix}/bin/makeinfo"

# try forcing things that fail to be simply picked up from the environment:
build.args-append \
    PICFLAG="-fno-common -DPIC" \
    PICFLAG_FOR_TARGET="-fno-common -DPIC" \
    COREFILE="trad-core.lo" \
    SIM_OBS="remote-sim.o" \
    LIBM="-lm" \
    ignore_sim="false" \
    SIM_OBS="remote-sim.o" \
    MAKEINFO="${prefix}/bin/makeinfo"

# some tests currently fail, probably need to do the permission-changing
# before testing instead of after...
test.run               yes
test.target            check

destroot.env-append \
    MAKEINFO="${prefix}/bin/makeinfo"

destroot.args-append \
    MAKEINFO="${prefix}/bin/makeinfo"

post-destroot {
    ui_debug "changing ggdb to be setgid procmod"
    system "chgrp procmod ${destroot}${prefix}/bin/ggdb*"
    system "chmod g+s ${destroot}${prefix}/bin/ggdb*"

    # the info-renaming stuff should no longer be necessary now that I
    # changed the location it installs to, so it has been removed

    ui_debug "setting up gnubin in destroot"
    xinstall -m 755 -d ${destroot}${prefix}/libexec/gnubin
    foreach binary [glob -tails -directory ${destroot}${prefix}/bin g*] {
        ui_debug "symlinking ${binary} into gnubin"
        ln -s ${prefix}/bin/${binary} ${destroot}${prefix}/libexec/gnubin/[string range $binary 1 end]
    }
}

# technically it supports python25, too, but MacPorts
# does not build that as a framework, at least not really...
set pythons_suffixes {26 27 31 32 33}

set pythons_ports {}
foreach s ${pythons_suffixes} {
    lappend pythons_ports python${s}
}

foreach s ${pythons_suffixes} {
    set p python${s}
    set v [string index ${s} 0].[string index ${s} 1]
    set i [lsearch -exact ${pythons_ports} ${p}]
    set c [lreplace ${pythons_ports} ${i} ${i}]
    set python_bin ${prefix}/bin/python${v}
    set python_framework_dir ${prefix}/Library/Frameworks/Python.framework/Versions/${v}
    eval [subst {
        variant ${p} description "Build GDB with Python ${v} Scripting" \
        conflicts ${c} {
            depends_build-append        port:${p}
            depends_lib-append          port:${p}
            depends_run-append          port:${p}
            configure.args-delete       --without-python
            configure.args-append       --with-python=${python_bin}
            configure.ldflags-append    -lpython${v} \
                                        -L${python_framework_dir}/lib
            configure.cppflags-append   -I${python_framework_dir}/include
            configure.python            ${python_bin}
            configure.env-append        python_prog_path="${python_bin}"
            patchfiles-append           patch-python-config.py.diff
        }
    }]
}

if {![variant_isset python26] && ![variant_isset python31] && ![variant_isset python32] && ![variant_isset python33]} {
    default_variants-append +python27
}

if {${os.platform} eq "darwin" && ${os.major} >= 12} {
    notes "
You will need to make sure /System/Library/LaunchDaemons/com.apple.taskgated.plist\
has the '-p' option, e.g.
            <key>ProgramArguments</key>
            <array>
                    <string>/usr/libexec/taskgated</string>
                    <string>-sp</string>
            </array>
"
}


livecheck.type  regex
livecheck.url   http://ftp.gnu.org/gnu/${name}/
livecheck.regex gdb-(\\d+(?:\\.\\d+)+)\\.tar
