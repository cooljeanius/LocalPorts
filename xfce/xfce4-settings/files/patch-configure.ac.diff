--- configure.ac.orig	2010-05-21 13:05:32.000000000 -0400
+++ configure.ac	2014-07-24 18:09:57.000000000 -0400
@@ -1,238 +1,272 @@
-dnl
-dnl This file was autogenerated from "configure.ac.in".
-dnl Edit that file instead!
-dnl
-
-dnl
-dnl Copyright (c) 2006 - 2009
-dnl         The Xfce development team. All rights reserved.
-dnl
-dnl Originally written for Xfce by Benedikt Meurer <benny@xfce.org>
-dnl Modified by Stephan Arts <stephan@xfce.org>
-dnl
-
-dnl ***************************
-dnl *** Version information ***
-dnl ***************************
-m4_define([xfce4_settings_version_major], [4])
-m4_define([xfce4_settings_version_minor], [6])
-m4_define([xfce4_settings_version_micro], [5])
-m4_define([xfce4_settings_version_nano], [])
-m4_define([xfce4_settings_version_build], [e5d6c6d])
-m4_define([xfce4_settings_version_tag], []) # Leave empty for releases
-m4_define([xfce4_settings_version], [xfce4_settings_version_major().xfce4_settings_version_minor().xfce4_settings_version_micro()ifelse(xfce4_settings_version_nano(), [], [], [.xfce4_settings_version_nano()])ifelse(xfce4_settings_version_tag(), [git], [xfce4_settings_version_tag()-xfce4_settings_version_build()], [xfce4_settings_version_tag()])])
-
-dnl *******************************************
-dnl *** Debugging support for GIT snapshots ***
-dnl *******************************************
-m4_define([xfce4_settings_debug_default], [ifelse(xfce4_settings_version_tag(), [git], [full], [minimum])])
-
-dnl ***************************
-dnl *** Initialize autoconf ***
-dnl ***************************
+dnl#                                               -*- Autoconf -*-
+dnl# This file was autogenerated from "configure.ac.in".
+dnl# Edit that file instead! (It is not present though)
+dnl#
+
+dnl#
+dnl# Copyright (c) 2006 - 2009
+dnl#         The Xfce development team. All rights reserved.
+dnl#
+dnl# Originally written for Xfce by Benedikt Meurer <benny@xfce.org>
+dnl# Modified by Stephan Arts <stephan@xfce.org>
+dnl#
+
+dnl# ***************************
+dnl# *** Version information ***
+dnl# ***************************
+m4_define([xfce4_settings_version_major],[4])dnl
+m4_define([xfce4_settings_version_minor],[6])dnl
+m4_define([xfce4_settings_version_micro],[5])dnl
+m4_define([xfce4_settings_version_nano],[])dnl
+m4_define([xfce4_settings_version_build],[e5d6c6d])dnl
+m4_define([xfce4_settings_version_tag],[])dnl# Leave empty for releases
+m4_define([xfce4_settings_version],[xfce4_settings_version_major().xfce4_settings_version_minor().xfce4_settings_version_micro()ifelse(xfce4_settings_version_nano(),[],[],[.xfce4_settings_version_nano()])ifelse(xfce4_settings_version_tag(),[git],[xfce4_settings_version_tag()-xfce4_settings_version_build()],[xfce4_settings_version_tag()])])
+
+dnl# *******************************************
+dnl# *** Debugging support for GIT snapshots ***
+dnl# *******************************************
+m4_define([xfce4_settings_debug_default],[ifelse(xfce4_settings_version_tag(),[git],[full],[minimum])])
+
+dnl# ***************************
+dnl# *** Initialize autoconf ***
+dnl# ***************************
 AC_COPYRIGHT([Copyright (c) 2008-2009
         The Xfce development team. All rights reserved.])
-AC_INIT([xfce4-settings], [xfce4_settings_version], [http://bugzilla.xfce.org/])
-AC_PREREQ([2.50])
+AC_INIT([xfce4-settings],[xfce4_settings_version],
+        [http://bugzilla.xfce.org/])
+AC_PREREQ([2.61])
 AC_REVISION([$Id])
 
-dnl ***************************
-dnl *** Initialize automake ***
-dnl ***************************
+dnl# ***************************
+dnl# *** Initialize automake ***
+dnl# ***************************
 AM_INIT_AUTOMAKE([1.8 dist-bzip2 tar-ustar])
 AM_CONFIG_HEADER([config.h])
-AM_MAINTAINER_MODE()
+AM_MAINTAINER_MODE([])
 
-dnl *******************************
-dnl *** Check for UNIX variants ***
-dnl *******************************
-AC_AIX()
-AC_ISC_POSIX()
-AC_MINIX()
-
-dnl ********************************
-dnl *** Check for basic programs ***
-dnl ********************************
-AC_PROG_CC()
+dnl# *******************************
+dnl# *** Check for UNIX variants ***
+dnl# *******************************
+AC_CANONICAL_HOST
+AC_SEARCH_LIBS([strerror],[cposix])dnl# used to be AC\_ISC\_POSIX
+AC_USE_SYSTEM_EXTENSIONS
+
+dnl# ********************************
+dnl# *** Check for basic programs ***
+dnl# ********************************
+AC_PROG_CC([])
 AM_PROG_CC_C_O
-AC_PROG_LD()
-AC_PROG_INSTALL()
-AC_PROG_INTLTOOL([0.31], [no-xml])
-
-dnl **************************
-dnl *** Initialize libtool ***
-dnl **************************
-AC_PROG_LIBTOOL()
-
-dnl **********************************
-dnl *** Check for standard headers ***
-dnl **********************************
-AC_CHECK_HEADERS([errno.h memory.h math.h stdlib.h string.h unistd.h signal.h])
-
-dnl ******************************
-dnl *** Check for i18n support ***
-dnl ******************************
+AC_PROG_CPP([])
+LT_PATH_LD([])
+AC_PROG_INSTALL([])
+AC_PROG_LN_S([])
+IT_PROG_INTLTOOL([0.31],[no-xml])
+
+dnl# **************************
+dnl# *** Initialize libtool ***
+dnl# **************************
+AC_PROG_CXX
+LT_INIT([win32-dll])
+
+dnl# Checks for libraries.
+AC_CHECK_LIB([m],[rint],[],[
+  AC_CHECK_LIB([m],[main],[],[
+    LT_LIB_M
+  ])dnl
+])dnl
+
+dnl# **********************************
+dnl# *** Check for standard headers ***
+dnl# **********************************
+AC_DEFUN([AC_REQUIRE_HEADER_STDC],[
+  AC_REQUIRE([AC_HEADER_STDC])dnl
+])dnl
+AC_REQUIRE_HEADER_STDC
+AC_CHECK_HEADERS([errno.h math.h stdio.h signal.h])
+
+dnl# Checks for typedefs, structures, and compiler characteristics.
+AC_C_BIGENDIAN
+AC_C_CONST
+AC_C_PROTOTYPES
+AC_TYPE_PID_T
+
+dnl# Checks for library functions.
+AC_FUNC_FORK
+AC_CHECK_FUNCS([rint strstr])
+
+dnl# ******************************
+dnl# *** Check for i18n support ***
+dnl# ******************************
 XDT_I18N([am ast ca cs da de el es eu fi fr gl hu id it ja kk lv nb nl pl pt_BR pt ro ru sk sv tr ug uk ur_PK ur zh_CN ])
 
-dnl ***********************************
-dnl *** Check for required packages ***
-dnl ***********************************
-XDT_CHECK_PACKAGE([EXO], [exo-0.3], [0.3.100])
-XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [2.10.0])
-XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [2.12.0])
-XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [2.12.0])
-XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0], [4.6.0])
-XDT_CHECK_PACKAGE([LIBXFCEGUI4], [libxfcegui4-1.0], [4.6.0])
-XDT_CHECK_PACKAGE([LIBXFCE4KBD_PRIVATE], [libxfce4kbd-private-1.0], [4.6.0])
-XDT_CHECK_PACKAGE([GLADE], [libglade-2.0], [2.0.0])
-XDT_CHECK_PACKAGE([XFCONF], [libxfconf-0], [4.6.0])
-XDT_CHECK_PACKAGE([DBUS_GLIB], [dbus-glib-1], [0.34])
-XDT_CHECK_PACKAGE([XI], [xi], [1.0.0])
-XDT_CHECK_PACKAGE([LIBX11], [x11], [1.0.0])
-XDT_CHECK_PACKAGE([LIBWNCK], [libwnck-1.0], [2.12.0])
-
-dnl ***********************************
-dnl *** Optional support for Xrandr ***
-dnl ***********************************
-XDT_CHECK_OPTIONAL_PACKAGE([XRANDR], [xrandr], [1.1.0],
-                           [xrandr], [Xrandr support])
-
-dnl **************************************
-dnl *** Optional support for Libnotify ***
-dnl **************************************
-XDT_CHECK_OPTIONAL_PACKAGE([LIBNOTIFY], [libnotify], [0.1.3],
-                           [libnotify], [Notification support])
-
-dnl ************************************
-dnl *** Optional support for Xcursor ***
-dnl ************************************
-XDT_CHECK_OPTIONAL_PACKAGE([XCURSOR], [xcursor], [1.1.0],
-                           [xcursor], [Cursor themes support])
-
-dnl ****************************************
-dnl *** Optional support for Libxklavier ***
-dnl ****************************************
-XDT_CHECK_OPTIONAL_PACKAGE([LIBXKLAVIER], [libxklavier], [0.3.0],
-                           [libxklavier], [Keyboard layout selection])
-XDT_CHECK_OPTIONAL_PACKAGE([LIBXKLAVIER4], [libxklavier], [4.0],
-                           [libxklavier], [Keyboard layout selection])
-XDT_CHECK_OPTIONAL_PACKAGE([LIBXKLAVIER5], [libxklavier], [5.0],
-                           [libxklavier], [Keyboard layout selection])
-
-dnl ************************************
-dnl *** Xsettings daemon is optional ***
-dnl ************************************
+dnl# ***********************************
+dnl# *** Check for required packages ***
+dnl# ***********************************
+AC_PATH_XTRA
+XDT_CHECK_PACKAGE([EXO],[exo-0.3],[0.3.100])
+XDT_CHECK_PACKAGE([GTK],[gtk+-2.0],[2.10.0])
+XDT_CHECK_PACKAGE([GLIB],[glib-2.0],[2.12.0])
+XDT_CHECK_PACKAGE([GTHREAD],[gthread-2.0],[2.12.0])
+XDT_CHECK_PACKAGE([LIBXFCE4UTIL],[libxfce4util-1.0],[4.6.0])
+XDT_CHECK_PACKAGE([LIBXFCEGUI4],[libxfcegui4-1.0],[4.6.0])
+XDT_CHECK_PACKAGE([LIBXFCE4KBD_PRIVATE],[libxfce4kbd-private-1.0],[4.6.0])
+XDT_CHECK_PACKAGE([GLADE],[libglade-2.0],[2.0.0])
+XDT_CHECK_PACKAGE([XFCONF],[libxfconf-0],[4.6.0])
+XDT_CHECK_PACKAGE([DBUS_GLIB],[dbus-glib-1],[0.34])
+XDT_CHECK_PACKAGE([XI],[xi],[1.0.0])
+XDT_CHECK_PACKAGE([LIBX11],[x11],[1.0.0])
+XDT_CHECK_PACKAGE([LIBWNCK],[libwnck-1.0],[2.12.0])
+
+dnl# ***********************************
+dnl# *** Optional support for Xrandr ***
+dnl# ***********************************
+XDT_CHECK_OPTIONAL_PACKAGE([XRANDR],[xrandr],[1.1.0],
+                           [xrandr],[Xrandr support])
+
+dnl# **************************************
+dnl# *** Optional support for Libnotify ***
+dnl# **************************************
+XDT_CHECK_OPTIONAL_PACKAGE([LIBNOTIFY],[libnotify],[0.1.3],
+                           [libnotify],[Notification support])
+
+dnl# ************************************
+dnl# *** Optional support for Xcursor ***
+dnl# ************************************
+XDT_CHECK_OPTIONAL_PACKAGE([XCURSOR],[xcursor],[1.1.0],
+                           [xcursor],[Cursor themes support])
+
+dnl# ****************************************
+dnl# *** Optional support for Libxklavier ***
+dnl# ****************************************
+XDT_CHECK_OPTIONAL_PACKAGE([LIBXKLAVIER],[libxklavier],[0.3.0],
+                           [libxklavier],[Keyboard layout selection])
+XDT_CHECK_OPTIONAL_PACKAGE([LIBXKLAVIER4],[libxklavier],[4.0],
+                           [libxklavier],[Keyboard layout selection])
+XDT_CHECK_OPTIONAL_PACKAGE([LIBXKLAVIER5],[libxklavier],[5.0],
+                           [libxklavier],[Keyboard layout selection])
+
+dnl# ************************************
+dnl# *** Xsettings daemon is optional ***
+dnl# ************************************
 AC_ARG_ENABLE([xsettings-daemon],
-              [AC_HELP_STRING([--disable-xsettings-daemon],
-                              [Build the XSETTINGS daemon (default=enabled)])],
-              [build_xfsettingsd=$enableval],
+              [AS_HELP_STRING([--disable-xsettings-daemon],
+                          [Build the XSETTINGS daemon (default=enabled)])],
+              [build_xfsettingsd=${enableval}],
               [build_xfsettingsd=yes])
-AM_CONDITIONAL([BUILD_XFSETTINGSD], [test "x$build_xfsettingsd" = "xyes"])
+AM_CONDITIONAL([BUILD_XFSETTINGSD],[test "x${build_xfsettingsd}" = "xyes"])
 
-dnl make pluggable settings dialogs optional
+dnl# make pluggable settings dialogs optional:
 AC_ARG_ENABLE([pluggable-dialogs],
-              [AC_HELP_STRING([--enable-pluggable-dialogs],
-                              [Enable support for embedded settings dialogs (default=disabled)])],
-              [enable_pluggable_dialogs=$enableval],
+              [AS_HELP_STRING([--enable-pluggable-dialogs],
+                              [Enable support for embedded settings dialogs
+                               (default=disabled)])],
+              [enable_pluggable_dialogs=${enableval}],
               [enable_pluggable_dialogs=no])
-if test x"$enable_pluggable_dialogs" = x"yes"; then
-  AC_DEFINE([ENABLE_PLUGGABLE_DIALOGS], [1], [Define to enable embedded settings dialogs])
+if test x"${enable_pluggable_dialogs}" = x"yes"; then
+  AC_DEFINE([ENABLE_PLUGGABLE_DIALOGS],[1],
+            [Define to 1 to enable embedded settings dialogs])
   ENABLE_PLUGGABLE_DIALOGS=1
 fi
-AC_SUBST(ENABLE_PLUGGABLE_DIALOGS)
+AC_SUBST([ENABLE_PLUGGABLE_DIALOGS])dnl
 
-dnl ****************************************
-dnl *** Optional support for Libcanberra ***
-dnl ****************************************
+dnl# ****************************************
+dnl# *** Optional support for Libcanberra ***
+dnl# ****************************************
 
-dnl Camberra XSettings
+dnl# Camberra XSettings
 AC_ARG_ENABLE([sound-settings],
-              [AC_HELP_STRING([--enable-sound-settings],
-                              [Enable sound XSETTINGS in GUI (from libcanberra) (default=no)])],
-              [enable_sound_settings=$enableval],
+              [AS_HELP_STRING([--enable-sound-settings],
+                              [Enable sound XSETTINGS in GUI
+                               (from libcanberra) (default=no)])],
+              [enable_sound_settings=${enableval}],
               [enable_sound_settings=no])
-if test x"$enable_sound_settings" = x"yes"; then
-  AC_DEFINE([ENABLE_SOUND_SETTINGS], [1], [Define to enable sound control in UI])
+if test x"${enable_sound_settings}" = x"yes"; then
+  AC_DEFINE([ENABLE_SOUND_SETTINGS],[1],
+            [Define to 1 to enable sound control in UI])
   ENABLE_SOUND_SETTINGS=1
 fi
-AC_SUBST(ENABLE_SOUND_SETTINGS)
+AC_SUBST([ENABLE_SOUND_SETTINGS])dnl
 
-dnl ***********************************
-dnl *** Check for debugging support ***
-dnl ***********************************
+dnl# ***********************************
+dnl# *** Check for debugging support ***
+dnl# ***********************************
 AC_ARG_ENABLE([debug],
-AC_HELP_STRING([--enable-debug=@<:@no/minimum/yes/full@:>@], [Turn on debugging @<:@default=xfce4_settings_debug_default@:>@]),
-  [], [enable_debug=xfce4_settings_debug_default])
+              [AS_HELP_STRING([--enable-debug=@<:@no/minimum/yes/full@:>@],
+                          [Turn on debugging
+                           @<:@default=xfce4_settings_debug_default@:>@])],
+  [],[enable_debug=xfce4_settings_debug_default])
 AC_MSG_CHECKING([whether to enable debugging support])
-if test x"$enable_debug" = x"full" -o x"$enable_debug" = x"yes"; then
-  dnl Print the result
-  AC_MSG_RESULT([$enable_debug])
-
-  dnl Define debug for libxfce4util DBG macro
-  AC_DEFINE([DEBUG], [1], [Define for debugging support])
-
-  dnl Make sure we detect possible errors (if supported)
-  save_CFLAGS="$CFLAGS"
-  CFLAGS="$CFLAGS -Wall -Werror"
-  AC_MSG_CHECKING([whether $CC accepts -Wall -Werror])
-  AC_COMPILE_IFELSE(AC_LANG_SOURCE([int x;]), [
+if test x"${enable_debug}" = x"full" -o x"${enable_debug}" = x"yes"; then
+  dnl# Print the result:
+  AC_MSG_RESULT([${enable_debug}])
+
+  dnl# Define debug for libxfce4util DBG macro:
+  AC_DEFINE([DEBUG],[1],[Define for debugging support])
+
+  dnl# Make sure we detect possible errors (if supported)
+  dnl# Do NOT actually turn them into actual errors though, except in this
+  dnl# conftest:
+  save_CFLAGS="${CFLAGS}"
+  CFLAGS="${CFLAGS} -Wall -Wextra -Werror"
+  AC_MSG_CHECKING([whether ${CC} accepts -Wall -Wextra])
+  AC_COMPILE_IFELSE([AC_LANG_SOURCE([[int x = 0;]])],[
     AC_MSG_RESULT([yes])
-    PLATFORM_CFLAGS="$PLATFORM_CFLAGS -Wall -Werror"
-  ], [
+    PLATFORM_CFLAGS="${PLATFORM_CFLAGS} -Wall -Wextra"
+  ],[
     AC_MSG_RESULT([no])
   ])
-  CFLAGS="$save_CFLAGS"
+  CFLAGS="${save_CFLAGS}"
 
-  dnl Paranoia for --enable-debug=full
-  if test x"$enable_debug" = x"full"; then
-    dnl Enable extensive debugging
-    PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DG_ENABLE_DEBUG"
-
-    dnl Use -O0 -g3 if the compiler supports it
-    save_CFLAGS="$CFLAGS"
-    CFLAGS="$CFLAGS -O0 -g3"
-    AC_MSG_CHECKING([whether $CC accepts -O0 -g3])
-    AC_COMPILE_IFELSE(AC_LANG_SOURCE([int x;]), [
+  dnl# Paranoia for --enable-debug=full situations:
+  if test x"${enable_debug}" = x"full"; then
+    dnl# Enable extensive debugging:
+    PLATFORM_CPPFLAGS="${PLATFORM_CPPFLAGS} -DG_ENABLE_DEBUG"
+
+    dnl# Use -O0 -g3 if the compiler supports it:
+    save_CFLAGS="${CFLAGS}"
+    CFLAGS="${CFLAGS} -O0 -g3"
+    AC_MSG_CHECKING([whether ${CC} accepts -O0 -g3])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[int x = 0;]])],[
       AC_MSG_RESULT([yes])
-      PLATFORM_CFLAGS="$PLATFORM_CFLAGS -O0 -g3"
-    ], [
+      PLATFORM_CFLAGS="${PLATFORM_CFLAGS} -O0 -g3"
+    ],[
       AC_MSG_RESULT([no])
     ])
-    CFLAGS="$save_CFLAGS"
+    CFLAGS="${save_CFLAGS}"
   fi
 else
-  dnl Print the result
-  AC_MSG_RESULT([$enable_debug])
+  dnl# Print the result:
+  AC_MSG_RESULT([${enable_debug}])
 
-  dnl Disable debugging (release build)
-  PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DNDEBUG"
+  dnl# Disable debugging (release build):
+  PLATFORM_CPPFLAGS="${PLATFORM_CPPFLAGS} -DNDEBUG"
 
-  dnl Disable object cast checks
-  PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DG_DISABLE_CAST_CHECKS"
+  dnl# Disable object cast checks:
+  PLATFORM_CPPFLAGS="${PLATFORM_CPPFLAGS} -DG_DISABLE_CAST_CHECKS"
 
-  dnl Disable all checks for --enable-debug=no
-  if test x"$enable_debug" = x"no"; then
-    PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
+  dnl# Disable all checks for --enable-debug=no or similar:
+  if test x"${enable_debug}" = x"no"; then
+    PLATFORM_CPPFLAGS="${PLATFORM_CPPFLAGS} -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
   fi
 fi
 
-dnl **************************************
-dnl *** Check for linker optimizations ***
-dnl **************************************
-AC_MSG_CHECKING([whether $LD accepts --as-needed])
-case `$LD --as-needed -v 2>&1 </dev/null` in
+dnl# **************************************
+dnl# *** Check for linker optimizations ***
+dnl# **************************************
+AC_MSG_CHECKING([whether ${LD} accepts --as-needed])
+case `${LD} --as-needed -v 2>&1 </dev/null` in
 *GNU* | *'with BFD'*)
-  LDFLAGS="$LDFLAGS -Wl,--as-needed"
+  LDFLAGS="${LDFLAGS} -Wl,--as-needed"
   AC_MSG_RESULT([yes])
   ;;
 *)
   AC_MSG_RESULT([no])
   ;;
 esac
-AC_MSG_CHECKING([whether $LD accepts -O1])
-case `$LD -O1 -v 2>&1 </dev/null` in
+AC_MSG_CHECKING([whether ${LD} accepts -O1])
+case `${LD} -O1 -v 2>&1 </dev/null` in
 *GNU* | *'with BFD'*)
-  PLATFORM_LDFLAGS="$PLATFORM_LDFLAGS -Wl,-O1"
+  PLATFORM_LDFLAGS="${PLATFORM_LDFLAGS} -Wl,-O1"
   AC_MSG_RESULT([yes])
   ;;
 *)
@@ -240,20 +274,23 @@
   ;;
 esac
 
-dnl *********************************
-dnl *** Substitute platform flags ***
-dnl *********************************
+dnl# *********************************
+dnl# *** Substitute platform flags ***
+dnl# *********************************
 AC_MSG_CHECKING([PLATFORM_CPPFLAGS])
-AC_MSG_RESULT([$PLATFORM_CPPFLAGS])
-AC_SUBST([PLATFORM_CPPFLAGS])
+AC_MSG_RESULT([${PLATFORM_CPPFLAGS}])
+AC_SUBST([PLATFORM_CPPFLAGS])dnl
+
 AC_MSG_CHECKING([PLATFORM_CFLAGS])
-AC_MSG_RESULT([$PLATFORM_CFLAGS])
-AC_SUBST([PLATFORM_CFLAGS])
+AC_MSG_RESULT([${PLATFORM_CFLAGS}])
+AC_SUBST([PLATFORM_CFLAGS])dnl
+
 AC_MSG_CHECKING([PLATFORM_LDFLAGS])
-AC_MSG_RESULT([$PLATFORM_LDFLAGS])
-AC_SUBST([PLATFORM_LDFLAGS])
+AC_MSG_RESULT([${PLATFORM_LDFLAGS}])
+AC_SUBST([PLATFORM_LDFLAGS])dnl
 
-AC_OUTPUT([
+dnl# Output:
+AC_CONFIG_FILES([
 Makefile
 po/Makefile.in
 dialogs/Makefile
@@ -267,45 +304,46 @@
 xfce4-settings-editor/Makefile
 xfsettingsd/Makefile
 ])
+AC_OUTPUT
 
-dnl ***************************
-dnl *** Print configuration ***
-dnl ***************************
-echo
+dnl# ***************************
+dnl# *** Print configuration ***
+dnl# ***************************
+echo ""
 echo "Build Configuration:"
-echo
-echo "* Installation prefix:       $prefix"
-echo "* Debug Support:             $enable_debug"
-if test x"$XRANDR_FOUND" = x"yes"; then
+echo ""
+echo "* Installation prefix:       ${prefix}"
+echo "* Debug Support:             ${enable_debug}"
+if test x"${XRANDR_FOUND}" = x"yes"; then
 echo "* Xrandr support:            yes"
 else
 echo "* Xrandr support:            no"
 fi
-if test x"$LIBNOTIFY_FOUND" = x"yes"; then
+if test x"${LIBNOTIFY_FOUND}" = x"yes"; then
 echo "* Libnotify support:         yes"
 else
 echo "* Libnotify support:         no"
 fi
-if test x"$XCURSOR_FOUND" = x"yes"; then
+if test x"${XCURSOR_FOUND}" = x"yes"; then
 echo "* Xcursor support:           yes"
 else
 echo "* Xcursor support:           no"
 fi
-if test x"$ENABLE_PLUGGABLE_DIALOGS" = x"1"; then
+if test x"${ENABLE_PLUGGABLE_DIALOGS}" = x"1"; then
 echo "* Embedded settings dialogs  yes"
 else
 echo "* Embedded settings dialogs  no"
 fi
-if test x"$ENABLE_SOUND_SETTINGS" = x"1"; then
+if test x"${ENABLE_SOUND_SETTINGS}" = x"1"; then
 echo "* Sounds settings support    yes"
 else
 echo "* Sounds settings support    no"
 fi
-if test x"$LIBXKLAVIER_FOUND" = x"yes"; then
+if test x"${LIBXKLAVIER_FOUND}" = x"yes"; then
 echo "* Libxklavier support:       yes"
 else
 echo "* Libxklavier support:       no"
 fi
-echo
+echo ""
 
 
