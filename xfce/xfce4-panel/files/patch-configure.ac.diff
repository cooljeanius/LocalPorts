--- configure.in	2010-05-21 12:57:21.000000000 -0400
+++ configure.ac	2013-10-02 20:13:44.000000000 -0400
@@ -1,229 +1,267 @@
-dnl
-dnl This file was autogenerated from "configure.in.in".
-dnl Edit that file instead!
-dnl
-
-dnl $Id$
-dnl
-dnl Copyright (c) 2004-2006
-dnl         The Xfce development team. All rights reserved.
-dnl
-dnl 2005-2007 Jasper Huijsmans <jasper@xfce.org>
-dnl 2006-2007 Nick Schermer <nick@xfce.org>
-dnl
-
-dnl ***************************
-dnl *** Version information ***
-dnl ***************************
-m4_define([libxfce4panel_verinfo], [2:2:1])
-m4_define([xfce4_panel_version_major], [4])
-m4_define([xfce4_panel_version_minor], [6])
-m4_define([xfce4_panel_version_micro], [4])
-m4_define([xfce4_panel_version_nano],  []) dnl leave this empty to have no nano version
-m4_define([xfce4_panel_version_build], [a111de8])
-m4_define([xfce4_panel_version_tag],   [])
-m4_define([xfce4_panel_version], [xfce4_panel_version_major().xfce4_panel_version_minor().xfce4_panel_version_micro()ifelse(xfce4_panel_version_nano(), [], [], [.xfce4_panel_version_nano()])ifelse(xfce4_panel_version_tag(), [git], [xfce4_panel_version_tag()-xfce4_panel_version_build()], [xfce4_panel_version_tag()])])
-
-dnl *******************************************
-dnl *** Debugging support for GIT snapshots ***
-dnl *******************************************
-m4_define([panel_debug_default], [ifelse(xfce4_panel_version_tag(), [git], [yes], [minimum])])
-
-dnl ***************************
-dnl *** Initialize autoconf ***
-dnl ***************************
+dnl#                                               -*- Autoconf -*-
+dnl# Process this file with autoconf to produce a configure script.
+
+dnl#
+dnl# This file was autogenerated from "configure.in.in".
+dnl# Edit that file instead!
+dnl#
+
+dnl# $Id$
+dnl#
+dnl# Copyright (c) 2004-2006
+dnl#         The Xfce development team. All rights reserved.
+dnl#
+dnl# 2005-2007 Jasper Huijsmans <jasper@xfce.org>
+dnl# 2006-2007 Nick Schermer <nick@xfce.org>
+dnl#
+
+dnl#***************************
+dnl#*** Version information ***
+dnl#***************************
+m4_define([libxfce4panel_verinfo],[2:2:1])
+m4_define([xfce4_panel_version_major],[4])
+m4_define([xfce4_panel_version_minor],[6])
+m4_define([xfce4_panel_version_micro],[4])
+m4_define([xfce4_panel_version_nano],[]) dnl# leave this empty to have no nano version
+m4_define([xfce4_panel_version_build],[a111de8])
+m4_define([xfce4_panel_version_tag],[])
+m4_define([xfce4_panel_version],[xfce4_panel_version_major().xfce4_panel_version_minor().xfce4_panel_version_micro()ifelse(xfce4_panel_version_nano(),[],[],[.xfce4_panel_version_nano()])ifelse(xfce4_panel_version_tag(),[git],[xfce4_panel_version_tag()-xfce4_panel_version_build()],[xfce4_panel_version_tag()])])
+
+dnl#*******************************************
+dnl#*** Debugging support for GIT snapshots ***
+dnl#*******************************************
+m4_define([panel_debug_default],[ifelse([xfce4_panel_version_tag()],[git],[yes],[minimum])])
+
+dnl#***************************
+dnl#*** Initialize autoconf ***
+dnl#***************************
 AC_COPYRIGHT([Copyright (c) 2002-2009
         The Xfce development team. All rights reserved.
 
 Written for Xfce by Jasper Huijsmans <jasper@xfce.org>.])
-AC_INIT([xfce4-panel], [xfce4_panel_version], [http://bugzilla.xfce.org/], [xfce4-panel])
+AC_INIT([xfce4-panel],[xfce4_panel_version],[http://bugzilla.xfce.org/],[xfce4-panel])
 AC_PREREQ([2.50])
 AC_REVISION([$Id$])
-
-dnl ***************************
-dnl *** Initialize automake ***
-dnl ***************************
-AM_CONFIG_HEADER([config.h])
-AM_INIT_AUTOMAKE([1.8 dist-bzip2 tar-ustar])
-AM_MAINTAINER_MODE()
-
-dnl *******************************
-dnl *** Check for UNIX variants ***
-dnl *******************************
-AC_AIX()
-AC_ISC_POSIX()
-AC_MINIX()
-AM_CONDITIONAL([HAVE_CYGWIN], [test "`uname | grep \"CYGWIN\"`" != ""])
-
-dnl ********************************
-dnl *** Check for basic programs ***
-dnl ********************************
-AC_PROG_CC()
-AC_PROG_LD()
-AC_PROG_INSTALL()
-AC_PROG_INTLTOOL()
-AC_CHECK_PROGS([PERL], [perl5 perl])
-
-dnl **************************
-dnl *** Initialize libtool ***
-dnl **************************
-AC_DISABLE_STATIC()
-AC_PROG_LIBTOOL()
-
-dnl ****************************
-dnl *** Intltool-update hack ***
-dnl ****************************
+AC_CANONICAL_TARGET
+AC_OBJEXT
+AC_EXEEXT
+
+dnl#***************************
+dnl#*** Initialize automake ***
+dnl#***************************
+AC_CONFIG_SRCDIR([config.h.in])
+AC_CONFIG_MACRO_DIR([m4])
+AC_CONFIG_HEADERS([config.h])
+AM_INIT_AUTOMAKE([1.8 dist-bzip2 foreign tar-ustar -Wall])
+AM_MAINTAINER_MODE
+
+dnl#*******************************
+dnl#*** Check for UNIX variants ***
+dnl#*******************************
+AC_USE_SYSTEM_EXTENSIONS
+AC_SEARCH_LIBS([strerror],[cposix])
+AM_CONDITIONAL([HAVE_CYGWIN],[test "`uname | grep \"CYGWIN\"`" != ""])
+
+dnl#********************************
+dnl#*** Check for basic programs ***
+dnl#********************************
+AM_PROG_AR
+AM_PROG_AS
+if test "x$CC" = "x"; then
+	test -z "$CC"
+	AC_PROG_CC
+else
+	test ! -z "$CC"
+	AC_PROG_GCC_TRADITIONAL
+fi
+XORG_PROG_RAWCPP
+LT_PATH_LD([])
+AC_PROG_INSTALL
+AC_PROG_LN_S
+IT_PROG_INTLTOOL([])
+AC_CHECK_PROGS([PERL],[perl5 perl])
+
+dnl#**************************
+dnl#*** Initialize libtool ***
+dnl#**************************
+AC_DISABLE_STATIC
+LT_INIT([disable-static win32-dll])
+
+dnl#****************************
+dnl#*** Intltool-update hack ***
+dnl#****************************
 AC_CONFIG_COMMANDS([intltool-update],
-    [(sed -e 's/^\("desktop.*".*\)/\1\n"rc(?:\\\\.in)+|"\./' intltool-update > intltool-update-tmp &&
+    [(test -e intltool-update && sed -e 's/^\("desktop.*".*\)/\1\n"rc(?:\\\\.in)+|"\./' intltool-update > intltool-update-tmp &&
       mv intltool-update-tmp intltool-update && chmod 755 intltool-update)])
 
-dnl **************************************
-dnl *** Substitute version information ***
-dnl **************************************
-LIBXFCE4PANEL_VERINFO=libxfce4panel_verinfo()
+dnl#**************************************
+dnl#*** Substitute version information ***
+dnl#**************************************
+LIBXFCE4PANEL_VERINFO="libxfce4panel_verinfo()"
 AC_SUBST([LIBXFCE4PANEL_VERINFO])
 
-dnl **********************************
-dnl *** Check for standard headers ***
-dnl **********************************
-AC_HEADER_STDC()
-AC_CHECK_HEADERS([stdlib.h unistd.h locale.h stdio.h fcntl.h errno.h \
-                  math.h signal.h stddef.h sys/wait.h  sys/stat.h \
-                  sys/type.h sys/types.h sys/mman.h sys/wait.h time.h \
-                  string.h features.h])
-
-dnl ************************************
-dnl *** Check for standard functions ***
-dnl ************************************
-AC_FUNC_MMAP()
-AC_CHECK_FUNCS([sigaction localtime_r])
-
-dnl ******************************
-dnl *** Check for i18n support ***
-dnl ******************************
-XDT_I18N([am ar ast az be bg bn_IN ca cs da de dz el en_GB eo es_MX es et eu fa fi fr gl gu he hi hu hy id it ja ka kk ko ku lt lv mk mr ms nb nl nn pa pl pt_BR pt ro ru si sk sq sv ta tr ug uk ur_PK ur vi zh_CN zh_TW ])
-
-dnl *******************************
-dnl *** Check for X11 installed ***
-dnl *******************************
-XDT_CHECK_LIBX11_REQUIRE()
-XDT_CHECK_LIBSM()
-
-dnl ***********************************
-dnl *** Check for required packages ***
-dnl ***********************************
-XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0], [4.6.0])
-XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [2.10.0])
-XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [2.12.0])
-XDT_CHECK_PACKAGE([GMODULE], [gmodule-2.0], [2.12.0])
-XDT_CHECK_PACKAGE([LIBXFCEGUI4], [libxfcegui4-1.0], [4.6.0])
-XDT_CHECK_PACKAGE([LIBEXO], [exo-0.3], [0.3.100], [],
-  [XDT_CHECK_PACKAGE([LIBEXO], [exo-1], [0.5.0])])
-XDT_CHECK_PACKAGE([CAIRO], [cairo], [1.0.0])
-
-dnl **********************
-dnl *** Check for wnck ***
-dnl **********************
-XDT_CHECK_PACKAGE([LIBWNCK], [libwnck-1.0], [2.20],
+dnl# Checks for libraries.
+LT_LIB_M
+AC_CHECK_LIB([c],[printf])
+AC_CHECK_LIB([m],[pow])
+
+dnl#**********************************
+dnl#*** Check for standard headers ***
+dnl#**********************************
+AC_DEFUN([AC_REQUIRE_HEADER_STDC],[
+  AC_REQUIRE([AC_HEADER_STDC])
+])
+AC_REQUIRE_HEADER_STDC
+AC_CHECK_HEADERS([errno.h fcntl.h features.h locale.h math.h signal.h \
+                  stddef.h stdio.h sys/mman.h sys/type.h \
+                  sys/wait.h time.h])
+
+dnl# Checks for typedefs, structures, and compiler characteristics.
+AC_C_BIGENDIAN
+AC_C_CONST
+AC_C_PROTOTYPES
+AC_TYPE_SIZE_T
+
+dnl#************************************
+dnl#*** Check for standard functions ***
+dnl#************************************
+AC_FUNC_FORK
+AC_FUNC_MMAP
+AC_CHECK_FUNCS([localtime_r munmap rint sigaction strchr strerror \
+                strrchr strstr strtol])
+
+dnl#******************************
+dnl#*** Check for i18n support ***
+dnl#******************************
+XDT_I18N([am ar ast az be bg bn_IN ca cs da de dz el en_GB eo es_MX es et eu fa fi fr gl gu he hi hu hy id it ja ka kk ko ku lt lv mk mr ms nb nl nn pa pl pt_BR pt ro ru si sk sq sv ta tr ug uk ur_PK ur vi zh_CN zh_TW])
+
+dnl#*******************************
+dnl#*** Check for X11 installed ***
+dnl#*******************************
+AC_PATH_XTRA
+XDT_CHECK_LIBX11_REQUIRE
+XDT_CHECK_LIBSM
+
+dnl#***********************************
+dnl#*** Check for required packages ***
+dnl#***********************************
+XDT_CHECK_PACKAGE([LIBXFCE4UTIL],[libxfce4util-1.0],[4.6.0])
+XDT_CHECK_PACKAGE([GTK],[gtk+-2.0],[2.10.0])
+XDT_CHECK_PACKAGE([GTHREAD],[gthread-2.0],[2.12.0])
+XDT_CHECK_PACKAGE([GMODULE],[gmodule-2.0],[2.12.0])
+XDT_CHECK_PACKAGE([LIBXFCEGUI4],[libxfcegui4-1.0],[4.6.0])
+XDT_CHECK_PACKAGE([LIBEXO],[exo-0.3],[0.3.100],[],
+  [XDT_CHECK_PACKAGE([LIBEXO],[exo-1],[0.5.0])])
+XDT_CHECK_PACKAGE([CAIRO],[cairo],[1.0.0])
+
+dnl#**********************
+dnl#*** Check for wnck ***
+dnl#**********************
+XDT_CHECK_PACKAGE([LIBWNCK],[libwnck-1.0],[2.20],
 [
-    AC_DEFINE([HAVE_WNCK_TWO_POINT_TWENTY], [1], [Use 2.20 API])
+    AC_DEFINE([HAVE_WNCK_TWO_POINT_TWENTY],[1],[Use 2.20 API])
 ],
 [
-    XDT_CHECK_PACKAGE([LIBWNCK], [libwnck-1.0], [2.12])
+    XDT_CHECK_PACKAGE([LIBWNCK],[libwnck-1.0],[2.12])
 ])
 
-dnl ***********************************
-dnl *** Check for optional packages ***
-dnl ***********************************
+dnl#***********************************
+dnl#*** Check for optional packages ***
+dnl#***********************************
 XDT_CHECK_OPTIONAL_PACKAGE([LIBSTARTUP_NOTIFICATION],
                            [libstartup-notification-1.0],
-                           [0.5], [startup-notification],
-                           [startup notification library], [yes])
+                           [0.5],[startup-notification],
+                           [startup notification library],[yes])
 
 
-dnl *************************
-dnl *** Check for gtk-doc ***
-dnl *************************
+dnl#*************************
+dnl#*** Check for gtk-doc ***
+dnl#*************************
 GTK_DOC_CHECK([1.0])
 
-dnl *************************************
-dnl *** Disable deprecated components ***
-dnl *************************************
-AC_DEFINE([XFCE_DISABLE_DEPRECATED], [1], [Define to 1 to disable deprecated Xfce components])
-AC_DEFINE([G_DISABLE_DEPRECATED], [1], [Define to 1 to disable deprecated Glib components])
-
-dnl ***********************************
-dnl *** Check for debugging support ***
-dnl ***********************************
-AC_ARG_ENABLE([debug],
-AC_HELP_STRING([--enable-debug=@<:@no/minimum/yes/full@:>@], [Turn on debugging @<:@default=panel_debug_default@:>@]),
-  [], [enable_debug=panel_debug_default])
+dnl#*************************************
+dnl#*** Disable deprecated components ***
+dnl#*************************************
+if test "x$I_WANT_TO_DISABLE_DEPRECATED_THINGS_AND_BREAK_MY_BUILD" != "x"; then
+  test ! -z "$I_WANT_TO_DISABLE_DEPRECATED_THINGS_AND_BREAK_MY_BUILD"
+  AC_DEFINE([XFCE_DISABLE_DEPRECATED],[1],[Define to 1 to disable deprecated Xfce components])
+  AC_DEFINE([G_DISABLE_DEPRECATED],[1],[Define to 1 to disable deprecated Glib components])
+else
+  test -z "$I_WANT_TO_DISABLE_DEPRECATED_THINGS_AND_BREAK_MY_BUILD"
+fi
+
+dnl#***********************************
+dnl#*** Check for debugging support ***
+dnl#***********************************
+AC_ARG_ENABLE([debug],[
+AS_HELP_STRING([--enable-debug=@<:@no/minimum/yes/full@:>@],[Turn on debugging @<:@default=panel_debug_default@:>@])],
+  [],[enable_debug=panel_debug_default])
 AC_MSG_CHECKING([whether to enable debugging support])
 if test x"$enable_debug" = x"full" -o x"$enable_debug" = x"yes"; then
-  dnl Print the result
+  dnl# Print the result
   AC_MSG_RESULT([$enable_debug])
 
-  dnl Make sure we detect possible errors (if supported)
+  dnl# Make sure we detect possible errors (if supported)
   save_CFLAGS="$CFLAGS"
   CFLAGS="$CFLAGS -Wall -Werror"
   AC_MSG_CHECKING([whether $CC accepts -Wall -Werror])
-  AC_COMPILE_IFELSE(AC_LANG_SOURCE([int x;]), [
+  AC_COMPILE_IFELSE([AC_LANG_SOURCE([[int x;]])],[
     AC_MSG_RESULT([yes])
     PLATFORM_CFLAGS="$PLATFORM_CFLAGS -Wall -Werror"
-  ], [
+  ],[
     AC_MSG_RESULT([no])
   ])
   CFLAGS="$save_CFLAGS"
 
-  dnl Paranoia for --enable-debug=full
+  dnl# Paranoia for --enable-debug=full
   if test x"$enable_debug" = x"full"; then
-    dnl Enable extensive debugging
+    dnl# Enable extensive debugging
     PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DG_ENABLE_DEBUG"
 
-    dnl Use -O0 -g3 if the compiler supports it
+    dnl# Use -O0 -g3 if the compiler supports it
     save_CFLAGS="$CFLAGS"
     CFLAGS="$CFLAGS -O0 -g3"
     AC_MSG_CHECKING([whether $CC accepts -O0 -g3])
-    AC_COMPILE_IFELSE(AC_LANG_SOURCE([int x;]), [
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[int x;]])],[
       AC_MSG_RESULT([yes])
       PLATFORM_CFLAGS="$PLATFORM_CFLAGS -O0 -g3"
-    ], [
+    ],[
       AC_MSG_RESULT([no])
     ])
     CFLAGS="$save_CFLAGS"
   fi
 else
-  dnl Print the result
+  dnl# Print the result
   AC_MSG_RESULT([$enable_debug])
 
-  dnl Disable debugging (release build)
+  dnl# Disable debugging (release build)
   PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DNDEBUG"
 
-  dnl Disable object cast checks
+  dnl# Disable object cast checks
   PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DG_DISABLE_CAST_CHECKS"
 
-  dnl Disable all checks for --enable-debug=no
+  dnl# Disable all checks for --enable-debug=no
   if test x"$enable_debug" = x"no"; then
     PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
   fi
 fi
 
-dnl ****************************************
-dnl *** Check for ELF visibility support ***
-dnl ****************************************
-AC_ARG_ENABLE([visibility], AC_HELP_STRING([--disable-visibility], [Do not use ELF visibility attributes]), [], [enable_visibility=yes])
+dnl#****************************************
+dnl#*** Check for ELF visibility support ***
+dnl#****************************************
+AC_ARG_ENABLE([visibility],[AS_HELP_STRING([--disable-visibility],[Do not use ELF visibility attributes])],[],[enable_visibility=yes])
 have_gnuc_visibility=no
 if test x"$enable_visibility" != x"no"; then
-  dnl Check whether the compiler supports the visibility attribute
+  dnl# Check whether the compiler supports the visibility attribute
   save_CFLAGS="$CFLAGS"
   CFLAGS="$CFLAGS -Wall -Werror"
   AC_MSG_CHECKING([whether $CC supports the GNUC visibility attribute])
-  AC_COMPILE_IFELSE(AC_LANG_SOURCE(
-  [
+  AC_COMPILE_IFELSE([AC_LANG_SOURCE(
+  [[
     void __attribute__ ((visibility("default"))) test_default (void) {}
     void __attribute__ ((visibility("hidden"))) test_hidden (void) {}
     int main (int argc, char **argv) { test_default (); test_hidden (); return 0; }
-  ]),
+  ]])],
   [
     have_gnuc_visibility=yes
     AC_MSG_RESULT([yes])
@@ -236,11 +274,11 @@
 if test x"$have_gnuc_visibility" = x"yes"; then
   PLATFORM_CPPFLAGS="$PLATFORM_CPPFLAGS -DHAVE_GNUC_VISIBILITY"
 fi
-AM_CONDITIONAL([HAVE_GNUC_VISIBILITY], [test x"$have_gnuc_visibility" = x"yes"])
+AM_CONDITIONAL([HAVE_GNUC_VISIBILITY],[test x"$have_gnuc_visibility" = x"yes"])
 
-dnl *********************************
-dnl *** Substitute platform flags ***
-dnl *********************************
+dnl#*********************************
+dnl#*** Substitute platform flags ***
+dnl#*********************************
 AC_MSG_CHECKING([PLATFORM_CPPFLAGS])
 AC_MSG_RESULT([$PLATFORM_CPPFLAGS])
 AC_SUBST([PLATFORM_CPPFLAGS])
@@ -251,7 +289,55 @@
 AC_MSG_RESULT([$PLATFORM_LDFLAGS])
 AC_SUBST([PLATFORM_LDFLAGS])
 
-AC_OUTPUT([
+dnl# Check a few more headers after the above checks
+if test -d "${prefix}/include/glib-2.0"; then
+  export CPPFLAGS="$CPPFLAGS -I${prefix}/include/glib-2.0"
+elif test -d "/opt/local/include/glib-2.0"; then
+  export CPPFLAGS="$CPPFLAGS -I/opt/local/include/glib-2.0"
+elif test -x `which port`; then
+  AC_MSG_WARN([Cannot find some include directories that might be useful (for glib)])
+fi
+if test -d "${prefix}/lib/glib-2.0/include"; then
+  export CPPFLAGS="$CPPFLAGS -I${prefix}/lib/glib-2.0/include"
+elif test -d "/opt/local/lib/glib-2.0/include"; then
+  export CPPFLAGS="$CPPFLAGS -I/opt/local/lib/glib-2.0/include"
+elif test -x `which port`; then
+  AC_MSG_WARN([Cannot find some include directories that might be useful (for glib)])
+fi
+AC_CHECK_HEADER([glib.h],[
+  AH_BOTTOM([
+#ifdef HAVE_GLIB_H
+# include <glib.h>
+#endif /* HAVE_GLIB_H */
+  ])
+],[
+  AC_CHECK_HEADER([glib-2.0/glib.h],[
+    AH_BOTTOM([
+#ifdef HAVE_GLIB_2_0_GLIB_H
+# include <glib-2.0/glib.h>
+#endif /* HAVE_GLIB_2_0_GLIB_H */
+    ])
+  ],[
+    AC_MSG_WARN([Not having a glib2 header can cause build failures.])
+  ])
+])
+
+if test -d "${prefix}/include/xfce4"; then
+  export CPPFLAGS="$CPPFLAGS -I${prefix}/include/xfce4"
+elif test -d /opt/local/include/xfce4; then
+  export CPPFLAGS="$CPPFLAGS -I/opt/local/include/xfce4"
+elif test -x `which port`; then
+  AC_MSG_WARN([Cannot find some include directories that might be useful (for libxfce4util)])
+fi
+AC_CHECK_HEADER([xfce-desktopentry.h],[],[
+  AC_CHECK_HEADER([libxfce4util/libxfce4util.h],[],[
+    AC_CHECK_HEADER([xfce4/libxfce4util/libxfce4util.h],[],[
+      AC_MSG_WARN([Unable to find a working header for libxfce4util; this might cause build failures.])
+    ])
+  ])
+])
+
+AC_CONFIG_FILES([
 xfce4-panel.spec
 Makefile
 config/Makefile
@@ -284,18 +370,20 @@
 docs/manual/C/Makefile
 docs/manual/C/images/Makefile
 ])
+AC_OUTPUT
 
-dnl ***************************
-dnl *** Print configuration ***
-dnl ***************************
-echo
+dnl#***************************
+dnl#*** Print configuration ***
+dnl#***************************
+echo ""
 echo "Build Configuration:"
-echo
+echo ""
+echo "* Prefix:                        ${prefix}"
 if test x"$LIBSTARTUP_NOTIFICATION_FOUND" = x"yes"; then
-echo "* Startup Notification:          yes"
+  echo "* Startup Notification:          yes"
 else
-echo "* Startup Notification:          no"
+  echo "* Startup Notification:          no"
 fi
 echo "* Debugging Support:             $enable_debug"
 echo "* Dummy Scripts:                 $enable_dummy_scripts"
-echo
+echo ""
