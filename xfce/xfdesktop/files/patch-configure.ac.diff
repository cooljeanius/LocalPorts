--- configure.ac.orig	2010-05-21 13:01:35.000000000 -0400
+++ configure.ac	2014-05-12 14:52:56.000000000 -0400
@@ -1,257 +1,351 @@
-dnl
-dnl This file was autogenerated from "configure.ac.in".
-dnl Edit that file instead!
-dnl
-
-dnl configure.ac
-dnl
-dnl xfdesktop - xfce4's desktop manager
-dnl
-
-dnl version info
-m4_define([xfdesktop_version_major], [4])
-m4_define([xfdesktop_version_minor], [6])
-m4_define([xfdesktop_version_micro], [2])
-m4_define([xfdesktop_version_nano], [])
-m4_define([xfdesktop_version_build], [48febe5])
+dnl#                                               -*- Autoconf -*-
+dnl# Process this file with autoconf to produce a configure script.
+
+dnl#
+dnl# This file was autogenerated from "configure.ac.in".
+dnl# Edit that file instead! (it is not present though)
+dnl#
+
+dnl# configure.ac
+dnl#
+dnl# xfdesktop - xfce4's desktop manager
+dnl#
+
+dnl# version info
+m4_define([xfdesktop_version_major],[4])
+m4_define([xfdesktop_version_minor],[6])
+m4_define([xfdesktop_version_micro],[2])
+m4_define([xfdesktop_version_nano],[])
+m4_define([xfdesktop_version_build],[48febe5])
 m4_define([xfdesktop_version_tag],[])
-m4_define([xfdesktop_version], [xfdesktop_version_major().xfdesktop_version_minor().xfdesktop_version_micro()ifelse(xfdesktop_version_nano(), [], [], [.xfdesktop_version_nano()])ifelse(xfdesktop_version_tag(), [git], [xfdesktop_version_tag()-xfdesktop_version_build()], [xfdesktop_version_tag()])])
+m4_define([xfdesktop_version],[xfdesktop_version_major().xfdesktop_version_minor().xfdesktop_version_micro()ifelse(xfdesktop_version_nano(),[],[],[.xfdesktop_version_nano()])ifelse(xfdesktop_version_tag(),[git],[xfdesktop_version_tag()-xfdesktop_version_build()],[xfdesktop_version_tag()])])
 
-dnl minimum required versions
-m4_define([gtk_minimum_version], [2.10.0])
-m4_define([libxfce4util_minimum_version], [4.6.0])
-m4_define([libxfcegui4_minimum_version], [4.6.0])
-m4_define([xfce_minimum_version], [4.6.0])
-m4_define([xfce4menu_minimum_version], [4.6.0])
-m4_define([exo_minimum_version], [0.3.100])
-m4_define([thunar_minimum_version], [1.0.0])
-m4_define([dbus_minimum_version], [0.34])
-m4_define([wnck_minimum_version], [2.12])
-m4_define([intltool_minimum_version], [0.31])
-m4_define([xfconf_minimum_version], [4.6.0])
+dnl# minimum required versions
+m4_define([gtk_minimum_version],[2.10.0])
+m4_define([libxfce4util_minimum_version],[4.6.0])
+m4_define([libxfcegui4_minimum_version],[4.6.0])
+m4_define([xfce_minimum_version],[4.6.0])
+m4_define([xfce4menu_minimum_version],[4.6.0])
+m4_define([exo_minimum_version],[0.3.100])
+m4_define([thunar_minimum_version],[1.0.0])
+m4_define([dbus_minimum_version],[0.34])
+m4_define([wnck_minimum_version],[2.12])
+m4_define([intltool_minimum_version],[0.31])
+m4_define([xfconf_minimum_version],[4.6.0])
 
-dnl init autoconf
-AC_INIT([xfdesktop], [xfdesktop_version], [http://bugzilla.xfce.org/])
+dnl# init autoconf:
+AC_INIT([xfdesktop],[xfdesktop_version],[http://bugzilla.xfce.org/])
 AC_PREREQ([2.50])
+AC_CANONICAL_TARGET
+AC_OBJEXT
+AC_EXEEXT
 
-dnl init automake
+dnl# init automake:
 XFDESKTOP_VERSION=xfdesktop_version
-AM_INIT_AUTOMAKE([xfdesktop], [$XFDESKTOP_VERSION])
-AM_CONFIG_HEADER([config.h])
+AM_INIT_AUTOMAKE([1.8 dist-bzip2 foreign -Wall])
+AC_CONFIG_SRCDIR([config.h.in])
+AC_CONFIG_HEADERS([config.h])
+AC_CONFIG_MACRO_DIR([m4])
 AM_MAINTAINER_MODE
 
-dnl check for UNIX variants
-AC_AIX
-AC_ISC_POSIX
-AC_MINIX
-AM_CONDITIONAL([HAVE_CYGWIN], [test "`uname | grep \"CYGWIN\"`" != ""])
-
-dnl check for basic programs
-AC_PROG_CC
+dnl# check for UNIX variants:
+AC_USE_SYSTEM_EXTENSIONS
+AC_SEARCH_LIBS([strerror],[cposix]) dnl# used to be AC\_ISC\_POSIX
+AM_CONDITIONAL([HAVE_CYGWIN],[test "`uname | grep \"CYGWIN\"`" != ""])
+
+dnl# check for basic programs:
+AM_PROG_AR
+if test "x${CC}" = "x"; then
+  test -z "${CC}"
+  AC_PROG_CC
+else
+  test ! -z "${CC}" && export CC
+  AC_SUBST([CC])
+  AC_PROG_GCC_TRADITIONAL
+fi
+AC_PROG_CPP
+AC_LANG([C])
+AC_PROG_CXX
 AC_PROG_INSTALL
-AC_PROG_LIBTOOL
-AC_PROG_INTLTOOL([intltool_minimum_version], [no-xml])
+AM_PROG_INSTALL_STRIP
+AC_PROG_LN_S
+LT_INIT([win32-dll])
+LT_LANG([C])
+IT_PROG_INTLTOOL([intltool_minimum_version],[no-xml])
+
+dnl# Checks for libraries.
+LT_LIB_M
+AC_CHECK_LIB([c],[printf])
+AC_CHECK_LIB([glib],[g_module_symbol],[],[
+  AC_CHECK_LIB([glib],[main])
+])
+AC_SEARCH_LIBS([g_module_symbol],
+               [glib glib-2.0 gio gio-2.0 gmodule gmodule-2.0 gobject gobject-2.0 gthread gthread-2.0 girepository])
 
-dnl check for standard header files
-AC_HEADER_STDC
+dnl# check for standard header files
+AC_DEFUN([AC_REQUIRE_HEADER_STDC],[
+  AC_REQUIRE([AC_HEADER_STDC])
+])
+AC_REQUIRE_HEADER_STDC
+AC_PATH_XTRA
 AC_CHECK_HEADERS([ctype.h errno.h fcntl.h math.h signal.h stddef.h \
-                  string.h sys/mman.h sys/stat.h sys/statvfs.h \
-                  sys/types.h sys/wait.h time.h \
-                  unistd.h])
-AC_CHECK_FUNCS([mmap sigaction srandom])
+                  stdio.h sys/mman.h sys/statvfs.h sys/wait.h time.h])
 
-dnl Check for i18n support
-XDT_I18N([am ar ast az be bg bn_IN ca cs da de dz el en_GB eo es_MX es et eu fa fi fr gl gu he hi hu hy id it ja ka kk ko lt lv mk mr ms nb nl nn pa pl pt_BR pt ro ru si sk sq sv ta tr ug uk ur_PK ur vi zh_CN zh_TW ])
+dnl# Checks for typedefs, structures, and compiler characteristics.
+AC_C_BIGENDIAN
+AC_C_INLINE
+AC_C_PROTOTYPES
+
+dnl# Checks for library functions.
+AC_CHECK_FUNCS([memset mkdir mmap sigaction srandom strerror strstr])
+
+dnl# Check for i18n support:
+XDT_I18N([am ar ast az be bg bn_IN ca cs da de dz el en_GB eo es_MX es et eu fa fi fr gl gu he hi hu hy id it ja ka kk ko lt lv mk mr ms nb nl nn pa pl pt_BR pt ro ru si sk sq sv ta tr ug uk ur_PK ur vi zh_CN zh_TW])
+dnl#hack to allow autoreconfing to continue to work:
+undefine([AC_REQUIRE_AUX_FILE])
+AM_ICONV
 
-dnl Check for X11 installed
+dnl# Check for X11 being installed:
 XDT_CHECK_LIBX11_REQUIRE
 XDT_CHECK_LIBSM
 
-dnl required
-XDT_CHECK_PACKAGE([GMODULE], [gmodule-2.0], [gtk_minimum_version])
-XDT_CHECK_PACKAGE([GOBJECT], [gobject-2.0], [gtk_minimum_version])
-XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [gtk_minimum_version])
-XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [gtk_minimum_version])
-XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0],
+dnl# required packages:
+XDT_CHECK_PACKAGE([GMODULE],[gmodule-2.0],[gtk_minimum_version])
+XDT_CHECK_PACKAGE([GOBJECT],[gobject-2.0],[gtk_minimum_version])
+XDT_CHECK_PACKAGE([GTHREAD],[gthread-2.0],[gtk_minimum_version])
+XDT_CHECK_PACKAGE([GTK],[gtk+-2.0],[gtk_minimum_version])
+XDT_CHECK_PACKAGE([LIBXFCE4UTIL],[libxfce4util-1.0],
                   [libxfce4util_minimum_version])
-XDT_CHECK_PACKAGE([LIBXFCEGUI4], [libxfcegui4-1.0],
+XDT_CHECK_PACKAGE([LIBXFCEGUI4],[libxfcegui4-1.0],
                   [libxfcegui4_minimum_version])
-XDT_CHECK_PACKAGE([LIBWNCK], [libwnck-1.0], [wnck_minimum_version])
-XDT_CHECK_PACKAGE([XFCONF], [libxfconf-0], [xfconf_minimum_version])
-XDT_CHECK_PACKAGE([LIBGLADE], [libglade-2.0], [2.0.0])
+XDT_CHECK_PACKAGE([LIBWNCK],[libwnck-1.0],[wnck_minimum_version])
+XDT_CHECK_PACKAGE([XFCONF],[libxfconf-0],[xfconf_minimum_version])
+XDT_CHECK_PACKAGE([LIBGLADE],[libglade-2.0],[2.0.0])
 
-dnl do we want desktop icons at all?
+dnl# do we want desktop icons at all?
 AC_ARG_ENABLE([desktop-icons],
-    [AC_HELP_STRING([--disable-desktop-icons],
-            [Do not compile in support for desktop icons (default=enabled)])],
-        [ac_cv_enable_desktop_icons=$enableval],
+    [AS_HELP_STRING([--disable-desktop-icons],
+                    [Do not compile in support for desktop icons (default=enabled)])],
+        [ac_cv_enable_desktop_icons=${enableval}],
         [ac_cv_enable_desktop_icons=yes])
-if test "x$ac_cv_enable_desktop_icons" = "xno"; then
+if test "x${ac_cv_enable_desktop_icons}" = "xno"; then
     enable_desktop_icons="no"
 else
     enable_desktop_icons="yes"
-    AC_DEFINE([ENABLE_DESKTOP_ICONS], [1], [Set if desktop icon support is enabled])
+    AC_DEFINE([ENABLE_DESKTOP_ICONS],[1],
+              [Set if desktop icon support is enabled])
 fi
-AM_CONDITIONAL([ENABLE_DESKTOP_ICONS], [test "x$enable_desktop_icons" = "xyes"])
+AM_CONDITIONAL([ENABLE_DESKTOP_ICONS],
+               [test "x${enable_desktop_icons}" = "xyes"])
 
-dnl if we want desktop icons, do we also want file icons?
+dnl# if we want desktop icons, do we also want file icons?
 AC_ARG_ENABLE([file-icons],
-    [AC_HELP_STRING([--disable-file-icons],
-            [Do not compile in support for desktop file icons (default=enabled)])],
-        [ac_cv_enable_file_icons=$enableval],
+    [AS_HELP_STRING([--disable-file-icons],
+                    [Do not compile in support for desktop file icons (default=enabled)])],
+        [ac_cv_enable_file_icons=${enableval}],
         [ac_cv_enable_file_icons=yes])
-if test "x$ac_cv_enable_file_icons" = "xno" -o "x$enable_desktop_icons" != "xyes"; then
+if test "x${ac_cv_enable_file_icons}" = "xno" -o "x${enable_desktop_icons}" != "xyes"; then
     enable_file_icons="no"
 else
     enable_file_icons="yes"
 fi
 
-if test "x$enable_desktop_icons" = "xyes" -a "x$enable_file_icons" = "xyes"; then
-    dnl here i shall abuse the XDT_CHECK_PACKAGE macro
-    XDT_CHECK_PACKAGE([THUNAR_VFS], [thunar-vfs-1],
-                      [thunar_minimum_version], [], [
-echo "*** Optional package thunar-vfs-1 was either not found on your system"
-echo "*** or is too old.  Please install or upgrade to at least version"
-echo "*** thunar_minimum_version, or adjust the PKG_CONFIG_PATH environment variable"
-echo "*** if you installed the new version of the package in a nonstandard"
-echo "*** prefix.  File/launcher icons will be disabled."
+if test "x${enable_desktop_icons}" = "xyes" -a "x${enable_file_icons}" = "xyes"; then
+    dnl# here I shall abuse the XDT_CHECK_PACKAGE macro:
+    XDT_CHECK_PACKAGE([THUNAR_VFS],[thunar-vfs-1],
+                      [thunar_minimum_version],[],[
+echo "*** Optional package thunar-vfs-1 was either not found on your"
+echo "*** system, or is too old. Please install or upgrade to at least"
+echo "*** version thunar_minimum_version, or adjust the PKG_CONFIG_PATH"
+echo "*** environment variable if you installed the new version of the"
+echo "*** package in a nonstandard prefix. File/launcher icons will be"
+echo "*** disabled."
 ])
-    XDT_CHECK_PACKAGE([DBUS], [dbus-glib-1], [dbus_minimum_version], [], [
+    XDT_CHECK_PACKAGE([DBUS],[dbus-glib-1],[dbus_minimum_version],[],[
 echo "*** Optional package dbus-glib-1 was either not found on your system"
-echo "*** or is too old.  Please install or upgrade to at least version"
-echo "*** dbus_minimum_version, or adjust the PKG_CONFIG_PATH environment variable"
-echo "*** if you installed the new version of the package in a nonstandard"
-echo "*** prefix.  File/launcher icons will be disabled."
+echo "*** or is too old. Please install or upgrade to at least version"
+echo "*** dbus_minimum_version, or adjust the PKG_CONFIG_PATH"
+echo "*** environment variable if you installed the new version of the"
+echo "*** package in a nonstandard prefix. File/launcher icons will be"
+echo "*** disabled."
 ])
     enable_file_icons="no"
-    if test "x$THUNAR_VFS_VERSION" != "x"; then
+    if test "x${THUNAR_VFS_VERSION}" != "x"; then
         already_have_thunar_vfs=yes
         
-        if test "x$DBUS_VERSION" != "x"; then
+        if test "x${DBUS_VERSION}" != "x"; then
             enable_file_icons="yes"
-            AC_DEFINE([ENABLE_FILE_ICONS], [1],
+            AC_DEFINE([ENABLE_FILE_ICONS],[1],
                       [Define if file icons should be enabled])
         fi
     fi
 fi
 
-AM_CONDITIONAL([ENABLE_FILE_ICONS], [test "x$enable_file_icons" = "xyes"])
+AM_CONDITIONAL([ENABLE_FILE_ICONS],[test "x${enable_file_icons}" = "xyes"])
 
+dnl# I would rather have these two only checked conditionally, but this
+dnl# macro also calls AM_CONDITIONAL(), which cannot be in an 'if' block
 
-dnl i'd rather have these two only checked conditionally, but this macro also
-dnl calls AM_CONDITIONAL(), which cannot be in an 'if' block
-
-XDT_CHECK_OPTIONAL_PACKAGE([THUNARX], [thunarx-1], [thunar_minimum_version],
+XDT_CHECK_OPTIONAL_PACKAGE([THUNARX],[thunarx-1],[thunar_minimum_version],
     [thunarx],
     [Thunar's extension mechanism, to add external features to the desktop icon implementation])
-XDT_CHECK_OPTIONAL_PACKAGE([LIBEXO], [exo-0.3], [exo_minimum_version], [exo],
+XDT_CHECK_OPTIONAL_PACKAGE([LIBEXO],[exo-0.3],[exo_minimum_version],[exo],
     [libexo, for nifty icon effects])
 
 
 AC_ARG_ENABLE([desktop-menu],
-        AC_HELP_STRING([--disable-desktop-menu],
-                [Do not build the desktop menu module (default=enabled)]),
-        [ac_cv_enable_desktop_menu=$enableval],
+        [AS_HELP_STRING([--disable-desktop-menu],
+                        [Do not build the desktop menu module (default=enabled)])],
+        [ac_cv_enable_desktop_menu=${enableval}],
         [ac_cv_enable_desktop_menu=yes])
-if test "x$ac_cv_enable_desktop_menu" = "xno"; then
+if test "x${ac_cv_enable_desktop_menu}" = "xno"; then
     build_desktop_menu="no"
 else
-    dnl time for more abuse!
-    XDT_CHECK_PACKAGE([LIBXFCE4MENU], [libxfce4menu-0.1],
-                      [xfce4menu_minimum_version], [build_desktop_menu="yes"],
+    dnl# time for more abuse:
+    XDT_CHECK_PACKAGE([LIBXFCE4MENU],[libxfce4menu-0.1],
+                      [xfce4menu_minimum_version],
+                      [build_desktop_menu="yes"],
                       [
-echo "*** Optional package libxfce4menu-0.1 was either not found on your system"
-echo "*** or is too old.  Please install or upgrade to at least version"
-echo "*** xfce4menu_minimum_version, or adjust the PKG_CONFIG_PATH environment variable"
-echo "*** if you installed the new version of the package in a nonstandard"
-echo "*** prefix.  Desktop menu will be disabled."
+echo "*** Optional package libxfce4menu-0.1 was either not found on your"
+echo "*** system or is too old. Please install or upgrade to at least"
+echo "*** version xfce4menu_minimum_version, or adjust the PKG_CONFIG_PATH"
+echo "*** environment variable if you installed the new version of the"
+echo "*** package in a nonstandard prefix. Desktop menu will be disabled."
 build_desktop_menu="no"
 ])
-    if test "x$build_desktop_menu" = "xyes"; then
-        AC_DEFINE([USE_DESKTOP_MENU], [1],
+    if test "x${build_desktop_menu}" = "xyes"; then
+        AC_DEFINE([USE_DESKTOP_MENU],[1],
                   [Define if we should build the desktop menu module])
     fi
 fi
-AM_CONDITIONAL([BUILD_DESKTOP_MENU], [test "x$build_desktop_menu" = "xyes"])
+AM_CONDITIONAL([BUILD_DESKTOP_MENU],
+               [test "x${build_desktop_menu}" = "xyes"])
 
-dnl time for more abuse.  if we don't yet have thunar-vfs, we still might want
-dnl it for desktop menu directory monitoring.
+dnl# time for more abuse. If we do NOT yet have thunar-vfs, we still might
+dnl# want it for desktop menu directory monitoring.
 AC_ARG_ENABLE([desktop-menu-dir-monitor],
-              [AC_HELP_STRING([--disable-desktop-menu-dir-monitor],
-                              [Don't use thunar-vfs to monitor menu files to automatically update the desktop menu when needed. (default=enabled)])],
-              [want_thunar_vfs=$enableval],
+              [AS_HELP_STRING([--disable-desktop-menu-dir-monitor],
+                              [Do NOT use thunar-vfs to monitor menu files to automatically update the desktop menu when needed. (default=enabled)])],
+              [want_thunar_vfs=${enableval}],
               [want_thunar_vfs=yes])
-if test "x$want_thunar_vfs" = "xyes" -a "x$build_desktop_menu" = "xyes"; then
-    if test "x$already_have_thunar_vfs" != "xyes"; then
-        XDT_CHECK_PACKAGE([THUNAR_VFS], [thunar-vfs-1],
-                          [thunar_minimum_version], [have_thunar_vfs=yes], [
-echo "*** Optional package thunar-vfs-1 was either not found on your system"
-echo "*** or is too old.  Please install or upgrade to at least version"
-echo "*** thunar_minimum_version, or adjust the PKG_CONFIG_PATH environment variable"
-echo "*** if you installed the new version of the package in a nonstandard"
-echo "*** prefix.  Desktop menu directory monitoring will be disabled."
+if test "x${want_thunar_vfs}" = "xyes" -a "x${build_desktop_menu}" = "xyes"; then
+    if test "x${already_have_thunar_vfs}" != "xyes"; then
+        XDT_CHECK_PACKAGE([THUNAR_VFS],[thunar-vfs-1],
+                          [thunar_minimum_version],[have_thunar_vfs=yes],[
+echo "*** Optional package thunar-vfs-1 was either not found on your"
+echo "*** system, or is too old. Please install or upgrade to at least"
+echo "*** version thunar_minimum_version, or adjust the PKG_CONFIG_PATH"
+echo "*** environment variable if you installed the new version of the"
+echo "*** package in a nonstandard prefix. Desktop menu directory"
+echo "*** monitoring will be disabled."
 ])
     fi
 
-    if test "x$have_thunar_vfs" = "xyes" \
-       -o "x$already_have_thunar_vfs" = "xyes"
+    if test "x${have_thunar_vfs}" = "xyes" \
+       -o "x${already_have_thunar_vfs}" = "xyes"
     then
-        AC_DEFINE([HAVE_THUNAR_VFS], [1], [Define if thunar-vfs is present.])
+        AC_DEFINE([HAVE_THUNAR_VFS],[1],[Define if thunar-vfs is present.])
     fi
 fi
 
 AC_ARG_ENABLE([panel-plugin],
-        [AC_HELP_STRING([--disable-panel-plugin],
-                [Do not build the panel plugin (default=enabled)])],
-        [ac_cv_enable_panel_plugin=$enableval],
+        [AS_HELP_STRING([--disable-panel-plugin],
+                        [Do not build panel plugin (default=enabled)])],
+        [ac_cv_enable_panel_plugin=${enableval}],
         [ac_cv_enable_panel_plugin=yes])
-if test "x$ac_cv_enable_panel_plugin" = "xno" -o "x$build_desktop_menu" = "xno"; then
+if test "x${ac_cv_enable_panel_plugin}" = "xno" -o "x${build_desktop_menu}" = "xno"; then
         build_panel_plugin="no"
 else
         build_panel_plugin="yes"
-        XDT_CHECK_PACKAGE([LIBXFCE4PANEL], [libxfce4panel-1.0],
-                          [xfce_minimum_version])
+        dnl# time for more abuse:
+        XDT_CHECK_PACKAGE([LIBXFCE4PANEL],[libxfce4panel-1.0],
+                          [xfce_minimum_version],
+                          [build_panel_plugin="yes"],
+                          [
+echo "*** Optional package libxfce4panel-1.0 was either not found on your"
+echo "*** system, or is too old. Please install or upgrade to at least"
+echo "*** version xfce_minimum_version, or adjust the PKG_CONFIG_PATH"
+echo "*** environment variable if you installed the new version of the"
+echo "*** package in a nonstandard prefix. The panel plugin will be"
+echo "*** disabled."
+build_panel_plugin="no"
+])
 fi
-AM_CONDITIONAL([BUILD_PANEL_PLUGIN], [test "x$build_panel_plugin" = "xyes"])
+AM_CONDITIONAL([BUILD_PANEL_PLUGIN],
+               [test "x${build_panel_plugin}" = "xyes"])
 
 AC_ARG_WITH([file-manager-fallback],
-    [AC_HELP_STRING([--with-file-manager-fallback=PATH],
-            [Default file manager fallback to handle external folders and applications (default=Thunar)])],
-    [ac_cv_file_manager_fallback="$withval"],
+    [AS_HELP_STRING([--with-file-manager-fallback=PATH],
+                    [Default file manager fallback to handle external folders and applications (default=Thunar)])],
+    [ac_cv_file_manager_fallback="${withval}"],
     [ac_cv_file_manager_fallback=Thunar])
-AC_DEFINE_UNQUOTED([FILE_MANAGER_FALLBACK], ["$ac_cv_file_manager_fallback"],
-    [Set to the file manager to use as a fallback])
+AC_DEFINE_UNQUOTED([FILE_MANAGER_FALLBACK],
+                   ["${ac_cv_file_manager_fallback}"],
+                   [Set to the file manager to use as a fallback])
 
-dnl xsltproc support (to generate html docs)
+dnl# xsltproc support (to generate html docs)
 AC_ARG_ENABLE([xsltproc],
-              [AC_HELP_STRING([--enable-xsltproc],
+              [AS_HELP_STRING([--enable-xsltproc],
                               [Use xsltproc to generate HTML documentation @<:@default=no@:>@])],
-                              , [enable_xsltproc=no])
-if test "x$enable_xsltproc" = "xyes"; then
-    AC_PATH_PROG([XSLTPROC], [xsltproc], [no])
-    if test "x$XSLTPROC" = "xno"; then
+                              [],[enable_xsltproc=no])
+if test "x${enable_xsltproc}" = "xyes"; then
+    AC_PATH_PROG([XSLTPROC],[xsltproc],[no])
+    if test "x${XSLTPROC}" = "xno"; then
         AC_MSG_FAILURE([*** xsltproc was requested, but not found.])
     fi
 fi
-AM_CONDITIONAL([HAVE_XSLTPROC], [test "x$enable_xsltproc" = "xyes"])
+AM_CONDITIONAL([HAVE_XSLTPROC],[test "x${enable_xsltproc}" = "xyes"])
 
-dnl xml2po support (for docs translations)
+dnl# xml2po support (for docs translations)
 AC_ARG_ENABLE([xml2po],
-              [AC_HELP_STRING([--enable-xml2po],
+              [AS_HELP_STRING([--enable-xml2po],
                               [Use xml2po to translate documentation @<:@default=no@:>@])],
-              [], [enable_xml2po=no])
-if test "x$enable_xml2po" = "xyes"; then
-    AC_PATH_PROG([XML2PO], [xml2po], [no])
-    if test "x$XML2PO" = "xno"; then
+              [],[enable_xml2po=no])
+if test "x${enable_xml2po}" = "xyes"; then
+    AC_PATH_PROG([XML2PO],[xml2po],[no])
+    if test "x${XML2PO}" = "xno"; then
         AC_MSG_FAILURE([*** xml2po was requested, but not found.])
     fi
 fi
-AM_CONDITIONAL([ENABLE_XML2PO], [test "x$enable_xml2po" = "xyes"])
+AM_CONDITIONAL([ENABLE_XML2PO],[test "x${enable_xml2po}" = "xyes"])
 
-dnl check for debugging support
+dnl# check for debugging support:
 XDT_FEATURE_DEBUG
 
-AC_OUTPUT([
+dnl# Check a few more headers after the above checks:
+if test -d "${prefix}/include/glib-2.0"; then
+  export CPPFLAGS="${CPPFLAGS} -I${prefix}/include/glib-2.0"
+elif test -d "/opt/local/include/glib-2.0"; then
+  export CPPFLAGS="${CPPFLAGS} -I/opt/local/include/glib-2.0"
+elif test -x "`which port`"; then
+  AC_MSG_WARN([Cannot find some include directories that might be useful (for glib)])
+fi
+if test -d "${prefix}/lib/glib-2.0/include"; then
+  export CPPFLAGS="${CPPFLAGS} -I${prefix}/lib/glib-2.0/include"
+elif test -d "/opt/local/lib/glib-2.0/include"; then
+  export CPPFLAGS="${CPPFLAGS} -I/opt/local/lib/glib-2.0/include"
+elif test -x "`which port`"; then
+  AC_MSG_WARN([Cannot find some include directories that might be useful (for glib)])
+fi
+AC_CHECK_HEADER([glib.h],[
+  AH_BOTTOM([
+#ifdef HAVE_GLIB_H
+# include <glib.h>
+#endif /* HAVE_GLIB_H */
+  ])
+],[
+  AC_CHECK_HEADER([glib-2.0/glib.h],[
+    AH_BOTTOM([
+#ifdef HAVE_GLIB_2_0_GLIB_H
+# include <glib-2.0/glib.h>
+#endif /* HAVE_GLIB_2_0_GLIB_H */
+    ])
+  ],[
+    AC_MSG_WARN([Not having a glib2 header can cause build failures.])
+  ])
+])
+
+AC_CONFIG_FILES([
 Makefile
 backdrops/Makefile
 common/Makefile
@@ -295,11 +389,12 @@
 src/Makefile
 xfdesktop.spec
 ])
+AC_OUTPUT
 
-echo
+echo ""
 echo "Build Configuration:"
-echo "  Build desktop menu module:                    $build_desktop_menu"
-echo "  Build desktop menu panel plugin:              $build_panel_plugin"
-echo "  Build support for desktop icons:              $enable_desktop_icons"
-echo "      Include support for file/launcher icons:  $enable_file_icons"
-echo
+echo "  Build desktop menu module:                 ${build_desktop_menu}"
+echo "  Build desktop menu panel plugin:           ${build_panel_plugin}"
+echo "  Build support for desktop icons:           ${enable_desktop_icons}"
+echo "    Include support for file/launcher icons: ${enable_file_icons}"
+echo ""
