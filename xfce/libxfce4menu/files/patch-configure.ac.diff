--- configure.ac.orig	2010-05-21 12:53:23.000000000 -0400
+++ configure.ac	2014-05-12 11:32:51.000000000 -0400
@@ -1,69 +1,71 @@
-dnl
-dnl This file was autogenerated from "configure.in.in".
-dnl Edit that file instead!
-dnl
-
-dnl $Id$
-dnl
-dnl Copyright (c) 2007 The Xfce development team.
-dnl All rights reserved.
-dnl
-dnl Written for Xfce by Jannis Pohlmann <jannis@xfce.org>.
-dnl
-
-dnl ***************************
-dnl *** Version information ***
-dnl ***************************
+dnl#
+dnl# This file was autogenerated from "configure.in.in".
+dnl# Edit that file instead! (it is not present though)
+dnl#
+
+dnl# $Id$
+dnl#
+dnl# Copyright (c) 2007 The Xfce development team.
+dnl# All rights reserved.
+dnl#
+dnl# Written for Xfce by Jannis Pohlmann <jannis@xfce.org>.
+dnl#
+
+dnl#***************************
+dnl#*** Version information ***
+dnl#***************************
 m4_define([libxfce4menu_verinfo], [0:0:0])
-m4_define([libxfce4menu_version_api_major], [0])
-m4_define([libxfce4menu_version_api_minor], [1])
-m4_define([libxfce4menu_version_major], [4])
-m4_define([libxfce4menu_version_minor], [6])
-m4_define([libxfce4menu_version_micro], [2])
-m4_define([libxfce4menu_version_nano], [])
-m4_define([libxfce4menu_version_build], [5dd7c77])
-m4_define([libxfce4menu_version_tag], [])
-m4_define([libxfce4menu_version], [libxfce4menu_version_major().libxfce4menu_version_minor().libxfce4menu_version_micro()ifelse(libxfce4menu_version_nano(), [], [], [.libxfce4menu_version_nano()])ifelse(libxfce4menu_version_tag(), [git], [libxfce4menu_version_tag()-libxfce4menu_version_build()], [libxfce4menu_version_tag()])])
-
-dnl ********************************************
-dnl *** Full debug support for GIT snapshots ***
-dnl ********************************************
-m4_define([libxfce4menu_debug_default], [ifelse(libxfce4menu_version_tag(), [git], [full], [minimum])])
-
-dnl ***************************
-dnl *** Initialize autoconf ***
-dnl ***************************
+m4_define([libxfce4menu_version_api_major],[0])
+m4_define([libxfce4menu_version_api_minor],[1])
+m4_define([libxfce4menu_version_major],[4])
+m4_define([libxfce4menu_version_minor],[6])
+m4_define([libxfce4menu_version_micro],[2])
+m4_define([libxfce4menu_version_nano],[])
+m4_define([libxfce4menu_version_build],[5dd7c77])
+m4_define([libxfce4menu_version_tag],[])
+m4_define([libxfce4menu_version],[libxfce4menu_version_major().libxfce4menu_version_minor().libxfce4menu_version_micro()ifelse(libxfce4menu_version_nano(),[],[],[.libxfce4menu_version_nano()])ifelse(libxfce4menu_version_tag(),[git],[libxfce4menu_version_tag()-libxfce4menu_version_build()],[libxfce4menu_version_tag()])])
+
+dnl#********************************************
+dnl#*** Full debug support for GIT snapshots ***
+dnl#********************************************
+m4_define([libxfce4menu_debug_default],[ifelse(libxfce4menu_version_tag(),[git],[full],[minimum])])
+
+dnl#***************************
+dnl#*** Initialize autoconf ***
+dnl#***************************
 AC_COPYRIGHT([Copyright (c) 2009 The Xfce development team.
 All rights reserved.
         
 Written for Xfce by Jannis Pohlmann <jannis@xfce.org>.])
-AC_INIT([libxfce4menu], [libxfce4menu_version], [http://bugzilla.xfce.org/])
-AC_PREREQ([2.50])
+AC_INIT([libxfce4menu],[libxfce4menu_version],[http://bugzilla.xfce.org/])
+AC_PREREQ([2.69])
 AC_REVISION([$Id$])
-AC_CANONICAL_TARGET()
+AC_CANONICAL_TARGET([])
 
-dnl ***************************
-dnl *** Initialize automake ***
-dnl ***************************
-AM_INIT_AUTOMAKE([AC_PACKAGE_TARNAME()], [AC_PACKAGE_VERSION()])
-AM_CONFIG_HEADER([config.h])
-AM_MAINTAINER_MODE()
-
-dnl **************************
-dnl *** Libtool versioning ***
-dnl **************************
+dnl#***************************
+dnl#*** Initialize automake ***
+dnl#***************************
+AC_CONFIG_SRCDIR([config.h.in])
+AC_CONFIG_MACRO_DIR([m4])
+AM_INIT_AUTOMAKE([1.11 dist-bzip2])
+AC_CONFIG_HEADERS([config.h])
+AM_MAINTAINER_MODE([])
+
+dnl#**************************
+dnl#*** Libtool versioning ***
+dnl#**************************
 LIBXFCE4MENU_VERINFO=libxfce4menu_verinfo()
 AC_SUBST([LIBXFCE4MENU_VERINFO])
 
-dnl ****************************
-dnl *** Subst libxfce4menu version ***
-dnl ****************************
+dnl#**********************************
+dnl#*** Subst libxfce4menu version ***
+dnl#**********************************
 LIBXFCE4MENU_VERSION_MAJOR=libxfce4menu_version_major()
 LIBXFCE4MENU_VERSION_MINOR=libxfce4menu_version_minor()
 LIBXFCE4MENU_VERSION_MICRO=libxfce4menu_version_micro()
 LIBXFCE4MENU_VERSION_API_MAJOR=libxfce4menu_version_api_major()
 LIBXFCE4MENU_VERSION_API_MINOR=libxfce4menu_version_api_minor()
-LIBXFCE4MENU_VERSION_API=$LIBXFCE4MENU_VERSION_API_MAJOR.$LIBXFCE4MENU_VERSION_API_MINOR
+LIBXFCE4MENU_VERSION_API=${LIBXFCE4MENU_VERSION_API_MAJOR}.${LIBXFCE4MENU_VERSION_API_MINOR}
 AC_SUBST([LIBXFCE4MENU_VERSION_MAJOR])
 AC_SUBST([LIBXFCE4MENU_VERSION_MINOR])
 AC_SUBST([LIBXFCE4MENU_VERSION_MICRO])
@@ -71,141 +73,192 @@
 AC_SUBST([LIBXFCE4MENU_VERSION_API_MINOR])
 AC_SUBST([LIBXFCE4MENU_VERSION_API])
 
-dnl *******************************
-dnl *** Check for UNIX variants ***
-dnl *******************************
-AC_AIX()
-AC_ISC_POSIX()
-AC_MINIX()
-
-dnl ********************************
-dnl *** Check for basic programs ***
-dnl ********************************
-AM_PROG_AS()
-AC_PROG_CC()
-AC_PROG_INSTALL()
-AC_PROG_INTLTOOL([0.31], [no-xml])
-AC_PROG_LIBTOOL()
-AM_PROG_CC_C_O()
-
-dnl ***********************************************
-dnl *** Determine the u32 type required for tdb ***
-dnl ***********************************************
+dnl#*******************************
+dnl#*** Check for UNIX variants ***
+dnl#*******************************
+AC_USE_SYSTEM_EXTENSIONS
+AC_SEARCH_LIBS([strerror],[cposix]) dnl# used to be AC\_ISC\_POSIX
+
+dnl#********************************
+dnl#*** Check for basic programs ***
+dnl#********************************
+AM_PROG_AR
+AM_PROG_AS([])
+if test "x${CC}" = "x"; then
+  test -z "${CC}"
+  AC_PROG_CC
+else
+  test ! -z "${CC}"
+  AC_PROG_GCC_TRADITIONAL
+fi
+AC_PROG_CPP
+AC_PROG_INSTALL([])
+IT_PROG_INTLTOOL([0.31],[no-xml])
+LT_INIT([])
+AM_PROG_CC_C_O([])
+
+dnl# Checks for libraries.
+LT_LIB_M
+AC_SEARCH_LIBS([g_value_get_string],
+               [glib glib-2.0 gio gio-2.0 gmodule gmodule-2.0 gobject gobject-2.0 gthread gthread-2.0 girepository])
+AC_PATH_XTRA
+
+dnl#***********************************************
+dnl#*** Determine the u32 type required for tdb ***
+dnl#***********************************************
 AC_CHECK_SIZEOF([int])
+AC_CHECK_ALIGNOF([int])
 AC_CHECK_SIZEOF([long])
+AC_CHECK_ALIGNOF([long])
 AC_CHECK_SIZEOF([short])
+AC_CHECK_ALIGNOF([short])
 AC_MSG_CHECKING([for 32bit unsigned integer])
 case 4 in
-$ac_cv_sizeof_int)   TDB_U32_TYPE="unsigned int" ;;
-$ac_cv_sizeof_long)  TDB_U32_TYPE="unsigned long" ;;
-$ac_cv_sizeof_short) TDB_U32_TYPE="unsigned short" ;;
+${ac_cv_sizeof_int})   TDB_U32_TYPE="unsigned int" ;;
+${ac_cv_sizeof_long})  TDB_U32_TYPE="unsigned long" ;;
+${ac_cv_sizeof_short}) TDB_U32_TYPE="unsigned short" ;;
 esac
 AC_SUBST([TDB_U32_TYPE])
-AC_MSG_RESULT([$TDB_U32_TYPE])
+AC_MSG_RESULT([${TDB_U32_TYPE}])
 
-dnl ***************************************
-dnl *** Check for standard header files ***
-dnl ***************************************
-AC_HEADER_STDC()
-AC_CHECK_HEADERS([fcntl.h errno.h sys/mman.h sys/stat.h sys/wait.h memory.h \
-		  stdlib.h stdio.h string.h sys/types.h sys/time.h unistd.h \
-		  time.h stdarg.h sys/types.h sys/uio.h sched.h ctype.h])
-
-dnl ************************************
-dnl *** Check for standard functions ***
-dnl ************************************
-AC_FUNC_MMAP()
-dnl AC_CHECK_FUNCS([])
-
-dnl ******************************
-dnl *** Check for i18n support ***
-dnl ******************************
-XDT_I18N([am ast ca cs da de el en_GB es eu fi fr gl hu id it ja kk ku lv nb nl nn pa pl pt_BR pt ro ru sq sv tr ug uk ur_PK ur zh_CN ], [libxfce4menu-libxfce4menu_version_api_major().libxfce4menu_version_api_minor()])
-
-dnl ***********************************
-dnl *** Check for required packages ***
-dnl ***********************************
-XDT_CHECK_PACKAGE([GLIB], [glib-2.0], [2.6.0])
-XDT_CHECK_PACKAGE([GTK], [gtk+-2.0], [2.6.0])
-XDT_CHECK_PACKAGE([GTHREAD], [gthread-2.0], [2.6.0])
-XDT_CHECK_PACKAGE([LIBXFCE4UTIL], [libxfce4util-1.0], [4.6.0])
-
-dnl *************************
-dnl *** Check for gtk-doc ***
-dnl *************************
+dnl#***************************************
+dnl#*** Check for standard header files ***
+dnl#***************************************
+AC_HEADER_STAT
+AC_HEADER_SYS_WAIT
+AC_HEADER_TIME
+AC_CHECK_HEADERS([fcntl.h errno.h sys/mman.h stdio.h sys/time.h time.h \
+                  stdarg.h sys/uio.h sched.h ctype.h])
+
+dnl# Checks for typedefs, structures, and compiler characteristics.
+AC_C_BIGENDIAN
+AC_C_INLINE
+AC_C_PROTOTYPES
+AC_TYPE_MODE_T
+AC_TYPE_OFF_T
+AC_TYPE_SIZE_T
+AC_TYPE_SSIZE_T
+AC_TYPE_UID_T
+AC_TYPE_UINT32_T
+
+dnl#************************************
+dnl#*** Check for standard functions ***
+dnl#************************************
+AC_FUNC_FORK
+AC_FUNC_MALLOC
+AC_FUNC_MMAP([])
+AC_FUNC_REALLOC
+AC_CHECK_FUNCS([ftruncate gettimeofday memset munmap printf \
+                strchr strdup strerror system])
+
+dnl#******************************
+dnl#*** Check for i18n support ***
+dnl#******************************
+XDT_I18N([am ast ca cs da de el en_GB es eu fi fr gl hu id it ja kk ku lv nb nl nn pa pl pt_BR pt ro ru sq sv tr ug uk ur_PK ur zh_CN ],
+[libxfce4menu-libxfce4menu_version_api_major().libxfce4menu_version_api_minor()])
+dnl#hack to allow autoreconfing to continue to work:
+undefine([AC_REQUIRE_AUX_FILE])
+AM_ICONV
+
+dnl#***********************************
+dnl#*** Check for required packages ***
+dnl#***********************************
+XDT_CHECK_PACKAGE([GLIB],[glib-2.0],[2.6.0])
+XDT_CHECK_PACKAGE([GTK],[gtk+-2.0],[2.6.0])
+XDT_CHECK_PACKAGE([GIO],[gio-2.0],[2.6.0])
+XDT_CHECK_PACKAGE([GTHREAD],[gthread-2.0],[2.6.0])
+XDT_CHECK_PACKAGE([GMODULE],[gmodule-2.0],[2.6.0])
+XDT_CHECK_PACKAGE([GOBJECT],[gobject-2.0],[2.6.0])
+XDT_CHECK_PACKAGE([LIBXFCE4UTIL],[libxfce4util-1.0],[4.6.0])
+AM_PATH_GLIB_2_0([2.6.0],[],[],[gobject])
+
+dnl#*************************
+dnl#*** Check for gtk-doc ***
+dnl#*************************
 GTK_DOC_CHECK([1.0])
 
-dnl ***********************************
-dnl *** Check for debugging support ***
-dnl ***********************************
-AC_ARG_ENABLE([debug],
-AC_HELP_STRING([--enable-debug=@<:@no/minimum/yes@:>@], [Turn on debugging @<:@default=libxfce4menu_debug_default@:>@]),
-  [], [enable_debug=libxfce4menu_debug_default])
+dnl#***********************************
+dnl#*** Check for debugging support ***
+dnl#***********************************
+AC_ARG_ENABLE([debug],[
+AS_HELP_STRING([--enable-debug=@<:@no/minimum/yes@:>@],
+               [Turn on debugging @<:@default=libxfce4menu_debug_default@:>@])],
+  [],[enable_debug=libxfce4menu_debug_default])
 AC_MSG_CHECKING([whether to enable debugging support])
-if test x"$enable_debug" = x"yes" -o x"$enable_debug" = x"full"; then
-  dnl Print the result
+if test x"${enable_debug}" = x"yes" -o x"${enable_debug}" = x"full"; then
+  dnl# Print the result:
   AC_MSG_RESULT([$enable_debug])
 
-  dnl Make sure we detect possible errors (if supported)
-  save_CFLAGS="$CFLAGS"
-  CFLAGS="$CFLAGS -Wall -Werror"
-  AC_MSG_CHECKING([whether $CC accepts -Wall -Werror])
-  AC_COMPILE_IFELSE(AC_LANG_SOURCE([int x;]), [
+  dnl# Make sure we detect possible errors (if supported), but do NOT
+  dnl# actually cause them to be actual errors though:
+  save_CFLAGS="${CFLAGS}"
+  CFLAGS="${CFLAGS} -Wall"
+  AC_MSG_CHECKING([whether ${CC} accepts -Wall])
+  AC_COMPILE_IFELSE([AC_LANG_SOURCE([[int x;]])],[
     AC_MSG_RESULT([yes])
-  ], [
-    CFLAGS="$save_CFLAGS"
+  ],[
+    CFLAGS="${save_CFLAGS}"
     AC_MSG_RESULT([no])
   ])
 
-  dnl Paranoia for --enable-debug=full
-  if test x"$enable_debug" = x"full"; then
-    dnl Enable extensive debugging
-    CFLAGS="$CFLAGS -DG_ENABLE_DEBUG"
-
-    dnl Use -O0 -g3 if the compiler supports it
-    save_CFLAGS="$CFLAGS"
-    CFLAGS="$CFLAGS -O0 -g3"
-    AC_MSG_CHECKING([whether $CC accepts -O0 -g3])
-    AC_COMPILE_IFELSE(AC_LANG_SOURCE([int x;]), [
+  dnl# Paranoia for --enable-debug=full with this:
+  if test x"${enable_debug}" = x"full"; then
+    dnl# Enable extensive debugging:
+    CFLAGS="${CFLAGS} -DG_ENABLE_DEBUG"
+
+    dnl# Use -O0 -g3 if the compiler supports it, and -ggdb3 if gdb is
+    dnl# present:
+    if test -x "`which gdb`"; then
+      GDBFLAG="-ggdb3"
+    else
+      GDBFLAG=""
+    fi
+    save_CFLAGS="${CFLAGS}"
+    CFLAGS="${CFLAGS} -O0 -g3 ${GDBFLAG}"
+    AC_MSG_CHECKING([whether ${CC} accepts '-O0 -g3 ${GDBFLAG}'])
+    AC_COMPILE_IFELSE([AC_LANG_SOURCE([[int x;]])],[
       AC_MSG_RESULT([yes])
-    ], [
-      CFLAGS="$save_CFLAGS"
+      PLATFORM_CFLAGS="${PLATFORM_CFLAGS} -O0 -g3 ${GDBFLAG}"
+    ],[
+      CFLAGS="${save_CFLAGS}"
       AC_MSG_RESULT([no])
     ])
   fi
 else
-  dnl Print the result
-  AC_MSG_RESULT([$enable_debug])
+  dnl# Print the result:
+  AC_MSG_RESULT([${enable_debug}])
 
-  dnl Disable debugging (release build)
-  CFLAGS="$CFLAGS -DNDEBUG"
+  dnl# Disable debugging (release build) with this:
+  CFLAGS="${CFLAGS} -DNDEBUG"
 
-  dnl Disable object cast checks
-  CFLAGS="$CFLAGS -DG_DISABLE_CAST_CHECKS"
+  dnl# Disable object cast checks:
+  CFLAGS="${CFLAGS} -DG_DISABLE_CAST_CHECKS"
 
-  dnl Disable all checks for --enable-debug=no
-  if test x"$enable_debug" = x"no"; then
-    CFLAGS="$CFLAGS -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
+  dnl# Disable all checks for --enable-debug=no with this:
+  if test x"${enable_debug}" = x"no"; then
+    CFLAGS="${CFLAGS} -DG_DISABLE_ASSERT -DG_DISABLE_CHECKS"
   fi
 fi
 
-dnl **************************************
-dnl *** Check for linker optimizations ***
-dnl **************************************
-AC_MSG_CHECKING([whether $LD accepts --as-needed])
-case `$LD --as-needed -v 2>&1 </dev/null` in
+dnl#**************************************
+dnl#*** Check for linker optimizations ***
+dnl#**************************************
+AC_MSG_CHECKING([whether ${LD} accepts --as-needed])
+case `${LD} --as-needed -v 2>&1 </dev/null` in
 *GNU* | *'with BFD'*)
-  LDFLAGS="$LDFLAGS -Wl,--as-needed"
+  LDFLAGS="${LDFLAGS} -Wl,--as-needed"
+  PLATFORM_LDFLAGS="${PLATFORM_LDFLAGS} -Wl,--as-needed"
   AC_MSG_RESULT([yes])
   ;;
 *)
   AC_MSG_RESULT([no])
   ;;
 esac
-AC_MSG_CHECKING([whether $LD accepts -O1])
-case `$LD -O1 -v 2>&1 </dev/null` in
+AC_MSG_CHECKING([whether ${LD} accepts -O1])
+case `${LD} -O1 -v 2>&1 </dev/null` in
 *GNU* | *'with BFD'*)
-  LDFLAGS="$LDFLAGS -Wl,-O1"
+  LDFLAGS="${LDFLAGS} -Wl,-O1"
+  PLATFORM_LDFLAGS="${PLATFORM_LDFLAGS} -Wl,-O1"
   AC_MSG_RESULT([yes])
   ;;
 *)
@@ -213,7 +266,73 @@
   ;;
 esac
 
-AC_OUTPUT([
+dnl#*********************************
+dnl#*** Substitute platform flags ***
+dnl#*********************************
+AC_MSG_CHECKING([PLATFORM_CPPFLAGS])
+AC_MSG_RESULT([${PLATFORM_CPPFLAGS}])
+AC_SUBST([PLATFORM_CPPFLAGS])
+AC_MSG_CHECKING([PLATFORM_CFLAGS])
+AC_MSG_RESULT([${PLATFORM_CFLAGS}])
+AC_SUBST([PLATFORM_CFLAGS])
+AC_MSG_CHECKING([PLATFORM_LDFLAGS])
+AC_MSG_RESULT([${PLATFORM_LDFLAGS}])
+AC_SUBST([PLATFORM_LDFLAGS])
+
+dnl# Check a few more headers after the above checks:
+if test -d "${prefix}/include/glib-2.0"; then
+  export CPPFLAGS="${CPPFLAGS} -I${prefix}/include/glib-2.0"
+elif test -d "/opt/local/include/glib-2.0"; then
+  export CPPFLAGS="${CPPFLAGS} -I/opt/local/include/glib-2.0"
+elif test -x "`which port`"; then
+  AC_MSG_WARN([Cannot find some include directories that might be useful (for glib)])
+fi
+if test -d "${prefix}/lib/glib-2.0/include"; then
+  export CPPFLAGS="${CPPFLAGS} -I${prefix}/lib/glib-2.0/include"
+elif test -d "/opt/local/lib/glib-2.0/include"; then
+  export CPPFLAGS="${CPPFLAGS} -I/opt/local/lib/glib-2.0/include"
+elif test -x "`which port`"; then
+  AC_MSG_WARN([Cannot find some include directories that might be useful (for glib)])
+fi
+AC_CHECK_HEADER([glib.h],[
+  AH_BOTTOM([
+#ifdef HAVE_GLIB_H
+# include <glib.h>
+#endif /* HAVE_GLIB_H */
+  ])
+],[
+  AC_CHECK_HEADER([glib-2.0/glib.h],[
+    AH_BOTTOM([
+#ifdef HAVE_GLIB_2_0_GLIB_H
+# include <glib-2.0/glib.h>
+#endif /* HAVE_GLIB_2_0_GLIB_H */
+    ])
+  ],[
+    AC_MSG_WARN([Not having a glib2 header can cause build failures.])
+  ])
+])
+
+
+AC_CHECK_HEADER([glib-object.h],[
+  AH_BOTTOM([
+#ifdef HAVE_GLIB_OBJECT_H
+# include <glib-object.h>
+#endif /* HAVE_GLIB_OBJECT_H */
+  ])
+],[
+  AC_CHECK_HEADER([glib-2.0/glib-object.h],[
+    AH_BOTTOM([
+#ifdef HAVE_GLIB_2_0_GLIB_OBJECT_H
+# include <glib-2.0/glib-object.h>
+#endif /* HAVE_GLIB_2_0_GLIB_OBJECT_H */
+    ])
+  ],[
+    AC_MSG_WARN([Not having a glib2 object header can cause build failures.])
+  ])
+])
+
+
+AC_CONFIG_FILES([
 Makefile
 docs/Makefile
 docs/reference/Makefile
@@ -226,12 +345,13 @@
 tdb/Makefile
 tests/Makefile
 ])
+AC_OUTPUT
 
-dnl ***************************
-dnl *** Print configuration ***
-dnl ***************************
-echo
+dnl#***************************
+dnl#*** Print configuration ***
+dnl#***************************
+echo ""
 echo "Build Configuration:"
-echo
-echo "* Debug Support:  $enable_debug"
-echo
+echo ""
+echo "* Debug Support:  ${enable_debug}"
+echo ""
